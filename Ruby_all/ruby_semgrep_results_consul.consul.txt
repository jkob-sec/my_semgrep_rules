
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/components/admin/widget/cards/row_component.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         16┆ title: card.image.title, target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/components/debates/new_component.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

          5┆ <%= link_to help_path(anchor: "debates"), title: t("shared.target_blank"), target: "_blank" do %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/components/layout/social_component.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

          5┆ <%= link_to "#{url}/#{setting["#{name}_handle"]}", target: "_blank", title: link_title(name) do %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/components/polls/questions/read_more_component.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         40┆ target: "_blank",
          ⋮┆----------------------------------------
         56┆ target: "_blank",


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/components/proposals/new_component.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

          5┆ <%= link_to help_path(anchor: "proposals"), title: t("shared.target_blank"), target: "_blank" do %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/components/sdg/related_list_selector_component.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         20┆ target: "_blank")),


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/admin_notifications_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          9┆ @admin_notification = AdminNotification.find(params[:id])
          ⋮┆----------------------------------------
         28┆ @admin_notification = AdminNotification.find(params[:id])
          ⋮┆----------------------------------------
         32┆ @admin_notification = AdminNotification.find(params[:id])
          ⋮┆----------------------------------------
         43┆ @admin_notification = AdminNotification.find(params[:id])
          ⋮┆----------------------------------------
         51┆ @admin_notification = AdminNotification.find(params[:id])
          ⋮┆----------------------------------------
         74┆ AdminNotification.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/banners_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         67┆ @banner ||= Banner.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/budget_investment_audits_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          3┆ investment = Budget::Investment.find(params[:budget_investment_id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/budget_investment_milestones_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          5┆ Budget::Investment.find(params[:budget_investment_id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/budget_investment_progress_bars_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          5┆ Budget::Investment.find(params[:budget_investment_id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/debates_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         11┆ @debate = Debate.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/hidden_budget_investments_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         28┆ @investment = Budget::Investment.with_hidden.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/hidden_comments_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         25┆ @comment = Comment.not_valuations.with_hidden.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/hidden_debates_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         28┆ @debate = Debate.with_hidden.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/hidden_proposal_notifications_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         25┆ @proposal_notification = ProposalNotification.with_hidden.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/hidden_proposals_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         28┆ @proposal = Proposal.with_hidden.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/hidden_users_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         11┆ @user = User.with_hidden.find(params[:id])
          ⋮┆----------------------------------------
         30┆ @user = User.with_hidden.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/milestone_statuses_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         41┆ @status = Milestone::Status.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/newsletters_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          7┆ @newsletter = Newsletter.find(params[:id])
          ⋮┆----------------------------------------
         26┆ @newsletter = Newsletter.find(params[:id])
          ⋮┆----------------------------------------
         30┆ @newsletter = Newsletter.find(params[:id])
          ⋮┆----------------------------------------
         40┆ @newsletter = Newsletter.find(params[:id])
          ⋮┆----------------------------------------
         47┆ @newsletter = Newsletter.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/officials_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         11┆ @user = User.find(params[:id])
          ⋮┆----------------------------------------
         15┆ @user = User.find(params[:id])
          ⋮┆----------------------------------------
         21┆ @official = User.officials.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/poll/booth_assignments_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         50┆ @poll = Poll.find(params[:poll_id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/poll/questions_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         17┆ proposal = Proposal.find(params[:proposal_id]) if params[:proposal_id].present?


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/poll/shifts_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         27┆ @shift = Poll::Shift.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/proposal_milestones_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          5┆ Proposal.find(params[:proposal_id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/proposal_progress_bars_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          5┆ Proposal.find(params[:proposal_id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/proposals_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         34┆ @proposal = Proposal.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/settings_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         17┆ @setting = Setting.find(params[:id])
          ⋮┆----------------------------------------
         34┆ setting = Setting.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/signature_sheets_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         22┆ @signature_sheet = SignatureSheet.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/site_customization/content_blocks_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         70┆ Budget::ContentBlock.find(params[:id]).destroy!
          ⋮┆----------------------------------------
         76┆ @content_block = Budget::ContentBlock.find(params[:id])
          ⋮┆----------------------------------------
         87┆ heading_content_block = Budget::ContentBlock.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/site_customization/documents_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         22┆ @document = Document.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/site_customization/pages_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         48┆ SiteCustomization::Page.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/stats_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         58┆ @budget = Budget.find(params[:budget_id])
          ⋮┆----------------------------------------
         75┆ @budget = Budget.find(params[:budget_id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/system_emails_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         52┆ ProposalNotification.find(params[:id]).moderate_system_email(current_user)


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/tags_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         39┆ @tag = Tag.category.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/valuator_groups_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          7┆ @group = ValuatorGroup.find(params[:id])
          ⋮┆----------------------------------------
         15┆ @group = ValuatorGroup.find(params[:id])
          ⋮┆----------------------------------------
         29┆ @group = ValuatorGroup.find(params[:id])
          ⋮┆----------------------------------------
         39┆ @group = ValuatorGroup.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/admin/valuators_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          5┆ @valuator = Valuator.find(params[:id])
          ⋮┆----------------------------------------
         24┆ @valuator = Valuator.find(params[:id])
          ⋮┆----------------------------------------
         29┆ @valuator = Valuator.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/budgets/ballot/lines_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         51┆ @investment = Budget::Investment.find(params[:investment_id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/budgets/investments_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-render-local-file-include
        Found request parameters in a call to `render`. This can allow end users to request
        arbitrary local files which may result in leaking sensitive information persisted on disk.
        Where possible, avoid letting users specify template paths for `render`. If you must allow
        user input, use an allow-list of known templates or normalize the user-supplied value with
        `File.basename(...)`.

        105┆ format.json { render json: data }
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         97┆ investment = Budget::Investment.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/comments_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         22┆ @comment = Comment.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/communities_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         16┆ @community = Community.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/concerns/commentable_actions.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         92┆ @resource.geozone = Geozone.find(geozone_id) if geozone_id.present?


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/concerns/dashboard/has_proposal.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          5┆ @proposal ||= Proposal.includes(:community).find(params[:proposal_id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/dashboard/actions_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         49┆ @dashboard_action ||= Dashboard::Action.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/dashboard/polls_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         55┆ @poll ||= Poll.includes(:questions).find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/direct_messages_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          5┆ @receiver = User.find(params[:user_id])
          ⋮┆----------------------------------------
         11┆ @receiver = User.find(params[:user_id])
          ⋮┆----------------------------------------
         24┆ @direct_message = DirectMessage.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/direct_uploads_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-render-local-file-include
        Found request parameters in a call to `render`. This can allow end users to request
        arbitrary local files which may result in leaking sensitive information persisted on disk.
        Where possible, avoid letting users specify template paths for `render`. If you must allow
        user input, use an allow-list of known templates or normalize the user-supplied value with
        `File.basename(...)`.

         17┆ render json: { cached_attachment: @direct_upload.relation.cached_attachment,
         18┆                filename: @direct_upload.relation.attachment_file_name,
         19┆                destroy_link: render_destroy_upload_link(@direct_upload),
         20┆                attachment_url: polymorphic_path(@direct_upload.relation.attachment) }


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/follows_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.rails-check-render-dos
        The render method in Rails versions 3.0.0 - 3.0.20, 3.1.0 - 3.1.12, and 3.2.0 - 3.2.16 are
        vulnerable to a denial of service attack (CVE-2014-0082), which could lead to service
        downtime. Upgrade to 3.2.17 or higher instead.

          8┆ render :refresh_follow_button


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/graphql_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-render-local-file-include
        Found request parameters in a call to `render`. This can allow end users to request
        arbitrary local files which may result in leaking sensitive information persisted on disk.
        Where possible, avoid letting users specify template paths for `render`. If you must allow
        user input, use an allow-list of known templates or normalize the user-supplied value with
        `File.basename(...)`.

         20┆ render json: result


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/management/proposals_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         49┆ @proposal = Proposal.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/moderation/proposal_notifications_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         12┆ ProposalNotification.find(params[:id]).update(moderated: true)


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/officing/ballot_sheets_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         33┆ @poll = Poll.find(params[:poll_id])
          ⋮┆----------------------------------------
         41┆ @ballot_sheet = Poll::BallotSheet.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/officing/voters_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          9┆ @user = User.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/pages_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-render-local-file-include
        Found request parameters in a call to `render`. This can allow end users to request
        arbitrary local files which may result in leaking sensitive information persisted on disk.
        Where possible, avoid letting users specify template paths for `render`. If you must allow
        user input, use an allow-list of known templates or normalize the user-supplied value with
        `File.basename(...)`.

         14┆ render action: params[:id]


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/proposal_notifications_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          5┆ @proposal = Proposal.find(params[:proposal_id])
          ⋮┆----------------------------------------
         24┆ @notification = ProposalNotification.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/related_contents_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         37┆ @related = RelatedContent.find params[:id]


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/sdg_management/relations_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unsafe-reflection
        Found user-controllable input to Ruby reflection functionality.  This allows a remote user
        to influence runtime behavior, up to and including arbitrary remote code execution. Do not
        provide user-controllable input to reflection functionality. Do not call symbol conversion
        on user-controllable input.

         36┆ params[:relatable_type].classify.constantize


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/topics_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

         58┆ @community = Community.find(params[:community_id])
          ⋮┆----------------------------------------
         62┆ @topic = Topic.find(params[:id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/controllers/verification/email_controller.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-unscoped-find
        Found an unscoped `find(...)` with user-controllable input.  If the ActiveRecord model being
        searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR)
        behavior and allow users to read arbitrary records.

          8┆ if Verification::Email.find(current_user, params[:email_verification_token])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/budget/investment.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-permit-attributes-high
        Calling `permit` on security-critical properties like `%i[heading_id group_id
        administrator_id tag_name valuator_id]` may leave your application vulnerable to mass
        assignment.

        130┆ params.permit(%i[heading_id group_id administrator_id tag_name valuator_id])


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/budget.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

         47┆ accepts_nested_attributes_for :phases


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/concerns/documentable.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

          6┆ accepts_nested_attributes_for :documents, allow_destroy: true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/concerns/galleryable.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

          6┆ accepts_nested_attributes_for :images, allow_destroy: true, update_only: true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/concerns/globalizable.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

          7┆ accepts_nested_attributes_for :translations, allow_destroy: true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/concerns/imageable.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

          6┆ accepts_nested_attributes_for :image, allow_destroy: true, update_only: true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/concerns/linkable.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

          6┆ accepts_nested_attributes_for :links, allow_destroy: true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/concerns/mappable.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

          6┆ accepts_nested_attributes_for :map_location, allow_destroy: true, reject_if: :all_blank


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/concerns/questionable.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

          6┆ accepts_nested_attributes_for :votation_type


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/concerns/reportable.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

          6┆ accepts_nested_attributes_for :report


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/legislation/proposal.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-regex-dos
        Found a potentially user-controllable argument in the construction of a regular expressions.
        This may result in excessive resource consumption when applied to certain inputs, or when
        the user is allowed to control the match target. Avoid allowing users to specify regular
        expressions processed by the server. If you must support user-controllable input in a
        regular expression, use an allow-list to restrict the expressions users may supply to limit
        catastrophic backtracking.

         80┆ /\A#{Setting["proposal_code_prefix"]}-\d\d\d\d-\d\d-(\d*)\z/.match(terms)
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

         18┆ accepts_nested_attributes_for :documents, allow_destroy: true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/legislation/question.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

         17┆ accepts_nested_attributes_for :question_options, reject_if: proc { |attributes| attributes.all? { |k, v| v.blank? } }, allow_destroy: true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/machine_learning.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.dangerous-subshell
        Detected non-static command inside `...`. If unverified user data can reach this call site,
        this is a code injection vulnerability. A malicious actor can inject a malicious script to
        execute arbitrary code.

        238┆ output = `cd #{SCRIPTS_FOLDER} && #{command} 2>&1`


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/poll/question/answer.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

          9┆ accepts_nested_attributes_for :documents, allow_destroy: true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/poll/question.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

         28┆ accepts_nested_attributes_for :question_answers, reject_if: :all_blank, allow_destroy: true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/poll.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

         46┆ accepts_nested_attributes_for :questions, reject_if: :all_blank, allow_destroy: true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/proposal.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-regex-dos
        Found a potentially user-controllable argument in the construction of a regular expressions.
        This may result in excessive resource consumption when applied to certain inputs, or when
        the user is allowed to control the match target. Avoid allowing users to specify regular
        expressions processed by the server. If you must support user-controllable input in a
        regular expression, use an allow-list to restrict the expressions users may supply to limit
        catastrophic backtracking.

        146┆ /\A#{Setting["proposal_code_prefix"]}-\d\d\d\d-\d\d-(\d*)\z/.match(terms)


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/models/user.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.nested-attributes
        Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
        results in an attacker begin able to change parameters apart from the ones intended by the
        developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don't use
        accepts_nested_attributes_for or upgrade Rails version.

         93┆ accepts_nested_attributes_for :organization, update_only: true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/admin/budget_investments/_select_investment.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         10┆ target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/admin/budget_investments/index.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

          5┆ class: "button hollow medium", target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/admin/dashboard/administrator_tasks/_form.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         14┆ proposal_path(administrator_task.source.proposal), target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/admin/milestones/_milestones.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         44┆ target: :_blank if milestone.image.present? %>
          ⋮┆----------------------------------------
         51┆ target: "_blank",


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/admin/poll/polls/_questions.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         28┆ target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/admin/users/_users.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         25┆ <td><%= link_to user.id, user_path(user), target: "_blank" %></td>
          ⋮┆----------------------------------------
         28┆ <td><%= link_to user.name, user_path(user), target: "_blank" %></td>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/admin/valuators/_user_row.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

          2┆ <td><%= link_to user.name, user_path(user), target: "_blank" %></td>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/dashboard/_document.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

          2┆ <%= link_to document.attachment, target: "_blank" do %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/dashboard/_proposed_action.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         49┆ <p><%= link_to link.label, link.url, target: "_blank" %></p>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/dashboard/actions/new_request.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         16┆ <p><%= link_to link.label, link.url, target: "_blank" %></p>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/dashboard/community.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

          8┆ target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/dashboard/mailer/forward.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         37┆ target: "_blank" do %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/dashboard/mailer/new_actions_notification_on_create.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         39┆ target: "_blank" do %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/dashboard/mailer/new_actions_notification_on_published.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         56┆ target: "_blank" do %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/dashboard/polls/_poll.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

          6┆ target: "_blank" %>
          ⋮┆----------------------------------------
         23┆ class: "button", target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/dashboard/polls/index.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         17┆ Setting["proposals.poll_link"], target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/dashboard/poster/_poster_options.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         10┆ target: "_blank",


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/dashboard/show.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

          6┆ target: "_blank",
          ⋮┆----------------------------------------
         14┆ target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/documents/_document.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

          3┆ document.attachment, target: "_blank",


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/layouts/application.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         32┆ t("layouts.application.chrome"), "https://www.google.com/chrome/browser/desktop/", title: t("shared.target_blank"), target: "_blank"),
          ⋮┆----------------------------------------
         34┆ t("layouts.application.firefox"), "https://www.mozilla.org/firefox", title: t("shared.target_blank"), target: "_blank")


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/layouts/dashboard/_proposal_header.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

          2┆ <%= link_to proposal.title, proposal, target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/layouts/dashboard/_proposal_totals.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         50┆ <%= link_to t("layouts.dashboard.proposal_totals.preview_proposal"), proposal_path(proposal), class: "button success expanded", target: "_blank" %>
          ⋮┆----------------------------------------
         52┆ <%= link_to t("layouts.dashboard.proposal_totals.show_proposal"), proposal_path(proposal), class: "button success expanded", target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/mailer/direct_message_for_receiver.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         14┆ <%= link_to user_url(@direct_message.sender), style: css_for_mailer_button, target: "_blank" do %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/management/document_verifications/invalid_document.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         15┆ link: link_to(t("management.document_verifications.link"), root_path, target: "_blank"))) %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/milestones/_milestone.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         41┆ target: "_blank",


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/moderation/budgets/investments/index.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         17┆ ), target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/moderation/comments/index.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         15┆ <%= link_to comment.commentable.title, commentable_path(comment), target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/moderation/debates/index.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         14┆ <%= link_to debate.title, debate, target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/moderation/proposal_notifications/index.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         14┆ <%= link_to proposal_notification.title, proposal_notification, target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/moderation/proposals/index.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         14┆ <%= link_to proposal.title, proposal, target: "_blank" %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/organizations/registrations/new.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         33┆ target: "_blank")


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/polls/_gallery.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         21┆ <%= link_to image.attachment, target: "_blank" do %>


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/users/registrations/new.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         41┆ target: "_blank")


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/app/views/verification/residence/new.html.erb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-reverse-tabnabbing
        Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows
        reverse tabnabbing on Internet Explorer, Opera, and Android Webview.

         76┆ target: "_blank")


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/config/deploy.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.dangerous-subshell
        Detected non-static command inside `...`. If unverified user data can reach this call site,
        this is a code injection vulnerability. A malicious actor can inject a malicious script to
        execute arbitrary code.

         18┆ set :revision, `git rev-parse --short #{fetch(:branch)}`.strip


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/config/environments/development.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.detailed-exceptions
        Found that the setting for providing detailed exception reports in Rails is set to true.
        This can lead to information exposure, where sensitive system or internal information is
        displayed  to the end user. Instead, turn this setting off.

         15┆ config.consider_all_requests_local = true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/config/environments/test.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.detailed-exceptions
        Found that the setting for providing detailed exception reports in Rails is set to true.
        This can lead to information exposure, where sensitive system or internal information is
        displayed  to the end user. Instead, turn this setting off.

         30┆ config.consider_all_requests_local       = true


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/config/initializers/errbit.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.ssl-mode-no-verify
        Detected SSL that will accept an unverified connection. This makes the connections
        susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead.

         ▶▶┆ Autofix ▶ s/VERIFY_NONE/VERIFY_PEER/g
         30┆ req.verify_mode = OpenSSL::SSL::VERIFY_NONE


  /home/rtz/github_vuln_research/my_semgrep_rules/Ruby_all/consul.consul/db/dev_seeds/users.rb 
     home.rtz.github_vuln_research.my_semgrep_rules.ruby_semgrep_rules.check-secrets
        Found a Brakeman-style secret - a variable with the name
        password/secret/api_key/rest_auth_site_key and a non-empty string literal value.

          3┆ password = "12345678"
