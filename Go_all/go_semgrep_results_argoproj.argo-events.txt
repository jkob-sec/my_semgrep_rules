
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/argoproj.argo-events/eventsources/sources/awssns/start.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.unsafe-reflect-by-name
        If an attacker can supply values that the application then uses to determine which method or
        field to invoke, the potential exists for the attacker to create control flow paths through
        the application that were not intended by the application developers. This attack vector may
        allow the attacker to bypass authentication or access control checks or otherwise cause the
        application to behave in an unexpected manner.

        356┆ field := reflect.Indirect(v).FieldByName(key)


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/argoproj.argo-events/eventsources/sources/gitlab/start.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.unsafe-reflect-by-name
        If an attacker can supply values that the application then uses to determine which method or
        field to invoke, the potential exists for the attacker to create control flow paths through
        the application that were not intended by the application developers. This attack vector may
        allow the attacker to bypass authentication or access control checks or otherwise cause the
        application to behave in an unexpected manner.

        190┆ elem := reflect.ValueOf(opt).Elem().FieldByName(event)
