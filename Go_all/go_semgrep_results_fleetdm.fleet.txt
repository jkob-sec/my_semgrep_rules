
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/cmd/fleet/serve.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.grpc-server-insecure-connection
        Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This
        allows for a connection without encryption to this server. A malicious attacker could tamper
        with the gRPC message, which could compromise the machine. Include credentials derived from
        an SSL certificate in order to create a secure gRPC connection. You can create credentials
        using 'credentials.NewServerTLSFromFile("cert.pem", "cert.key")'.

        760â”† launcher := launcher.New(svc, logger, grpc.NewServer(), healthCheckers)


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/cmd/fleetctl/preview.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.dangerous-exec-command
        Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified
        user data can reach this call site, this is a code injection vulnerability. A malicious
        actor can inject a malicious script to execute arbitrary code.

        766â”† cmd := exec.Command(orbitPath,
        767â”† 	"--root-dir", destDir,
        768â”† 	"--fleet-url", address,
        769â”† 	"--insecure",
        770â”† 	"--debug",
        771â”† 	"--enroll-secret", enrollSecret,
        772â”† 	"--orbit-channel", orbitChannel,
        773â”† 	"--osqueryd-channel", osquerydChannel,
        774â”† 	"--log-file", filepath.Join(destDir, "orbit.log"),
        775â”† )


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/cmd/osquery-perf/agent.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.potential-dos-via-decompression-bomb
        Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read,
        you can mitigate this attack. `io.CopyN()` can specify a size. Refer to https://bomb.codes/
        to learn more about this attack and other ways to mitigate it.

         â–¶â–¶â”† Autofix â–¶ s/(.*)(Copy|CopyBuffer)\((.*?),(.*?)(\)|,.*\))/\1CopyN(\3, \4, 1024*1024*256)/g
        651â”† _, err = io.Copy(dstF, r) //nolint:gosec


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/infrastructure/sandbox/JITProvisioner/deprovisioner/main.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.dangerous-exec-cmd
        Detected non-static command inside exec.Cmd. Audit the input to 'exec.Cmd'. If unverified
        user data can reach this call site, this is a code injection vulnerability. A malicious
        actor can inject a malicious script to execute arbitrary code.

         25â”† cmd := exec.Cmd{
         26â”† 	Path:   "/build/terraform",
         27â”† 	Dir:    "/build/deploy_terraform",
         28â”† 	Stdout: os.Stdout,
         29â”† 	Stderr: os.Stderr,
         30â”† 	Args:   append([]string{"/build/terraform"}, args...),
         31â”† }


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/infrastructure/sandbox/PreProvisioner/lambda/main.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.dangerous-exec-cmd
        Detected non-static command inside exec.Cmd. Audit the input to 'exec.Cmd'. If unverified
        user data can reach this call site, this is a code injection vulnerability. A malicious
        actor can inject a malicious script to execute arbitrary code.

        198â”† cmd := exec.Cmd{
        199â”† 	Path:   "/build/terraform",
        200â”† 	Dir:    "/build/deploy_terraform",
        201â”† 	Stdout: os.Stdout,
        202â”† 	Stderr: os.Stderr,
        203â”† 	Args:   append([]string{"/build/terraform"}, args...),
        204â”† }


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/orbit/cmd/orbit/orbit.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.dangerous-exec-command
        Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified
        user data can reach this call site, this is a code injection vulnerability. A malicious
        actor can inject a malicious script to execute arbitrary code.

        923â”† out, err := exec.Command(osqueryPath, args...).Output()


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/orbit/pkg/execuser/execuser_windows.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.use-of-unsafe-block
        Using the unsafe package in Go gives you low-level memory management and many of the
        strengths of the C language, but also steps around the type safety of Go and can lead to
        buffer overflows and possible arbitrary code execution by an attacker. Only use this package
        if you absolutely know what you're doing.

        153â”†  ... unsafe.Pointer(&sessionInformation)), uintptr(unsafe.Pointer(&sessionCount))); returnCode == 0 { ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
        153â”†  ... unsafe.Pointer(&sessionCount))); returnCode == 0 { ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
        157â”† structSize := unsafe.Sizeof(WTS_SESSION_INFO{})
          â‹®â”†----------------------------------------
        160â”† sessionList = append(sessionList, (*WTS_SESSION_INFO)(unsafe.Pointer(current)))
          â‹®â”†----------------------------------------
        176â”† if returnCode, _, err := procWTSQueryUserToken.Call(uintptr(sessionId), uintptr(unsafe.Pointer(&impersonationToken))); returnCode == 0 {
          â‹®â”†----------------------------------------
        180â”†  ... unsafe.Pointer(&userToken))); returnCode == 0 { ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
        214â”† if returnCode, _, err := procCreateEnvironmentBlock.Call(uintptr(unsafe.Pointer(&envInfo)), uintptr(userToken), 1); returnCode == 0 {
          â‹®â”†----------------------------------------
        224â”† commandLine = uintptr(unsafe.Pointer(windows.StringToUTF16Ptr(cmdLine)))
          â‹®â”†----------------------------------------
        227â”† workingDir = uintptr(unsafe.Pointer(windows.StringToUTF16Ptr(workDir)))
          â‹®â”†----------------------------------------
        231â”† uintptr(userToken), uintptr(unsafe.Pointer(windows.StringToUTF16Ptr(appPath))), commandLine, 0, 0, 0,
          â‹®â”†----------------------------------------
        232â”† uintptr(creationFlags), uintptr(envInfo), workingDir, uintptr(unsafe.Pointer(&startupInfo)), uintptr(unsafe.Pointer(&processInfo)),
          â‹®â”†----------------------------------------
        232â”† uintptr(creationFlags), uintptr(envInfo), workingDir, uintptr(unsafe.Pointer(&startupInfo)), uintptr(unsafe.Pointer(&processInfo)),
          â‹®â”†----------------------------------------
        279â”† Length:             uint32(unsafe.Sizeof(windows.SecurityAttributes{})),


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/orbit/pkg/osquery/osquery.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.dangerous-exec-command
        Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified
        user data can reach this call site, this is a code injection vulnerability. A malicious
        actor can inject a malicious script to execute arbitrary code.

         48â”† cmd := exec.Command(path)


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/orbit/pkg/packaging/wix/wix.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.dangerous-exec-command
        Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified
        user data can reach this call site, this is a code injection vulnerability. A malicious
        actor can inject a malicious script to execute arbitrary code.

         43â”† cmd := exec.Command(args[0], args[1:]...)
          â‹®â”†----------------------------------------
         79â”† cmd := exec.Command(args[0], args[1:]...)
          â‹®â”†----------------------------------------
        117â”† cmd := exec.Command(args[0], args[1:]...)


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/orbit/pkg/platform/platform_windows.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.use-of-unsafe-block
        Using the unsafe package in Go gives you low-level memory management and many of the
        strengths of the C language, but also steps around the type safety of Go and can lead to
        buffer overflows and possible arbitrary code execution by an attacker. Only use this package
        if you absolutely know what you're doing.

        169â”† procEntry.Size = uint32(unsafe.Sizeof(procEntry))


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/orbit/pkg/table/mdm/mdm_windows.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.use-of-unsafe-block
        Using the unsafe package in Go gives you low-level memory management and many of the
        strengths of the C language, but also steps around the type safety of Go and can lead to
        buffer overflows and possible arbitrary code execution by an attacker. Only use this package
        if you absolutely know what you're doing.

        148â”†  ... unsafe.Pointer(&isDeviceRegisteredWithMDM)), maxBufSize, uintptr(unsafe.Pointer(&buffUriData))); returnCode != uintptr(windows.ERROR_SUCCESS) { ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
        148â”†  ... unsafe.Pointer(&buffUriData))); returnCode != uintptr(windows.ERROR_SUCCESS) { ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
        155â”† workUriData, err := localUTF16toString(unsafe.Pointer(&buffUriData))
          â‹®â”†----------------------------------------
        230â”†  ... unsafe.Pointer(&inputCmdPtr[0])), uintptr(unsafe.Pointer(&outputStrBuffer))); returnCode != uintptr(windows.ERROR_SUCCESS) { ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
        230â”†  ... unsafe.Pointer(&outputStrBuffer))); returnCode != uintptr(windows.ERROR_SUCCESS) { ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
        235â”† outputCmd, err := localUTF16toString(unsafe.Pointer(outputStrBuffer))
          â‹®â”†----------------------------------------
        241â”† _, err = windows.LocalFree(windows.Handle(unsafe.Pointer(outputStrBuffer)))
          â‹®â”†----------------------------------------
        288â”† handlesList := (*ntdll.SystemHandleInformationT)(unsafe.Pointer(&bufQuerySystemSyscall[0]))
          â‹®â”†----------------------------------------
        309â”† oti := (*ntdll.ObjectTypeInformationT)(unsafe.Pointer(&handleObjectTypeBuf[0]))
          â‹®â”†----------------------------------------
        321â”† oni := (*ntdll.ObjectNameInformationT)(unsafe.Pointer(&handleObjectNameBuf[0]))


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/orbit/pkg/update/execcmd.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.dangerous-exec-command
        Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified
        user data can reach this call site, this is a code injection vulnerability. A malicious
        actor can inject a malicious script to execute arbitrary code.

         11â”† cmd := exec.Command(exe, args...)


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/orbit/pkg/update/options.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.dangerous-exec-command
        Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified
        user data can reach this call site, this is a code injection vulnerability. A malicious
        actor can inject a malicious script to execute arbitrary code.

         76â”† cmd := exec.Command(execPath, "--help")


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/orbit/pkg/update/update.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.dangerous-exec-command
        Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified
        user data can reach this call site, this is a code injection vulnerability. A malicious
        actor can inject a malicious script to execute arbitrary code.

        458â”† cmd := exec.Command(tmpPath, "--help")
          â‹®â”†----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.potential-dos-via-decompression-bomb
        Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read,
        you can mitigate this attack. `io.CopyN()` can specify a size. Refer to https://bomb.codes/
        to learn more about this attack and other ways to mitigate it.

         â–¶â–¶â”† Autofix â–¶ s/(.*)(Copy|CopyBuffer)\((.*?),(.*?)(\)|,.*\))/\1CopyN(\3, \4, 1024*1024*256)/g
        513â”† if _, err := io.Copy(outFile, tarReader); err != nil {


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/app_configs.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

        142â”† const insStmt = `INSERT INTO enroll_secrets (secret, team_id, created_at) VALUES %s`
        143â”† if len(newSecrets) > 0 {
        144â”† 	var args []interface{}
        145â”† 	defaultCreatedAt := time.Now()
        146â”† 	sql := fmt.Sprintf(insStmt, strings.TrimSuffix(strings.Repeat(`(?,?,?),`, len(newSecrets)), ","))
        147â”† 
        148â”† 	for _, s := range secrets {
        149â”† 		secretCreatedAt := defaultCreatedAt
        150â”† 		if ts := secretsCreatedAt[s.Secret]; ts != nil {
        151â”† 			secretCreatedAt = *ts
           [hid 7 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/carves.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         97â”† stmt := `
         98â”† 	SELECT id
         99â”† 	FROM carve_metadata
        100â”† 	WHERE expired = 0 AND created_at < (? - INTERVAL 24 HOUR)
        101â”† 	LIMIT 50000
        102â”† `
        103â”† var expiredCarves []int64
        104â”† if err := sqlx.SelectContext(ctx, tx, &expiredCarves, stmt, now); err != nil {
        105â”† 	return ctxerr.Wrap(ctx, err, "get expired carves")
        106â”† }
           [hid 21 additional lines, adjust with --max-lines-per-finding] 
         97â”† stmt := `
         98â”† 	SELECT id
         99â”† 	FROM carve_metadata
        100â”† 	WHERE expired = 0 AND created_at < (? - INTERVAL 24 HOUR)
        101â”† 	LIMIT 50000
        102â”† `
        103â”† var expiredCarves []int64
        104â”† if err := sqlx.SelectContext(ctx, tx, &expiredCarves, stmt, now); err != nil {
        105â”† 	return ctxerr.Wrap(ctx, err, "get expired carves")
        106â”† }
           [hid 36 additional lines, adjust with --max-lines-per-finding] 
        116â”† stmt = `
        117â”† 	DELETE FROM carve_blocks
        118â”† 	WHERE metadata_id IN (?)
        119â”† `
        120â”† stmt, args, err := sqlx.In(stmt, expiredCarves)
        121â”† if err != nil {
        122â”† 	return ctxerr.Wrap(ctx, err, "IN for DELETE FROM carve_blocks")
        123â”† }
        124â”† stmt = tx.Rebind(stmt)
        125â”† if _, err := tx.ExecContext(ctx, stmt, args...); err != nil {
           [hid 2 additional lines, adjust with --max-lines-per-finding] 
        116â”† stmt = `
        117â”† 	DELETE FROM carve_blocks
        118â”† 	WHERE metadata_id IN (?)
        119â”† `
        120â”† stmt, args, err := sqlx.In(stmt, expiredCarves)
        121â”† if err != nil {
        122â”† 	return ctxerr.Wrap(ctx, err, "IN for DELETE FROM carve_blocks")
        123â”† }
        124â”† stmt = tx.Rebind(stmt)
        125â”† if _, err := tx.ExecContext(ctx, stmt, args...); err != nil {
           [hid 17 additional lines, adjust with --max-lines-per-finding] 
        130â”† stmt = `
        131â”† 	UPDATE carve_metadata
        132â”† 	SET expired = 1
        133â”† 	WHERE id IN (?)
        134â”† `
        135â”† stmt, args, err = sqlx.In(stmt, expiredCarves)
        136â”† if err != nil {
        137â”† 	return ctxerr.Wrap(ctx, err, "IN for UPDATE carve_metadata")
        138â”† }
        139â”† stmt = tx.Rebind(stmt)
           [hid 3 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/hosts.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

        816â”† selectIDs := `
        817â”† SELECT
        818â”†   id
        819â”† FROM
        820â”†   hosts
        821â”† WHERE
        822â”†   hostname = '' AND
        823â”†   osquery_version = '' AND
        824â”†   hardware_serial = '' AND
        825â”†   created_at < (? - INTERVAL 5 MINUTE)`
           [hid 11 additional lines, adjust with --max-lines-per-finding] 
       1935â”† stmt := insStmt + strings.TrimSuffix(strings.Repeat(insPart, len(toIns)), ",")
       1936â”† if _, err := tx.ExecContext(ctx, stmt, args...); err != nil {
       1937â”† 	return ctxerr.Wrap(ctx, err, "insert host emails")
       1938â”† }
          â‹®â”†----------------------------------------
       2124â”† 	insStmt  = `INSERT INTO host_munki_issues (host_id, munki_issue_id) VALUES %s ON DUPLICATE KEY UPDATE host_id = host_id`
       2125â”† 	stmtPart = `(?, ?),`
       2126â”† )
       2127â”† 
       2128â”† stmt := fmt.Sprintf(insStmt, strings.TrimSuffix(strings.Repeat(stmtPart, len(newIDs)), ","))
       2129â”† args := make([]interface{}, 0, 2*len(newIDs))
       2130â”† for _, id := range newIDs {
       2131â”† 	args = append(args, hostID, id)
       2132â”† }
       2133â”† if _, err := ds.writer.ExecContext(ctx, stmt, args...); err != nil {
           [hid 2 additional lines, adjust with --max-lines-per-finding] 
       2231â”† 	insStmt   = `INSERT INTO munki_issues (name, issue_type) VALUES %s ON DUPLICATE KEY UPDATE issue_type = issue_type`
       2232â”† 	stmtParts = `(?, ?),`
       2233â”† )
       2234â”† 
       2235â”† msgsToReload := missing
       2236â”† 
       2237â”† args := make([]interface{}, 0, batchSize*2)
       2238â”† for len(missing) > 0 {
       2239â”† 	batch := missing
       2240â”† 	if len(batch) > batchSize {
           [hid 13 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/invites.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         50â”† sql := "INSERT INTO invite_teams (invite_id, team_id, role) VALUES " +
         51â”† 	strings.Repeat(valueStr, len(i.Teams))
         52â”† sql = strings.TrimSuffix(sql, ",")
         53â”† if _, err := tx.ExecContext(ctx, sql, args...); err != nil {
         54â”† 	return ctxerr.Wrap(ctx, err, "insert teams")
         55â”† }


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/labels.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

        847â”† sql := `INSERT INTO label_membership (label_id, host_id) VALUES `
        848â”† sql += strings.Repeat(`(?, ?),`, len(batch))
        849â”† sql = strings.TrimSuffix(sql, ",")
        850â”† sql += ` ON DUPLICATE KEY UPDATE updated_at = VALUES(updated_at)`
        851â”† 
        852â”† vals := make([]interface{}, 0, len(batch)*2)
        853â”† for _, tup := range batch {
        854â”† 	vals = append(vals, tup[0], tup[1])
        855â”† }
        856â”† return ds.withRetryTxx(ctx, func(tx sqlx.ExtContext) error {
           [hid 3 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/migrations/tables/20161118212557_CreateTableLabels.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         15â”† _, err := tx.Exec(
         16â”† 	"CREATE TABLE `labels` (" +
         17â”† 		"`id` int(10) unsigned NOT NULL AUTO_INCREMENT," +
         18â”† 		"`created_at` timestamp DEFAULT CURRENT_TIMESTAMP," +
         19â”† 		"`updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP," +
         20â”† 		"`deleted_at` timestamp NULL DEFAULT NULL," +
         21â”† 		"`deleted` tinyint(1) NOT NULL DEFAULT FALSE," +
         22â”† 		"`name` varchar(255) NOT NULL," +
         23â”† 		"`description` varchar(255) DEFAULT NULL," +
         24â”† 		"`query` varchar(255) NOT NULL," +
           [hid 7 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/migrations/tables/20170306075207_UseUTF8MB.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         17â”† _, err := tx.Exec(fmt.Sprintf("ALTER DATABASE DEFAULT CHARACTER SET %s", charset))
          â‹®â”†----------------------------------------
         48â”† _, err = tx.Exec(fmt.Sprintf("ALTER TABLE %s CONVERT TO CHARACTER SET %s", name, charset))


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/migrations/tables/20210818151827_RemoveForeignKeysSchedQStats.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         28â”† _, err = tx.Exec(fmt.Sprintf(`ALTER TABLE scheduled_query_stats DROP FOREIGN KEY %s;`, constraint))


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/migrations/tables/20210819131107_AddCascadeToHostSoftware.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         25â”† _, err = tx.Exec(fmt.Sprintf(`ALTER TABLE host_software DROP FOREIGN KEY %s;`, constraint))


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/migrations/tables/20211102135149_AddHostSeenTimesTable.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         47â”† _, err = tx.Exec(fmt.Sprintf(`ALTER TABLE host_software DROP FOREIGN KEY %s;`, constraint))


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/migrations/tables/20211116184030_PolicyWithProprietaryQuery.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         89â”† _, err = tx.Exec(fmt.Sprintf(`ALTER TABLE policies DROP FOREIGN KEY %s;`, constraint))
          â‹®â”†----------------------------------------
        100â”† if _, err := tx.Exec(`ALTER TABLE policies DROP KEY ` + indexName); err != nil {


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/migrations/tables/20211202092042_RemovePolicyHistory.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         30â”† if _, err := tx.Exec(fmt.Sprintf(`ALTER TABLE policy_membership_history DROP FOREIGN KEY %s;`, ct)); err != nil {


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/migrations/tables/20220107155700_RemoveHostIDFK.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         38â”† if _, err := tx.Exec(fmt.Sprintf(`ALTER TABLE %s DROP FOREIGN KEY %s;`, table, ct)); err != nil {


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/migrations/tables/20220208144831_AddSoftwareReleaseArchVendorColumns.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         33â”† if _, err := tx.Exec(fmt.Sprintf("ALTER TABLE software DROP KEY %s", currIndexName)); err != nil {


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/migrations/tables/20220323152301_CleanupHostRelatedTables.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         41â”† _, err := tx.Exec(fmt.Sprintf(delStmt, hostRef))


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/policies.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

        536â”† sql := `INSERT IGNORE INTO policy_membership (policy_id, host_id, passes) VALUES `
        537â”† sql += strings.Repeat(`(?, ?, ?),`, len(batch))
        538â”† sql = strings.TrimSuffix(sql, ",")
        539â”† sql += ` ON DUPLICATE KEY UPDATE updated_at = VALUES(updated_at), passes = VALUES(passes)`
        540â”† 
        541â”† vals := make([]interface{}, 0, len(batch)*3)
        542â”† for _, tup := range batch {
        543â”† 	vals = append(vals, tup.PolicyID, tup.HostID, tup.Passes)
        544â”† }
        545â”† return ds.withRetryTxx(ctx, func(tx sqlx.ExtContext) error {
           [hid 3 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/scheduled_queries.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

        279â”† stmt = `
        280â”† 	INSERT INTO scheduled_query_stats (
        281â”† 		host_id,
        282â”† 		scheduled_query_id,
        283â”† 		average_memory,
        284â”† 		denylisted,
        285â”† 		executions,
        286â”† 		schedule_interval,
        287â”† 		last_executed,
        288â”† 		output_size,
           [hid 63 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/software.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

       1022â”† 	query := `
       1023â”† INSERT INTO cve_meta (cve, cvss_score, epss_probability, cisa_known_exploit, published)
       1024â”† VALUES %s
       1025â”† ON DUPLICATE KEY UPDATE
       1026â”†     cvss_score = VALUES(cvss_score),
       1027â”†     epss_probability = VALUES(epss_probability),
       1028â”†     cisa_known_exploit = VALUES(cisa_known_exploit),
       1029â”†     published = VALUES(published)
       1030â”† `
       1031â”† 
           [hid 22 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/teams.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

        183â”† sql := `DELETE FROM user_teams WHERE team_id = ?`
        184â”† if _, err := exec.ExecContext(ctx, sql, team.ID); err != nil {
        185â”† 	return ctxerr.Wrap(ctx, err, "delete existing users")
        186â”† }
        187â”† 
        188â”† if len(team.Users) == 0 {
        189â”† 	return nil
        190â”† }
        191â”† 
        192â”† // Bulk insert
           [hid 11 additional lines, adjust with --max-lines-per-finding] 
        198â”† sql = "INSERT INTO user_teams (user_id, team_id, role) VALUES " +
        199â”† 	strings.Repeat(valueStr, len(team.Users))
        200â”† sql = strings.TrimSuffix(sql, ",")
        201â”† if _, err := exec.ExecContext(ctx, sql, args...); err != nil {
        202â”† 	return ctxerr.Wrap(ctx, err, "insert users")
        203â”† }


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/testing_utils.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

        332â”† if _, err := tx.ExecContext(ctx, "TRUNCATE TABLE "+tbl); err != nil {


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/server/datastore/mysql/users.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

        249â”† sql := `DELETE FROM user_teams WHERE user_id = ?`
        250â”† if _, err := tx.ExecContext(ctx, sql, user.ID); err != nil {
        251â”† 	return ctxerr.Wrap(ctx, err, "delete existing teams")
        252â”† }
        253â”† 
        254â”† if len(user.Teams) == 0 {
        255â”† 	return nil
        256â”† }
        257â”† 
        258â”† // Bulk insert
           [hid 11 additional lines, adjust with --max-lines-per-finding] 
        264â”† sql = "INSERT INTO user_teams (user_id, team_id, role) VALUES " +
        265â”† 	strings.Repeat(valueStr, len(user.Teams))
        266â”† sql = strings.TrimSuffix(sql, ",")
        267â”† if _, err := tx.ExecContext(ctx, sql, args...); err != nil {
        268â”† 	return ctxerr.Wrap(ctx, err, "insert teams")
        269â”† }


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/tools/file-server/main.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.fs-directory-listing
        Detected usage of 'http.FileServer' as handler: this allows directory listing and an
        attacker could navigate through directories looking for sensitive files. Be sure to disable
        directory listing or restrict access to specific directories/files.

         10â”† http.Handle("/", fs)


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/fleetdm.fleet/tools/mdm/windows/programmatic-enrollment/main.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.use-of-unsafe-block
        Using the unsafe package in Go gives you low-level memory management and many of the
        strengths of the C language, but also steps around the type safety of Go and can lead to
        buffer overflows and possible arbitrary code execution by an attacker. Only use this package
        if you absolutely know what you're doing.

         66â”†  ... unsafe.Pointer(&isDeviceRegisteredWithMDM)), maxBufSize, uintptr(unsafe.Pointer(&buffUriData))); returnCode != uintptr(windows.ERROR_SUCCESS) { ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
         66â”†  ... unsafe.Pointer(&buffUriData))); returnCode != uintptr(windows.ERROR_SUCCESS) { ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
         70â”† uriData, err := localUTF16toString(unsafe.Pointer(&buffUriData))
          â‹®â”†----------------------------------------
         99â”†  ... unsafe.Pointer(inputMdmUPN)), uintptr(unsafe.Pointer(inputDiscoveryEndpoint)), uintptr(unsafe.Pointer(inputCSRreq))); returnCode != uintptr(windows.ERROR_SUCCES ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
         99â”†  ... unsafe.Pointer(inputDiscoveryEndpoint)), uintptr(unsafe.Pointer(inputCSRreq))); returnCode != uintptr(windows.ERROR_SUCCESS) { ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          â‹®â”†----------------------------------------
         99â”†  ... unsafe.Pointer(inputCSRreq))); returnCode != uintptr(windows.ERROR_SUCCESS) { ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
