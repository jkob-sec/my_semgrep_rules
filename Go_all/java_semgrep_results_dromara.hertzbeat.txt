
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/Java_all/dromara.hertzbeat/collector/src/main/java/com/usthe/collector/collect/common/http/CommonHttpClient.java 
     java_semgrep_rules.insecure-hostname-verifier
        Insecure HostnameVerifier implementation detected. This will accept any SSL certificate with
        any hostname, which creates the possibility for man-in-the-middle attacks.

         26┆ import org.apache.http.conn.ssl.NoopHostnameVerifier;
          ⋮┆----------------------------------------
     java_semgrep_rules.insecure-trust-manager
        Detected empty trust manager implementations. This is dangerous because it accepts any
        certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and
        TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-
        certificates-using-httpclient-over-https for more information.

         94┆ @Override
         95┆ public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { }
          ⋮┆----------------------------------------
        109┆ @Override
        110┆ public X509Certificate[] getAcceptedIssuers() { return null; }


  /home/rtz/github_vuln_research/my_semgrep_rules/Java_all/dromara.hertzbeat/collector/src/main/java/com/usthe/collector/collect/database/JdbcCommonCollect.java 
     java_semgrep_rules.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

        182┆ ResultSet resultSet = statement.executeQuery(sql);
          ⋮┆----------------------------------------
        216┆ ResultSet resultSet = statement.executeQuery(sql);
          ⋮┆----------------------------------------
        253┆ ResultSet resultSet = statement.executeQuery(sql);
          ⋮┆----------------------------------------
        182┆ ResultSet resultSet = statement.executeQuery(sql);
          ⋮┆----------------------------------------
        216┆ ResultSet resultSet = statement.executeQuery(sql);
          ⋮┆----------------------------------------
        253┆ ResultSet resultSet = statement.executeQuery(sql);


  /home/rtz/github_vuln_research/my_semgrep_rules/Java_all/dromara.hertzbeat/collector/src/main/java/com/usthe/collector/collect/http/HttpCollectImpl.java 
     java_semgrep_rules.documentbuilderfactory-disallow-doctype-decl-missing
        DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML
        external entity attacks. Disable this by setting the feature
        "http://apache.org/xml/features/disallow-doctype-decl" to true. Alternatively, allow DOCTYPE
        declarations and only prohibit external entities declarations. This can be done by setting
        the features "http://xml.org/sax/features/external-general-entities" and
        "http://xml.org/sax/features/external-parameter-entities" to false.

         ▶▶┆ Autofix ▶ dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
dbf.newDocumentBuilder();
        233┆ DocumentBuilder db = dbf.newDocumentBuilder();
          ⋮┆----------------------------------------
     java_semgrep_rules.owasp.java.xxe.javax.xml.parsers.DocumentBuilderFactory
        DocumentBuilderFactory being instantiated without calling the setFeature functions that are
        generally used for disabling entity processing

        232┆ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        233┆ DocumentBuilder db = dbf.newDocumentBuilder();
        234┆ Document document = db.parse(new ByteArrayInputStream(resp.getBytes(StandardCharsets.UTF_8)));


  /home/rtz/github_vuln_research/my_semgrep_rules/Java_all/dromara.hertzbeat/manager/src/main/resources/application.yml 
     java_semgrep_rules.spring-actuator-fully-enabled-yaml
        Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as
        /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring
        Security enabled or another means to protect these endpoints, this functionality is
        available without authentication, causing a severe security risk.

         46┆ include: '*'


  /home/rtz/github_vuln_research/my_semgrep_rules/Java_all/dromara.hertzbeat/warehouse/src/main/java/com/usthe/warehouse/store/HistoryTdEngineDataStorage.java 
     java_semgrep_rules.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

        262┆ ResultSet resultSet = statement.executeQuery(selectSql);
          ⋮┆----------------------------------------
        315┆ ResultSet resultSet = statement.executeQuery(queryInstanceSql);
          ⋮┆----------------------------------------
        348┆ ResultSet resultSet = statement.executeQuery(selectSql);
          ⋮┆----------------------------------------
        174┆ statement.execute(insertDataSql);
          ⋮┆----------------------------------------
        200┆ statement.execute(createTableSql);
          ⋮┆----------------------------------------
        201┆ statement.execute(insertDataSql);
          ⋮┆----------------------------------------
        315┆ ResultSet resultSet = statement.executeQuery(queryInstanceSql);
          ⋮┆----------------------------------------
        348┆ ResultSet resultSet = statement.executeQuery(selectSql);
