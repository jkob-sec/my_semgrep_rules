
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/pomerium.pomerium/authenticate/handlers.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.cookie-missing-secure
        A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for
        cookies prevents the client from transmitting the cookie over insecure channels such as
        HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.

         ▶▶┆ Autofix ▶ s/(Secure\s*:\s+)false/\1true/g
        462┆ http.SetCookie(w, &http.Cookie{
        463┆ 	Name:  urlutil.QueryRedirectURI,
        464┆ 	Value: redirectURI,
        465┆ })


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/pomerium.pomerium/authenticate/identity_profile.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.cookie-missing-secure
        A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for
        cookies prevents the client from transmitting the cookie over insecure channels such as
        HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.

         ▶▶┆ Autofix ▶ s/(Secure\s*:\s+)false/\1true/g
         95┆ err = cookieChunker.SetCookie(w, &http.Cookie{
         96┆ 	Name:  urlutil.QueryIdentityProfile,
         97┆ 	Value: base64.RawURLEncoding.EncodeToString(encrypted),
         98┆ 	Path:  "/",
         99┆ })


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/pomerium.pomerium/databroker/cache.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.grpc-server-insecure-connection
        Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This
        allows for a connection without encryption to this server. A malicious attacker could tamper
        with the gRPC message, which could compromise the machine. Include credentials derived from
        an SSL certificate in order to create a secure gRPC connection. You can create credentials
        using 'credentials.NewServerTLSFromFile("cert.pem", "cert.key")'.

         60┆ localGRPCServer := grpc.NewServer(
         61┆ 	grpc.StreamInterceptor(si),
         62┆ 	grpc.UnaryInterceptor(ui),
         63┆ )


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/pomerium.pomerium/internal/controlplane/server.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.grpc-server-insecure-connection
        Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This
        allows for a connection without encryption to this server. A malicious attacker could tamper
        with the gRPC message, which could compromise the machine. Include credentials derived from
        an SSL certificate in order to create a secure gRPC connection. You can create credentials
        using 'credentials.NewServerTLSFromFile("cert.pem", "cert.key")'.

         98┆ srv.GRPCServer = grpc.NewServer(
         99┆ 	grpc.StatsHandler(telemetry.NewGRPCServerStatsHandler(cfg.Options.Services)),
        100┆ 	grpc.ChainUnaryInterceptor(requestid.UnaryServerInterceptor(), ui),
        101┆ 	grpc.ChainStreamInterceptor(requestid.StreamServerInterceptor(), si),
        102┆ )


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/pomerium.pomerium/internal/sessions/cookie/cookie_store.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.cookie-missing-secure
        A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for
        cookies prevents the client from transmitting the cookie over insecure channels such as
        HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.

         ▶▶┆ Autofix ▶ s/(Secure\s*:\s+)false/\1true/g
         87┆ return &http.Cookie{
         88┆ 	Name:     opts.Name,
         89┆ 	Value:    value,
         90┆ 	Path:     "/",
         91┆ 	Domain:   opts.Domain,
         92┆ 	HttpOnly: opts.HTTPOnly,
         93┆ 	Secure:   opts.Secure,
         94┆ 	Expires:  timeNow().Add(opts.Expire),
         95┆ }


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/pomerium.pomerium/pkg/envoy/envoy.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.dangerous-exec-command
        Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified
        user data can reach this call site, this is a code injection vulnerability. A malicious
        actor can inject a malicious script to execute arbitrary code.

        152┆ cmd := exec.Command(exePath, args...)


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/pomerium.pomerium/pkg/storage/postgres/migrate.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

        163┆ err = tx.QueryRow(ctx, `
        164┆ 		SELECT server_version, migration_version
        165┆ 		  FROM `+schemaName+`.migration_info
        166┆ 	`).Scan(&serverVersion, &migrationVersion)


  /home/rtz/github_vuln_research/my_semgrep_rules/Go_all/repos_dir/pomerium.pomerium/pkg/storage/postgres/postgres.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.string-formatted-query
        String-formatted SQL query detected. This could lead to SQL injection if the string is not
        sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.

         88┆ err = q.QueryRow(ctx, `
         89┆ 	SELECT version
         90┆ 	FROM `+schemaName+`.`+recordChangesTableName+`
         91┆ 	ORDER BY version DESC
         92┆ 	LIMIT 1
         93┆ `).Scan(&recordVersion)
