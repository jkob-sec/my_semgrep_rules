
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/PHP_all/kimai.kimai/src/Controller/DoctorController.php 
     php_semgrep_rules.phpinfo-use
        The 'phpinfo' function may reveal sensitive information about your environment.

        286┆ phpinfo(1);


  /home/rtz/github_vuln_research/my_semgrep_rules/PHP_all/kimai.kimai/src/Repository/ActivityRepository.php 
     php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        296┆ $qb->addOrderBy($orderBy, $order);


  /home/rtz/github_vuln_research/my_semgrep_rules/PHP_all/kimai.kimai/src/Repository/CustomerRepository.php 
     php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        209┆ $qb->addOrderBy($orderBy, $order);


  /home/rtz/github_vuln_research/my_semgrep_rules/PHP_all/kimai.kimai/src/Repository/InvoiceRepository.php 
     php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        222┆ $qb->addOrderBy($orderBy, $query->getOrder());


  /home/rtz/github_vuln_research/my_semgrep_rules/PHP_all/kimai.kimai/src/Repository/ProjectRepository.php 
     php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        251┆ $qb->addOrderBy($orderBy, $order);


  /home/rtz/github_vuln_research/my_semgrep_rules/PHP_all/kimai.kimai/src/Repository/TeamRepository.php 
     php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        191┆ $qb->addOrderBy($orderBy, $query->getOrder());


  /home/rtz/github_vuln_research/my_semgrep_rules/PHP_all/kimai.kimai/src/Repository/TimesheetRepository.php 
     php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        522┆ $qb->addOrderBy($orderBy, $query->getOrder());


  /home/rtz/github_vuln_research/my_semgrep_rules/PHP_all/kimai.kimai/src/Repository/UserRepository.php 
     php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        317┆ $qb->addOrderBy($orderBy, $order);
