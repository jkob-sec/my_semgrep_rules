
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/csharp_all/Squidex.squidex/backend/src/Squidex/Areas/Api/Controllers/Contents/ContentOpenApiController.cs 
     csharp_semgrep_rules.mass-assignment
        Mass assignment or Autobinding vulnerability in code allows an attacker to execute over-
        posting attacks, which could create a new parameter in the binding request and manipulate
        the underlying object in the application.

         41┆ return View(nameof(Docs), vm);
          ⋮┆----------------------------------------
         55┆ return View(nameof(Docs), vm);


  /home/rtz/github_vuln_research/my_semgrep_rules/csharp_all/Squidex.squidex/backend/src/Squidex/Areas/IdentityServer/Controllers/Account/AccountController.cs 
     csharp_semgrep_rules.mass-assignment
        Mass assignment or Autobinding vulnerability in code allows an attacker to execute over-
        posting attacks, which could create a new parameter in the binding request and manipulate
        the underlying object in the application.

         75┆ return View(new ConsentVM { PrivacyUrl = identityOptions.PrivacyUrl, ReturnUrl = returnUrl });

Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/csharp_all/Squidex.squidex/backend/src/Squidex/Areas/Api/Controllers/Contents/ContentOpenApiController.cs 
     csharp_semgrep_rules.mass-assignment
        Mass assignment or Autobinding vulnerability in code allows an attacker to execute over-
        posting attacks, which could create a new parameter in the binding request and manipulate
        the underlying object in the application.

         41┆ return View(nameof(Docs), vm);
          ⋮┆----------------------------------------
         55┆ return View(nameof(Docs), vm);


  /home/rtz/github_vuln_research/my_semgrep_rules/csharp_all/Squidex.squidex/backend/src/Squidex/Areas/IdentityServer/Controllers/Account/AccountController.cs 
     csharp_semgrep_rules.mass-assignment
        Mass assignment or Autobinding vulnerability in code allows an attacker to execute over-
        posting attacks, which could create a new parameter in the binding request and manipulate
        the underlying object in the application.

         75┆ return View(new ConsentVM { PrivacyUrl = identityOptions.PrivacyUrl, ReturnUrl = returnUrl });
