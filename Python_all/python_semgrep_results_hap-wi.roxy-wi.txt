
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/Python_all/hap-wi.roxy-wi/app/modules/db/sql.py 
     home.rtz.github_vuln_research.my_semgrep_rules.python_semgrep_rules.sqlalchemy-execute-raw-query
        Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can
        result in SQL Injection. In order to execute raw query safely, prepared statement should be
        used. SQLAlchemy provides TextualSQL to easily used prepared statement with named
        parameters. For complex SQL composition, use SQL Expression Language or Schema Definition
        Language. In most cases, SQLAlchemy ORM will be a better option.

       2449┆ sql = """select id, ip, port, en, http, body, telegram_channel_id, `desc`, `group`, user_group, slack_channel_id
       2450┆ from `smon` where id = {} """.format(last_id)
       2451┆ 
       2452┆ try:
       2453┆ 	cursor.execute(sql)
       2454┆ except Exception as e:
       2455┆ 	out_error(e)
       2456┆ else:
       2457┆ 	return cursor.fetchall()
          ⋮┆----------------------------------------
       2800┆ sql = """select port from port_scanner_ports where serv = '%s' """ % serv
       2801┆ 
       2802┆ try:
       2803┆ 	cursor.execute(sql)
       2804┆ except Exception as e:
       2805┆ 	out_error(e)
       2806┆ else:
       2807┆ 	return cursor.fetchall()
