
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/api/src/main/java/org/openmrs/migration/MigrationHelper.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.documentbuilderfactory-disallow-
     doctype-decl-missing
        DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML
        external entity attacks. Disable this by setting the feature
        "http://apache.org/xml/features/disallow-doctype-decl" to true. Alternatively, allow DOCTYPE
        declarations and only prohibit external entities declarations. This can be done by setting
        the features "http://xml.org/sax/features/external-general-entities" and
        "http://xml.org/sax/features/external-parameter-entities" to false.

         ▶▶┆ Autofix ▶ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
factory.newDocumentBuilder();
         98┆ DocumentBuilder builder = factory.newDocumentBuilder();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/api/src/main/java/org/openmrs/module/ModuleFileParser.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.documentbuilderfactory-disallow-
     doctype-decl-missing
        DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML
        external entity attacks. Disable this by setting the feature
        "http://apache.org/xml/features/disallow-doctype-decl" to true. Alternatively, allow DOCTYPE
        declarations and only prohibit external entities declarations. This can be done by setting
        the features "http://xml.org/sax/features/external-general-entities" and
        "http://xml.org/sax/features/external-parameter-entities" to false.

         ▶▶┆ Autofix ▶ dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
dbf.newDocumentBuilder();
        283┆ DocumentBuilder db = dbf.newDocumentBuilder();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/api/src/main/java/org/openmrs/module/SqlDiffFileParser.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.documentbuilderfactory-disallow-
     doctype-decl-missing
        DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML
        external entity attacks. Disable this by setting the feature
        "http://apache.org/xml/features/disallow-doctype-decl" to true. Alternatively, allow DOCTYPE
        declarations and only prohibit external entities declarations. This can be done by setting
        the features "http://xml.org/sax/features/external-general-entities" and
        "http://xml.org/sax/features/external-parameter-entities" to false.

         ▶▶┆ Autofix ▶ dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
dbf.newDocumentBuilder();
         94┆ DocumentBuilder db = dbf.newDocumentBuilder();
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.owasp.java.xxe.javax.xml.parsers.Docume
     ntBuilderFactory
        DocumentBuilderFactory being instantiated without calling the setFeature functions that are
        generally used for disabling entity processing

         93┆ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
         94┆ DocumentBuilder db = dbf.newDocumentBuilder();
         95┆ 
         96┆ // When asked to resolve external entities (such as a DTD) we return an InputSource
         97┆ // with no data at the end, causing the parser to ignore the DTD.
         98┆ db.setEntityResolver((publicId, systemId) -> new InputSource(new StringReader("")));
         99┆ diffDoc = db.parse(diffStream);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/api/src/main/java/org/openmrs/module/UpdateFileParser.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.documentbuilderfactory-disallow-
     doctype-decl-missing
        DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML
        external entity attacks. Disable this by setting the feature
        "http://apache.org/xml/features/disallow-doctype-decl" to true. Alternatively, allow DOCTYPE
        declarations and only prohibit external entities declarations. This can be done by setting
        the features "http://xml.org/sax/features/external-general-entities" and
        "http://xml.org/sax/features/external-parameter-entities" to false.

         ▶▶┆ Autofix ▶ dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
dbf.newDocumentBuilder();
         72┆ DocumentBuilder db = dbf.newDocumentBuilder();
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.owasp.java.xxe.javax.xml.parsers.Docume
     ntBuilderFactory
        DocumentBuilderFactory being instantiated without calling the setFeature functions that are
        generally used for disabling entity processing

         71┆ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
         72┆ DocumentBuilder db = dbf.newDocumentBuilder();
         73┆ 
         74┆ // Disable resolution of external entities. See TRUNK-3942
         75┆ db.setEntityResolver((publicId, systemId) -> new InputSource(new StringReader("")));
         76┆ 
         77┆ updateDoc = db.parse(inputSource);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/api/src/main/java/org/openmrs/util/databasechange/AddConceptMapTypesChangeset.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

        204┆ ResultSet rs = stmt.executeQuery(sql);
          ⋮┆----------------------------------------
        204┆ ResultSet rs = stmt.executeQuery(sql);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/api/src/main/java/org/openmrs/util/databasechange/BooleanConceptChangeSet.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

        289┆ ResultSet rs = stmt.executeQuery(sql);
          ⋮┆----------------------------------------
        289┆ ResultSet rs = stmt.executeQuery(sql);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/api/src/main/java/org/openmrs/util/databasechange/ConceptValidatorChangeSet.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

        747┆ ResultSet rs = stmt.executeQuery(sql);
          ⋮┆----------------------------------------
        507┆ ResultSet rsDefaultLocale = stmt.executeQuery("SELECT property_value FROM global_property WHERE property = '"
        508┆         + OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE + "'");
          ⋮┆----------------------------------------
        526┆ ResultSet rsAllowedLocales = stmt.executeQuery("SELECT property_value FROM global_property WHERE property = '"
        527┆         + OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST + "'");
          ⋮┆----------------------------------------
        747┆ ResultSet rs = stmt.executeQuery(sql);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/api/src/main/java/org/openmrs/util/databasechange/ConvertOrderersToProviders.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.jdbc-sqli
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

         87┆ statement.execute("UPDATE orders SET orderer = " + "(SELECT provider_id FROM provider WHERE uuid ="
         88┆         + "(SELECT property_value FROM global_property WHERE property = '" + ""
         89┆         + OpenmrsConstants.GP_UNKNOWN_PROVIDER_UUID + "')) " + "WHERE orderer IS NULL");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/api/src/main/java/org/openmrs/util/databasechange/GenerateUuid.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.jdbc-sqli
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

        113┆ statement.execute(rawSql);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/liquibase/src/main/java/org/openmrs/liquibase/AbstractSnapshotTuner.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.owasp.java.xxe.org.dom4j.io.SAXReader
        SAXReader being instantiated without calling the setFeature functions that are generally
        used for disabling entity processing

        141┆ SAXReader reader = new SAXReader();
          ⋮┆----------------------------------------
        141┆ SAXReader reader = new SAXReader();
        142┆ Document document;
        143┆ try {
        144┆ 	document = reader.read(file);
        145┆ }
        146┆ catch (DocumentException e) {
        147┆ 	log.error("processing the file '{}' raised an exception", path, e);
        148┆ 	throw e;
        149┆ }
          ⋮┆----------------------------------------
        156┆ SAXReader reader = new SAXReader();
          ⋮┆----------------------------------------
        156┆ SAXReader reader = new SAXReader();
        157┆ try {
        158┆ 	document = reader.read(is);
        159┆ }
        160┆ catch (DocumentException e) {
        161┆ 	log.error("processing the resource '{}' raised an exception", resourceName, e);
        162┆ 	throw e;
        163┆ }


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/web/src/main/java/org/openmrs/module/web/ModuleResourcesServlet.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

         42┆ File f = getFile(req);
          ⋮┆----------------------------------------
         56┆ File f = getFile(request);
          ⋮┆----------------------------------------
         67┆ FileInputStream is = new FileInputStream(f);
          ⋮┆----------------------------------------
         97┆ File devDir = ModuleUtil.getDevelopmentDirectory(module.getModuleId());
          ⋮┆----------------------------------------
        104┆ File f = new File(realPath);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/web/src/main/java/org/openmrs/module/web/WebModuleUtil.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.documentbuilderfactory-disallow-
     doctype-decl-missing
        DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML
        external entity attacks. Disable this by setting the feature
        "http://apache.org/xml/features/disallow-doctype-decl" to true. Alternatively, allow DOCTYPE
        declarations and only prohibit external entities declarations. This can be done by setting
        the features "http://xml.org/sax/features/external-general-entities" and
        "http://xml.org/sax/features/external-parameter-entities" to false.

         ▶▶┆ Autofix ▶ dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
dbf.newDocumentBuilder();
        739┆ DocumentBuilder db = dbf.newDocumentBuilder();
          ⋮┆----------------------------------------
         ▶▶┆ Autofix ▶ docFactory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
docFactory.newDocumentBuilder();
       1010┆ DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.owasp.java.xxe.javax.xml.parsers.Docume
     ntBuilderFactory
        DocumentBuilderFactory being instantiated without calling the setFeature functions that are
        generally used for disabling entity processing

        738┆ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        739┆ DocumentBuilder db = dbf.newDocumentBuilder();
        740┆ 
        741┆ // When asked to resolve external entities (such as a DTD) we return an InputSource
        742┆ // with no data at the end, causing the parser to ignore the DTD.
        743┆ db.setEntityResolver((publicId, systemId) -> new InputSource(new StringReader("")));
        744┆ dwrmodulexml = db.parse(inputStream);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/web/src/main/java/org/openmrs/web/Listener.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.documentbuilderfactory-disallow-
     doctype-decl-missing
        DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML
        external entity attacks. Disable this by setting the feature
        "http://apache.org/xml/features/disallow-doctype-decl" to true. Alternatively, allow DOCTYPE
        declarations and only prohibit external entities declarations. This can be done by setting
        the features "http://xml.org/sax/features/external-general-entities" and
        "http://xml.org/sax/features/external-parameter-entities" to false.

         ▶▶┆ Autofix ▶ dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
dbf.newDocumentBuilder();
        419┆ DocumentBuilder db = dbf.newDocumentBuilder();
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.owasp.java.xxe.javax.xml.parsers.Docume
     ntBuilderFactory
        DocumentBuilderFactory being instantiated without calling the setFeature functions that are
        generally used for disabling entity processing

        418┆ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        419┆ DocumentBuilder db = dbf.newDocumentBuilder();
        420┆ // When asked to resolve external entities (such as a DTD) we return an InputSource
        421┆ // with no data at the end, causing the parser to ignore the DTD.
        422┆ db.setEntityResolver((publicId, systemId) -> new InputSource(new StringReader("")));
        423┆ Document doc = db.parse(dwrFile);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/web/src/main/java/org/openmrs/web/filter/StartupFilter.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

        135┆ try (InputStream imageFileInputStream = new FileInputStream(fullFilePath.normalize().toFile())) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/openmrs.openmrs-core/web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

       1173┆ return statement.executeUpdate(replacedSql);
