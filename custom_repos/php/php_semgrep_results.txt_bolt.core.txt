
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/bolt.core/src/Command/ExtensionsConfigureCommand.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         82┆ unlink($services);
          ⋮┆----------------------------------------
         87┆ unlink($routes);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/bolt.core/src/Entity/User.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        271┆ $this->__unserialize(unserialize($serialized, ['allowed_classes' => false]));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/bolt.core/src/Twig/HtmlExtension.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         92┆ header("Location: ${path}");
