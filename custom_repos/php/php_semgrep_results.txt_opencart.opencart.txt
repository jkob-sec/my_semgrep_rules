
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/admin/controller/catalog/download.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        484┆ header('Content-Disposition: attachment; filename="' . $filename . '"');
          ⋮┆----------------------------------------
        489┆ header('Content-Length: ' . filesize($file));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/admin/controller/common/developer.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         53┆ unlink($file);
          ⋮┆----------------------------------------
         84┆ unlink($file);
          ⋮┆----------------------------------------
         93┆ unlink($file);
          ⋮┆----------------------------------------
        103┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/admin/controller/common/filemanager.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        435┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/admin/controller/common/security.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         96┆ unlink($file);
          ⋮┆----------------------------------------
        213┆ unlink($file);
          ⋮┆----------------------------------------
        423┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/admin/controller/marketplace/installer.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        206┆ unlink($this->request->files['file']['tmp_name']);
          ⋮┆----------------------------------------
        471┆ unlink($file);
          ⋮┆----------------------------------------
        503┆ unlink($path);
          ⋮┆----------------------------------------
        675┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/admin/controller/startup/error.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         46┆ header('Location: ' . $this->config->get('error_page'));
          ⋮┆----------------------------------------
         65┆ header('Location: ' . $this->config->get('error_page'));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/admin/controller/tool/backup.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        375┆ header('Content-Disposition: attachment; filename="' . $filename . '"');
          ⋮┆----------------------------------------
        379┆ header('Content-Length: ' . filesize($file));
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        416┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/admin/controller/tool/upgrade.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        188┆ unlink(DIR_OPENCART . $destination);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/admin/controller/tool/upload.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        274┆ header('Content-Disposition: attachment; filename="' . ($mask ? $mask : basename($file)) . '"');
          ⋮┆----------------------------------------
        279┆ header('Content-Length: ' . filesize($file));
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        240┆ unlink(DIR_UPLOAD . $upload_info['filename']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/catalog/controller/account/download.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        126┆ header('Content-Disposition: attachment; filename="' . ($mask ? $mask : basename($file)) . '"');
          ⋮┆----------------------------------------
        130┆ header('Content-Length: ' . filesize($file));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/catalog/controller/startup/error.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         42┆ header('Location: ' . $this->config->get('error_page'));
          ⋮┆----------------------------------------
         57┆ header('Location: ' . $this->config->get('error_page'));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/cron.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         77┆ header('Location: ' . $config->get('error_page'));
          ⋮┆----------------------------------------
         93┆ header('Location: ' . $config->get('error_page'));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/install/controller/upgrade/upgrade_1.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        224┆ unlink($delete);
          ⋮┆----------------------------------------
        372┆ unlink($file);
          ⋮┆----------------------------------------
        417┆ @unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/install/controller/upgrade/upgrade_2.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         99┆ unlink($base . $destination);
          ⋮┆----------------------------------------
        135┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/install/controller/upgrade/upgrade_4.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         26┆  ... unserialize($result['value']))) . "' WHERE `setting_id` = '" . (int)$result['setting_id'] . "'"); ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/install/controller/upgrade/upgrade_6.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         16┆  ... unserialize($result['custom_field']))) . "' WHERE `customer_id` = '" . (int)$result['customer_id'] . "'"); ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         25┆  ... unserialize($result['data']))) . "' WHERE `customer_activity_id` = '" . (int)$result['customer_activity_id'] . "'"); ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         34┆  ... unserialize($result['custom_field']))) . "' WHERE `address_id` = '" . (int)$result['address_id'] . "'"); ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         43┆  ... unserialize($result['setting']))) . "' WHERE `module_id` = '" . (int)$result['module_id'] . "'"); ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         52┆  ... unserialize($result['custom_field']))) . "' WHERE `order_id` = '" . (int)$result['order_id'] . "'"); ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         56┆  ... unserialize($result['payment_custom_field']))) . "' WHERE `order_id` = '" . (int)$result['order_id'] . "'"); ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         60┆  ... unserialize($result['shipping_custom_field']))) . "' WHERE `order_id` = '" . (int)$result['order_id'] . "'"); ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         69┆  ... unserialize($result['permission']))) . "' WHERE `user_group_id` = '" . (int)$result['user_group_id'] . "'"); ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/system/framework.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         65┆ header('Location: ' . $config->get('error_page'));
          ⋮┆----------------------------------------
         81┆ header('Location: ' . $config->get('error_page'));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/system/library/cache/file.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         62┆ if (!@unlink($file)) {
          ⋮┆----------------------------------------
         80┆ if (!@unlink($file)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/system/library/cart/customer.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.md5-loose-equality
        Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type
        juggling issues

         64┆ } elseif ($customer_query->row['password'] == md5($password)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/system/library/cart/user.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.md5-loose-equality
        Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type
        juggling issues

         65┆ } elseif ($user_query->row['password'] == md5($password)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/system/library/response.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         50┆ header('Location: ' . str_replace(['&amp;', "\n", "\r"], ['&', '', ''], $url), true, $status);
          ⋮┆----------------------------------------
        130┆ header($header, true);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/opencart.opencart/upload/system/library/session/file.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         56┆ unlink($file);
          ⋮┆----------------------------------------
         73┆ unlink($file);
