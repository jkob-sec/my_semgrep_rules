
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/AssetBundle/Entity/AssetRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'assets')             ->set('download_count',
        'download_count + '.(int) $increaseBy)` Detected string concatenation with a non-literal
        variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable
        is user-controlled and not properly sanitized. In order to prevent SQL injection, used
        parameterized queries or prepared statements instead.

        193┆ ->where('id = '.(int) $id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/AssetBundle/Entity/DownloadRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->select('u.is_unique')` Detected string concatenation with a non-literal variable in a
        Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-
        controlled and not properly sanitized. In order to prevent SQL injection, used parameterized
        queries or prepared statements instead.

         41┆ ->from(sprintf('(SELECT (NOT EXISTS (%s)) is_unique)', $q2->getSQL()), 'u'
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'asset_downloads')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        260┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/CampaignBundle/Entity/CampaignRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'campaign_events')             ->set('parent_id', ':null')
        ->setParameter('null', null)` Detected string concatenation with a non-literal variable in a
        Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-
        controlled and not properly sanitized. In order to prevent SQL injection, used parameterized
        queries or prepared statements instead.

         52┆ ->where('campaign_id = '.$entity->getId())
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->delete(MAUTIC_TABLE_PREFIX.'campaign_events')` Detected string concatenation with a
        non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if
        the variable is user-controlled and not properly sanitized. In order to prevent SQL
        injection, used parameterized queries or prepared statements instead.

         58┆ ->where('campaign_id = '.$entity->getId())
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        368┆ sprintf('NOT EXISTS (%s)', $sq->getSQL())
          ⋮┆----------------------------------------
        418┆ sprintf('NOT EXISTS (%s)', $sq->getSQL())
          ⋮┆----------------------------------------
        494┆ sprintf('NOT EXISTS (%s)', $sq->getSQL())
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->from(MAUTIC_TABLE_PREFIX.'campaigns', 'c')             ->leftJoin('c',
        MAUTIC_TABLE_PREFIX.'campaign_leads', 'cl', 'cl.campaign_id = c.id AND cl.manually_removed =
        0')` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        579┆ '(SELECT lll.lead_id AS ll, lll.lead_id FROM '.MAUTIC_TABLE_PREFIX.'lead_lists_leads lll WHERE lll.leadlist_id = '.$segmentId
        580┆ .' AND lll.manually_removed = 0)',


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/CampaignBundle/Entity/LeadEventLogRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-dbal-dangerous-query
        Detected string concatenation with a non-literal variable in a Doctrine DBAL query method.
        This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        610┆ $stmt       = $connection->prepare($sql);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$expr` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        274┆ sprintf('NOT EXISTS (%s)', $failedSq->getSQL())
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'campaign_lead_event_log')             ->set('lead_id',
        (int) $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        343┆ ->where('lead_id = '.(int) $fromLeadId);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$this->_em->getConnection()->createQueryBuilder()
        ->delete(MAUTIC_TABLE_PREFIX.'campaign_lead_event_log')` Detected string concatenation with
        a non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection
        if the variable is user-controlled and not properly sanitized. In order to prevent SQL
        injection, used parameterized queries or prepared statements instead.

        353┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/CampaignBundle/Entity/LeadRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

         88┆ $q->andWhere('l.id NOT IN('.$dq->getDQL().')')
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'campaign_leads')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        118┆ ->where('lead_id = '.(int) $fromLeadId);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$this->getEntityManager()->getConnection()->createQueryBuilder()
        ->delete(MAUTIC_TABLE_PREFIX.'campaign_leads')` Detected string concatenation with a non-
        literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the
        variable is user-controlled and not properly sanitized. In order to prevent SQL injection,
        used parameterized queries or prepared statements instead.

        128┆ ->where('lead_id = '.(int) $fromLeadId)
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        209┆ sprintf('NOT EXISTS (%s)', $eventQb->getSQL())
          ⋮┆----------------------------------------
        225┆ sprintf('EXISTS (%s)', $grandparentQb->getSQL())
          ⋮┆----------------------------------------
        239┆ sprintf('NOT EXISTS (%s)', $anyEventQb->getSQL())
          ⋮┆----------------------------------------
        302┆ sprintf('NOT EXISTS (%s)', $eventQb->getSQL())


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/CampaignBundle/Tests/Functional/Entity/LeadEventLogRepositoryTest.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-dbal-dangerous-query
        Detected string concatenation with a non-literal variable in a Doctrine DBAL query method.
        This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

         21┆  ... $connection->prepare('INSERT INTO `'.MAUTIC_TABLE_PREFIX.'campaign_lead_event_log` (`event_id`, `lead_id`, `rotation`, `is_scheduled`, `system_triggered`) VALUE ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/ConfigBundle/Controller/SysinfoController.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.assert-use-audit
        Calling assert with user input is equivalent to eval'ing.

         22┆ assert($model instanceof SysinfoModel);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/ConfigBundle/Model/SysinfoModel.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.phpinfo-use
        The 'phpinfo' function may reveal sensitive information about your environment.

         62┆ phpinfo(INFO_GENERAL | INFO_CONFIGURATION | INFO_MODULES);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/CoreBundle/Command/MaxMindDoNotSellPurgeCommand.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-dbal-dangerous-query
        Detected string concatenation with a non-literal variable in a Doctrine DBAL query method.
        This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        131┆ $stmt = $conn->prepare($sql);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/CoreBundle/Entity/AuditLogRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb             ->select('ip.date_added, ip.ip_address, ip.lead_id, ip.id')` Detected
        string concatenation with a non-literal variable in a Doctrine QueryBuilder method. This
        could lead to SQL injection if the variable is user-controlled and not properly sanitized.
        In order to prevent SQL injection, used parameterized queries or prepared statements
        instead.

        235┆ ->from(sprintf('(%s)', $sqb->getSQL()), 'ip');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/CoreBundle/Entity/NotificationRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb->update(MAUTIC_TABLE_PREFIX.'notifications')                 ->set('is_read', 1)`
        Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method.
        This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

         71┆ ->where('user_id = '.(int) $userId.' AND is_read = 0')


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/CoreBundle/Helper/Chart/ChartQuery.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$uniqueQuery` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        461┆ $uniqueQuery->select('COUNT('.$tablePrefix.'.'.$uniqueColumn.') AS count')
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$uniqueQuery->select('COUNT('.$tablePrefix.'.'.$uniqueColumn.') AS count')` Detected string
        concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead
        to SQL injection if the variable is user-controlled and not properly sanitized. In order to
        prevent SQL injection, used parameterized queries or prepared statements instead.

        462┆ ->from('('.$query->getSql().')', $tablePrefix);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/CoreBundle/Helper/Serializer.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         26┆ return unserialize($serializedString);
          ⋮┆----------------------------------------
         29┆ return unserialize($serializedString, $options);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/CoreBundle/Tests/Functional/Doctrine/Paginator/SimplePaginatorTest.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.assert-use-audit
        Calling assert with user input is equivalent to eval'ing.

         29┆ assert($logger instanceof DebugStack);
          ⋮┆----------------------------------------
         48┆ assert($repository instanceof IpAddressRepository);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/DynamicContentBundle/Entity/DynamicContentRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'dynamic_content')             ->set('sent_count',
        'sent_count + '.(int) $increaseBy)` Detected string concatenation with a non-literal
        variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable
        is user-controlled and not properly sanitized. In order to prevent SQL injection, used
        parameterized queries or prepared statements instead.

        133┆ ->where('id = '.(int) $id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/DynamicContentBundle/Entity/StatRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$query` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        131┆ $query->expr()->like('dc.name', $query->expr()->literal('%'.$options['search'].'%'))
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'dynamic_content_stats')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        149┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/EmailBundle/Command/ProcessEmailQueueCommand.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        117┆ $message = unserialize(file_get_contents($tmpFilename));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/EmailBundle/Entity/EmailRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$this->getEntityManager()->getConnection()->createQueryBuilder()
        ->select('el.leadlist_id')                 ->from(MAUTIC_TABLE_PREFIX.'email_list_xref',
        'el')` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        206┆ ->where('el.email_id = '.(int) $emailId)
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$segmentQb->select('ll.lead_id')             ->from(MAUTIC_TABLE_PREFIX.'lead_lists_leads',
        'll')` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        225┆ $segmentQb->expr()->andX(
        226┆     $segmentQb->expr()->in('ll.leadlist_id', $listIds),
        227┆     $segmentQb->expr()->eq('ll.manually_removed', ':false')
        228┆ )
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->from(MAUTIC_TABLE_PREFIX.'leads', 'l')` Detected string concatenation with a non-
        literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the
        variable is user-controlled and not properly sanitized. In order to prevent SQL injection,
        used parameterized queries or prepared statements instead.

        248┆ ->andWhere(sprintf('l.id IN (%s)', $segmentQb->getSQL()))
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->from(MAUTIC_TABLE_PREFIX.'leads', 'l')             ->andWhere(sprintf('l.id IN (%s)',
        $segmentQb->getSQL()))` Detected string concatenation with a non-literal variable in a
        Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-
        controlled and not properly sanitized. In order to prevent SQL injection, used parameterized
        queries or prepared statements instead.

        249┆ ->andWhere(sprintf('l.id NOT IN (%s)', $dncQb->getSQL()))
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->from(MAUTIC_TABLE_PREFIX.'leads', 'l')             ->andWhere(sprintf('l.id IN (%s)',
        $segmentQb->getSQL()))             ->andWhere(sprintf('l.id NOT IN (%s)',
        $dncQb->getSQL()))` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        250┆ ->andWhere(sprintf('l.id NOT IN (%s)', $statQb->getSQL()))
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->from(MAUTIC_TABLE_PREFIX.'leads', 'l')             ->andWhere(sprintf('l.id IN (%s)',
        $segmentQb->getSQL()))             ->andWhere(sprintf('l.id NOT IN (%s)', $dncQb->getSQL()))
        ->andWhere(sprintf('l.id NOT IN (%s)', $statQb->getSQL()))` Detected string concatenation
        with a non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL
        injection if the variable is user-controlled and not properly sanitized. In order to prevent
        SQL injection, used parameterized queries or prepared statements instead.

        251┆ ->andWhere(sprintf('l.id NOT IN (%s)', $mqQb->getSQL()))
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        256┆ $q->andWhere(sprintf('l.id NOT IN (%s)', $unsubscribeLeadsQb->getSQL()));
          ⋮┆----------------------------------------
        539┆ $q->where('id = '.(int) $id);
          ⋮┆----------------------------------------
        542┆ $q->set('variant_'.$type.'_count', 'variant_'.$type.'_count + '.(int) $increaseBy);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/EmailBundle/Entity/StatRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        151┆ $q->expr()->orX(
        152┆     $q->expr()->eq('s.list_id', ':segmentId'),
        153┆     $q->expr()->andX(
        154┆         $q->expr()->isNull('s.list_id'),
        155┆         sprintf('EXISTS (%s)', $sb->getSQL())
        156┆     )
        157┆ )
          ⋮┆----------------------------------------
        294┆ $q->andWhere(sprintf('EXISTS (%s)', $subQ->getSQL()));
          ⋮┆----------------------------------------
        410┆ $q->andWhere('s.list_id = '.(int) $listId);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$query` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        466┆ $query->expr()->orX(
        467┆     $query->expr()->like('ec.subject', $query->expr()->literal('%'.$options['search'].'%')),
        468┆     $query->expr()->like('e.subject', $query->expr()->literal('%'.$options['search'].'%')),
        469┆     $query->expr()->like('e.name', $query->expr()->literal('%'.$options['search'].'%'))
        470┆ )
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'email_stats')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        593┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/EmailBundle/EventListener/ReportSubscriber.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        356┆ $qb->leftJoin(self::EMAILS_PREFIX, sprintf('(%s)', $qbcut->getSQL()), self::CLICK_PREFIX, 'e.id = cut.channel_id');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/EmailBundle/Stats/Helper/FilterTrait.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

         34┆ sprintf('EXISTS (%s)', $sb->getSql())
          ⋮┆----------------------------------------
         83┆ sprintf('EXISTS (%s)', $sb->getSql())


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/FormBundle/Entity/FormRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$query` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        178┆ $query->andWhere('fs.lead_id = '.(int) $options['leadId']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/FormBundle/Entity/SubmissionRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$fq->select('f.id, f.label, f.alias, f.type')
        ->from(MAUTIC_TABLE_PREFIX.'form_fields', 'f')` Detected string concatenation with a non-
        literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the
        variable is user-controlled and not properly sanitized. In order to prevent SQL injection,
        used parameterized queries or prepared statements instead.

         58┆ ->where('f.form_id = '.$form->getId())
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$dq->select('count(r.submission_id) as count')
        ->from($this->getResultsTableName($form->getId(), $form->getAlias()), 'r')
        ->innerJoin('r', MAUTIC_TABLE_PREFIX.'form_submissions', 's', 'r.submission_id = s.id')
        ->leftJoin('s', MAUTIC_TABLE_PREFIX.'ip_addresses', 'i', 's.ip_id = i.id')` Detected string
        concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead
        to SQL injection if the variable is user-controlled and not properly sanitized. In order to
        prevent SQL injection, used parameterized queries or prepared statements instead.

         79┆ ->where('r.form_id = '.$form->getId());
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$dq` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

         93┆ $dq->select('r.submission_id, s.date_submitted as dateSubmitted, s.lead_id as leadId, s.referer, i.ip_address as ipAddress'.$fieldAliasSql);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        139┆ $q->select('s, p, i,'.$leadSelect.','.$order)
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$query` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        286┆ $query->andWhere('fs.lead_id = '.(int) $options['leadId']);
          ⋮┆----------------------------------------
        296┆ $query->expr()->like('f.name', $query->expr()->literal('%'.$options['search'].'%'))
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'form_submissions')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        421┆ ->where('lead_id = '.(int) $fromLeadId)
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        503┆ $q->andWhere($q->expr()->$operatorExpr('r.'.$field, $value));
          ⋮┆----------------------------------------
        506┆ $q->andWhere($q->expr()->$operatorExpr('r.'.$field, ':value'))


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/IntegrationsBundle/Entity/ObjectMappingRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-dbal-dangerous-query
        Detected string concatenation with a non-literal variable in a Doctrine DBAL query method.
        This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        240┆ $result = $connection->executeQuery($qb->getSQL().$lock, $qb->getParameters(), $qb->getParameterTypes())->fetchAssociative();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/IntegrationsBundle/Migration/AbstractMigration.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-dbal-dangerous-query
        Detected string concatenation with a non-literal variable in a Doctrine DBAL query method.
        This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

         57┆ $stmt = $connection->prepare($sql);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Controller/Api/CustomFieldsApiControllerTrait.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         92┆ $properties = is_string($fieldDefinition['properties']) ? unserialize($fieldDefinition['properties']) : $fieldDefinition['properties'];


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Controller/FrequencyRuleTrait.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.assert-use-audit
        Calling assert with user input is equivalent to eval'ing.

         56┆ assert($emailModel instanceof EmailModel);
          ⋮┆----------------------------------------
        165┆ assert($dncModel instanceof \Mautic\LeadBundle\Model\DoNotContact);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Controller/LeadController.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.assert-use-audit
        Calling assert with user input is equivalent to eval'ing.

        157┆ assert($leadListModel instanceof ListModel);
          ⋮┆----------------------------------------
        181┆ assert($leadDNCModel instanceof \Mautic\LeadBundle\Model\DoNotContact);
          ⋮┆----------------------------------------
        350┆ assert($companyModel instanceof CompanyModel);
          ⋮┆----------------------------------------
        377┆ assert($model instanceof ListModel);
          ⋮┆----------------------------------------
        380┆ assert($leadNoteModel instanceof NoteModel);
          ⋮┆----------------------------------------
        446┆ assert($leadFieldModel instanceof FieldModel);
          ⋮┆----------------------------------------
        655┆ assert($leadFieldModel instanceof FieldModel);
          ⋮┆----------------------------------------
       1091┆ assert($model instanceof LeadModel);
          ⋮┆----------------------------------------
       1157┆ assert($model instanceof LeadModel);
          ⋮┆----------------------------------------
       1272┆ assert($companyModel instanceof CompanyModel);
          ⋮┆----------------------------------------
       1909┆ assert($userModel instanceof UserModel);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Entity/DoNotContactRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

         93┆ $q->innerJoin('dnc', sprintf('(%s)', $subQ->getSQL()), 'cs', 'cs.lead_id = dnc.lead_id');
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$query` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        134┆ $query->expr()->like('dnc.channel', $query->expr()->literal('%'.$options['search'].'%'))


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Entity/FrequencyRuleRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        153┆ '(ch.'.$statSentColumn.' >= case fr.frequency_time
        154┆      when \'MONTH\' then DATE_SUB(NOW(),INTERVAL 1 MONTH)
        155┆      when \'DAY\' then DATE_SUB(NOW(),INTERVAL 1 DAY)
        156┆      when \'WEEK\' then DATE_SUB(NOW(),INTERVAL 1 WEEK)
        157┆     end)'
          ⋮┆----------------------------------------
        207┆ $q->andWhere('ch.'.$statSentColumn.' >= :frequencyTime')
          ⋮┆----------------------------------------
        221┆ sprintf('NOT EXISTS (%s)', $subQuery->getSQL())


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Entity/LeadDeviceRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$sq` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

         59┆ $sq->expr()->eq('es.device', ':device'.$key)
          ⋮┆----------------------------------------
         71┆ $sq->expr()->eq('es.device_brand', ':deviceBrand'.$key)
          ⋮┆----------------------------------------
         83┆ $sq->expr()->eq('es.device_model', ':deviceModel'.$key)
          ⋮┆----------------------------------------
         95┆ $sq->expr()->eq('es.device_os_name', ':deviceOs'.$key)
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'lead_devices')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        181┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Entity/LeadEventLogRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'lead_event_log')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        139┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Entity/LeadListRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$subExpr` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        396┆ $subQb->expr()->in(sprintf('%s.%s', $alias, $column), ":$subFilterParamter")
          ⋮┆----------------------------------------
        404┆ $subQb->expr()->$subFunc(sprintf('%s.%s', $alias, $column), ":$subFilterParamter")


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Entity/LeadRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$fq->select('l.*')             ->from(MAUTIC_TABLE_PREFIX.'leads', 'l')` Detected string
        concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead
        to SQL injection if the variable is user-controlled and not properly sanitized. In order to
        prevent SQL injection, used parameterized queries or prepared statements instead.

        361┆ ->where('l.id = '.$id);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb->select('count(*)')` Detected string concatenation with a non-literal variable in a
        Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-
        controlled and not properly sanitized. In order to prevent SQL injection, used parameterized
        queries or prepared statements instead.

       1233┆ $qb->select('count(*)')->from(sprintf('(%s)', $sql), 'sub');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Entity/ListLeadRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'lead_lists_leads')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

         35┆ ->where('lead_id = '.(int) $fromLeadId);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$this->_em->getConnection()->createQueryBuilder()
        ->delete(MAUTIC_TABLE_PREFIX.'lead_lists_leads')` Detected string concatenation with a non-
        literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the
        variable is user-controlled and not properly sanitized. In order to prevent SQL injection,
        used parameterized queries or prepared statements instead.

         45┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Entity/PointsChangeLogRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'lead_points_change_log')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

         85┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Entity/StagesChangeLogRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'lead_stages_change_log')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

         52┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Entity/TagRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb->select('t.id')             ->from(MAUTIC_TABLE_PREFIX.'lead_tags', 't')` Detected
        string concatenation with a non-literal variable in a Doctrine QueryBuilder method. This
        could lead to SQL injection if the variable is user-controlled and not properly sanitized.
        In order to prevent SQL injection, used parameterized queries or prepared statements
        instead.

         26┆ ->having(sprintf('(%s)', $havingQb->getSQL()).' = 0');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/EventListener/ReportDevicesSubscriber.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        144┆ $clientInfo         = unserialize($row['client_info']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Model/ListModel.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        916┆ $q->andWhere('ll.id IN ('.$segmentlist.')');
          ⋮┆----------------------------------------
        919┆ $q->andWhere("l.date_added >= '".$dateFrom->format('Y-m-d')."'");
          ⋮┆----------------------------------------
        922┆ $q->andWhere("l.date_added <= '".$dateTo->format('Y-m-d')." 23:59:59'");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$qAll` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        941┆ $qAll->andWhere("t.date_added >= '".$dateFrom->format('Y-m-d')."'");
          ⋮┆----------------------------------------
        944┆ $qAll->andWhere("t.date_added <= '".$dateTo->format('Y-m-d')." 23:59:59'");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Segment/Query/ContactSegmentQueryBuilder.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        128┆ $qb->select('DISTINCT '.$primary.' as leadIdPrimary');
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$queryBuilder->select('count(leadIdPrimary) count, max(leadIdPrimary) maxId,
        min(leadIdPrimary) minId')` Detected string concatenation with a non-literal variable in a
        Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-
        controlled and not properly sanitized. In order to prevent SQL injection, used parameterized
        queries or prepared statements instead.

        134┆ ->from('('.$qb->getSQL().')', 'sss');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/LeadBundle/Segment/Query/QueryBuilder.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-dbal-dangerous-query
        Detected string concatenation with a non-literal variable in a Doctrine DBAL query method.
        This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        213┆ return $this->connection->executeQuery($this->getSQL(), $this->params, $this->paramTypes);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/NotificationBundle/Entity/NotificationRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'push_notifications')                 ->set($type.'_count',
        $type.'_count + '.(int) $increaseBy)` Detected string concatenation with a non-literal
        variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable
        is user-controlled and not properly sanitized. In order to prevent SQL injection, used
        parameterized queries or prepared statements instead.

        153┆ ->where('id = '.(int) $id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/NotificationBundle/Entity/StatRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

         94┆ $q->andWhere('s.list_id = '.(int) $listId);
          ⋮┆----------------------------------------
        128┆ $q->andWhere('s.list_id = '.(int) $listId);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'push_notification_stats')
        ->set('notification_id', (int) $toLeadId)` Detected string concatenation with a non-literal
        variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable
        is user-controlled and not properly sanitized. In order to prevent SQL injection, used
        parameterized queries or prepared statements instead.

        272┆ ->where('notification_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/NotificationBundle/EventListener/ReportSubscriber.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        216┆ $qb->leftJoin('pn', sprintf('(%s)', $qbcut->getSQL()), 'cut', 'pn.id = cut.channel_id');
          ⋮┆----------------------------------------
        239┆ $qb->leftJoin('pn', sprintf('(%s)', $qbcut->getSQL()), 'cut', 'pn.id = cut.channel_id AND pns.lead_id = cut.lead_id');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/PageBundle/Entity/HitRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->select('u.is_unique')` Detected string concatenation with a non-literal variable in a
        Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-
        controlled and not properly sanitized. In order to prevent SQL injection, used parameterized
        queries or prepared statements instead.

         61┆ ->from(sprintf('(SELECT (NOT EXISTS (%s)) is_unique)', $q2->getSQL()), 'u');
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$query` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

         82┆ $query->where('h.lead_id = '.(int) $leadId);
          ⋮┆----------------------------------------
         86┆ $query->andWhere($query->expr()->like('p.title', $query->expr()->literal('%'.$options['search'].'%')));
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$sq` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        256┆ $sq->andWhere($sq->expr()->like('h.url', ':url_'.$k))
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'page_hits')             ->set('date_left', ':datetime')`
        Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method.
        This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        484┆ ->where('id = '.(int) $lastHitId)
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'page_hits')             ->set('lead_id', (int) $toLeadId)`
        Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method.
        This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        573┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/PageBundle/Entity/PageRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'pages')             ->set('hits', 'hits + '.(int)
        $increaseBy)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        254┆ ->where('id = '.(int) $id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/PageBundle/Entity/RedirectRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'page_redirects')             ->set('hits', 'hits + '.(int)
        $increaseBy)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

         73┆ ->where('id = '.(int) $id);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        143┆ sprintf('EXISTS (%s)', $sb->getSQL())
          ⋮┆----------------------------------------
        162┆ sprintf('EXISTS (%s)', $sb->getSQL())


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/PageBundle/Entity/TrackableRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

         26┆ return $q->select('r.redirect_id, r.url, r.id, '.$tableAlias.'.hits, '.$tableAlias.'.unique_hits')
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$subQ->select('distinct(list.lead_id)')
        ->from(MAUTIC_TABLE_PREFIX.'lead_lists_leads', 'list')` Detected string concatenation with a
        non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if
        the variable is user-controlled and not properly sanitized. In order to prevent SQL
        injection, used parameterized queries or prepared statements instead.

        183┆ $q->expr()->in('list.leadlist_id', array_map('intval', $listId))
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        186┆ $q->innerJoin('ph', sprintf('(%s)', $subQ->getSQL()), 'cs', 'cs.lead_id = ph.lead_id');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/PageBundle/Entity/VideoHitRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$query` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

         36┆ $query->expr()->like('h.url', $query->expr()->literal('%'.$options['search'].'%'))
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'video_hits')             ->set('lead_id', (int) $toLeadId)`
        Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method.
        This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

        130┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/PointBundle/Entity/LeadPointLogRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'point_lead_action_log')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

         35┆ ->where('lead_id = '.(int) $fromLeadId);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$this->_em->getConnection()->createQueryBuilder()
        ->delete(MAUTIC_TABLE_PREFIX.'point_lead_action_log')` Detected string concatenation with a
        non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if
        the variable is user-controlled and not properly sanitized. In order to prevent SQL
        injection, used parameterized queries or prepared statements instead.

         45┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/PointBundle/Entity/LeadTriggerLogRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'point_lead_event_log')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

         35┆ ->where('lead_id = '.(int) $fromLeadId);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$this->_em->getConnection()->createQueryBuilder()
        ->delete(MAUTIC_TABLE_PREFIX.'point_lead_event_log')` Detected string concatenation with a
        non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if
        the variable is user-controlled and not properly sanitized. In order to prevent SQL
        injection, used parameterized queries or prepared statements instead.

         45┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/SmsBundle/Broadcast/BroadcastQuery.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$this->query` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        101┆ $this->query->andWhere(sprintf('NOT EXISTS (%s)', $statQb->getSQL()));
          ⋮┆----------------------------------------
        116┆ $this->query->andWhere(sprintf('NOT EXISTS (%s)', $dncQb->getSQL()));
          ⋮┆----------------------------------------
        132┆ $this->query->andWhere(sprintf('NOT EXISTS (%s)', $mqQb->getSQL()));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/SmsBundle/Entity/SmsRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'sms_messages')                 ->set($type.'_count',
        $type.'_count + '.(int) $increaseBy)` Detected string concatenation with a non-literal
        variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable
        is user-controlled and not properly sanitized. In order to prevent SQL injection, used
        parameterized queries or prepared statements instead.

        197┆ ->where('id = '.(int) $id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/SmsBundle/Entity/StatRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder
        method. This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

         95┆ $q->andWhere('s.list_id = '.(int) $listId);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$query` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        151┆ $query->expr()->orX(
        152┆     $query->expr()->like('e.name', $query->expr()->literal('%'.$options['search'].'%'))
        153┆ )
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'sms_message_stats')             ->set('sms_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        183┆ ->where('sms_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/StageBundle/Entity/LeadStageLogRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$q->update(MAUTIC_TABLE_PREFIX.'stage_lead_action_log')             ->set('lead_id', (int)
        $toLeadId)` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

         35┆ ->where('lead_id = '.(int) $fromLeadId);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$this->_em->getConnection()->createQueryBuilder()
        ->delete(MAUTIC_TABLE_PREFIX.'stage_lead_action_log')` Detected string concatenation with a
        non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if
        the variable is user-controlled and not properly sanitized. In order to prevent SQL
        injection, used parameterized queries or prepared statements instead.

         45┆ ->where('lead_id = '.(int) $fromLeadId)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/UserBundle/Entity/User.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        419┆ ) = unserialize($serialized);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/bundles/WebhookBundle/Entity/LogRepository.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-dbal-dangerous-query
        Detected string concatenation with a non-literal variable in a Doctrine DBAL query method.
        This could lead to SQL injection if the variable is user-controlled and not properly
        sanitized. In order to prevent SQL injection, used parameterized queries or prepared
        statements instead.

         96┆ while ($rows = $conn->executeQuery($sql, [$webHookId, $id], [ParameterType::INTEGER, ParameterType::INTEGER])->rowCount()) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb->select('count(id) as log_count')
        ->from(MAUTIC_TABLE_PREFIX.'webhook_logs', $this->getTableAlias())` Detected string
        concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead
        to SQL injection if the variable is user-controlled and not properly sanitized. In order to
        prevent SQL injection, used parameterized queries or prepared statements instead.

         56┆ ->where('webhook_id = '.$webhookId)
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb->select('id')                 ->from(MAUTIC_TABLE_PREFIX.'webhook_logs',
        $this->getTableAlias())` Detected string concatenation with a non-literal variable in a
        Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-
        controlled and not properly sanitized. In order to prevent SQL injection, used parameterized
        queries or prepared statements instead.

         64┆ ->where('webhook_id = '.$webhookId)
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$qb->delete(MAUTIC_TABLE_PREFIX.'webhook_logs')` Detected string concatenation with a non-
        literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the
        variable is user-controlled and not properly sanitized. In order to prevent SQL injection,
        used parameterized queries or prepared statements instead.

         71┆ ->where($qb->expr()->in('id', $id))
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$countAllQb` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        131┆ $countAllQb->select('COUNT('.$this->getTableAlias().'.id) AS thecount')
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$countAllQb->select('COUNT('.$this->getTableAlias().'.id) AS thecount')` Detected string
        concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead
        to SQL injection if the variable is user-controlled and not properly sanitized. In order to
        prevent SQL injection, used parameterized queries or prepared statements instead.

        132┆ ->from(sprintf('(%s)', $selectqb->getSQL()), $this->getTableAlias())
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$countSuccessQb` Detected string concatenation with a non-literal variable in a Doctrine
        QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and
        not properly sanitized. In order to prevent SQL injection, used parameterized queries or
        prepared statements instead.

        145┆ $countSuccessQb->select('COUNT('.$this->getTableAlias().'.id) AS thecount')
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.doctrine-orm-dangerous-query
        `$countSuccessQb->select('COUNT('.$this->getTableAlias().'.id) AS thecount')` Detected
        string concatenation with a non-literal variable in a Doctrine QueryBuilder method. This
        could lead to SQL injection if the variable is user-controlled and not properly sanitized.
        In order to prevent SQL injection, used parameterized queries or prepared statements
        instead.

        146┆ ->from(sprintf('(%s)', $selectqb->getSQL()), $this->getTableAlias())


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/mautic.mautic/app/migrations/Version20200422144300.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         81┆ $properties         = unserialize($rowToMigrate['properties']);
          ⋮┆----------------------------------------
        114┆ $properties   = unserialize($rowToMigrate['properties']);
