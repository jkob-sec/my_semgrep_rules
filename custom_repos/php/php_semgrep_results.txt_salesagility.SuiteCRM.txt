
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/Api/Core/app.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.php-permissive-cors
        Access-Control-Allow-Origin response header is set to "*". This will disable CORS Same
        Origin Policy restrictions.

          3┆ header("Access-Control-Allow-Origin: *");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/Api/V8/Service/UserPreferencesService.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         92┆ $preferences[$category] = unserialize(base64_decode($row['contents']));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/ModuleInstall/ExtensionManager.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        246┆ unlink("custom/$extPath/$targetFileName");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/ModuleInstall/ModuleInstaller.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        319┆ if (file_exists($backup_path)) {
          ⋮┆----------------------------------------
       2472┆ if (file_exists($backup_path)) {
          ⋮┆----------------------------------------
       2504┆ if (file_exists($backup_path)) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        343┆ unlink($to);
          ⋮┆----------------------------------------
       1174┆ unlink($filename);
          ⋮┆----------------------------------------
       1213┆ unlink($path);
          ⋮┆----------------------------------------
       1534┆ unlink("custom/Extension/application/Ext/TableDictionary/$fn");
          ⋮┆----------------------------------------
       1538┆ unlink("custom/metadata/{$rel_name}MetaData.php");
          ⋮┆----------------------------------------
       1620┆ unlink($pathname);
          ⋮┆----------------------------------------
       1626┆ unlink("custom/Extension/application/Ext/TableDictionary/{$this->id_name}.php");
          ⋮┆----------------------------------------
       1867┆ unlink("custom/$extpath/$name");
          ⋮┆----------------------------------------
       1898┆ unlink("custom/$extpath/$name");
          ⋮┆----------------------------------------
       2029┆ return(unlink($source));
          ⋮┆----------------------------------------
       2055┆ return(unlink($dest));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/ModuleInstall/PackageManager/PackageController.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        389┆ unlink($file);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        375┆ unlink($metafile);
          ⋮┆----------------------------------------
        389┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/ModuleInstall/PackageManager/PackageManager.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        592┆ @unlink($_FILES['upgrade_zip']['tmp_name']);
          ⋮┆----------------------------------------
        593┆ @unlink("upload://".$_FILES['upgrade_zip']['name']);
          ⋮┆----------------------------------------
        681┆ unlink(remove_file_extension($found->filename) . '-manifest.php');
          ⋮┆----------------------------------------
        682┆ unlink($found->filename);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        914┆ $serial_manifest = unserialize(base64_decode($installed->manifest));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/TreeData.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         98┆ require_once('modules/'.$modulename.'/TreeData.php');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/campaign_tracker.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         81┆ header("Location: $redirect_URL");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         74┆ $query = "SELECT refer_url FROM campaigns WHERE tracker_key='$track'";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/data/Relationships/RelationshipFactory.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         90┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/download.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        106┆ header('Location: ' . $focus->doc_url);
          ⋮┆----------------------------------------
        111┆ header('Location: ' . $focusRevision->doc_url);
          ⋮┆----------------------------------------
        156┆ header("Content-Length: " . filesize('include/SugarFields/Fields/Image/no_image.png'));
          ⋮┆----------------------------------------
        157┆ header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 2592000));
          ⋮┆----------------------------------------
        258┆ header("Content-Type: {$mime['mime']}");
          ⋮┆----------------------------------------
        263┆ header('Content-type: ' . $mime_type);
          ⋮┆----------------------------------------
        280┆ header('Content-Disposition: inline; filename="' . $name . '";');
          ⋮┆----------------------------------------
        282┆ header('Content-Disposition: attachment; filename="' . $name . '";');
          ⋮┆----------------------------------------
        288┆ header("Content-Length: " . filesize($local_location));
          ⋮┆----------------------------------------
        289┆ header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 2592000));
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         78┆ if (!file_exists('modules/' . $module . '/' . $bean_name . '.php')) {
          ⋮┆----------------------------------------
        151┆ if (!file_exists($local_location) || strpos($local_location, "..")) {
          ⋮┆----------------------------------------
        198┆ $mime_type = mime_content_type($local_location);
          ⋮┆----------------------------------------
        256┆ $mime = getimagesize($download_location);
          ⋮┆----------------------------------------
        288┆ header("Content-Length: " . filesize($local_location));
          ⋮┆----------------------------------------
        299┆ echo clean_file_output(file_get_contents($download_location), $mime_type);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        183┆ $query = "SELECT " . $db->quote($image_field) . " FROM " . $file_type . " ";
          ⋮┆----------------------------------------
        191┆ $query = "SELECT filename name FROM " . $file_type . " ";
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-url-host
        User data flows into the host portion of this manually-constructed URL. This could allow an
        attacker to send data to their own server, potentially exposing sensitive data such as
        cookies or authorization information sent with this request. They could also probe internal
        servers or other resources that the server runnig this code can access. (This is called
        server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an
        allowlist for approved hosts hardcode the correct host.

        140┆ $local_location = "upload://{$_REQUEST['id']}";
          ⋮┆----------------------------------------
        144┆ $local_location = "upload://{$_REQUEST['id']}";
          ⋮┆----------------------------------------
        230┆ $download_location = "upload://{$id}";
          ⋮┆----------------------------------------
        232┆ $download_location = "upload://{$_REQUEST['id']}";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/EditView/EditView2.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        645┆ require_once($this->fieldDefs[$name]['function']['include']);
          ⋮┆----------------------------------------
        653┆ require_once($this->fieldDefs[$name]['function']['include']);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        643┆ file_exists($this->fieldDefs[$name]['function']['include'])
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        338┆ $obj = new $bean();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/HTTP_WebDAV_Server/Server.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        112┆ header("X-Dav-Powered-By: PHP class: ".get_class($this));
          ⋮┆----------------------------------------
        114┆ header("X-Dav-Powered-By: ".$this->dav_powered_by);
          ⋮┆----------------------------------------
        125┆ header('WWW-Authenticate: Basic realm="'.($this->http_auth_realm).'"');
          ⋮┆----------------------------------------
        159┆ header("Allow: ".implode(", ", $this->_allow()));  // tell client what's allowed
          ⋮┆----------------------------------------
        442┆ header("DAV: "  .implode(",", $dav));
          ⋮┆----------------------------------------
        443┆ header("Allow: ".implode(", ", $allow));
          ⋮┆----------------------------------------
        825┆ header("Content-type: $options[mimetype]");
          ⋮┆----------------------------------------
        828┆ header("Last-modified: ".TimeDate::httpTime());
          ⋮┆----------------------------------------
        849┆ header("Content-length: $size");
          ⋮┆----------------------------------------
        850┆ header("Content-range: $range[start]-$range[end]/"
        851┆        . (isset($options['size']) ? $options['size'] : "*"));
          ⋮┆----------------------------------------
        860┆ header("Content-length: ".($options['size'] - $range['start']));
          ⋮┆----------------------------------------
        861┆ header("Content-range: $start-$end/"
        862┆        . (isset($options['size']) ? $options['size'] : "*"));
          ⋮┆----------------------------------------
        867┆ header("Content-length: ".$range['last']);
          ⋮┆----------------------------------------
        899┆ header("Content-length: ".$options['size']);
          ⋮┆----------------------------------------
        908┆ header("Content-length: ".strlen($options['data']));
          ⋮┆----------------------------------------
        974┆ header("Content-type: multipart/byteranges; boundary=".$this->multipart_separator);
          ⋮┆----------------------------------------
       1301┆ header("Lock-Token: <$options[locktoken]>");
          ⋮┆----------------------------------------
       1842┆ header("HTTP/1.1 $status");
          ⋮┆----------------------------------------
       1843┆ header("X-WebDAV-Status: $status", true);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/Imap/ImapHandlerFactory.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        155┆ unlink(__DIR__ . self::SETTINGS_KEY_FILE);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/Localization/Localization.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        836┆ unlink($this->invalidNameFormatUpgradeFilename);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/MVC/Controller/SugarController.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        860┆ require_once($dashletDefs[$id]['fileLocation']);
          ⋮┆----------------------------------------
        886┆ require_once($dashletDefs[$id]['fileLocation']);
          ⋮┆----------------------------------------
       1017┆ require_once($this->entry_point_registry[$entryPoint]['file']);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        862┆ $dashlet = new $dashletDefs[$id]['className'](
          ⋮┆----------------------------------------
        888┆ $dashlet = new $dashletDefs[$id]['className'](


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/MVC/SugarApplication.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        665┆ header("Location: " . $url);
          ⋮┆----------------------------------------
        683┆ header($header_URL);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/MVC/View/views/view.list.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        200┆ LoggerManager::getLogger()->warn('requested update key is not defined for list view at listViewPrepare: ' . $updateKey);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/MVC/View/views/view.multiedit.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         83┆ require_once($beanFiles[$bean]);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/MVC/View/views/view.popup.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         81┆ require 'custom/modules/' . $this->module . '/metadata/' . $_REQUEST['metadata'] . '.php';
          ⋮┆----------------------------------------
         84┆ require 'modules/' . $this->module . '/metadata/' . $_REQUEST['metadata'] . '.php';
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         80┆ && file_exists('custom/modules/' . $this->module . '/metadata/' . $_REQUEST['metadata'] . '.php')) {
          ⋮┆----------------------------------------
         83┆ && file_exists('modules/' . $this->module . '/metadata/' . $_REQUEST['metadata'] . '.php')) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/MVC/View/views/view.quickcreate.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        162┆ include('modules/'.$module.'/views/view.edit.php');
          ⋮┆----------------------------------------
        180┆ require_once($GLOBALS['beanFiles'][$class]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        130┆ if (!file_exists($source)) {
          ⋮┆----------------------------------------
        132┆ if (!file_exists($source)) {
          ⋮┆----------------------------------------
        136┆ if (!file_exists($source)) {
          ⋮┆----------------------------------------
        161┆ if (file_exists('modules/'.$module.'/views/view.edit.php')) {
          ⋮┆----------------------------------------
        172┆ if ($view->useModuleQuickCreateTemplate && file_exists('modules/'.$module.'/tpls/QuickCreate.tpl')) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        167┆ $view = new $c;
          ⋮┆----------------------------------------
        181┆ $bean = new $class();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/MVC/View/views/view.quickedit.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        199┆ include_once $editFileName;
          ⋮┆----------------------------------------
        216┆ require_once($GLOBALS['beanFiles'][$class]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        140┆ if (!file_exists($source)) {
          ⋮┆----------------------------------------
        142┆ if (!file_exists($source)) {
          ⋮┆----------------------------------------
        146┆ if (!file_exists($source)) {
          ⋮┆----------------------------------------
        153┆ if (!file_exists($source)) {
          ⋮┆----------------------------------------
        164┆ elseif (!file_exists('custom/' . $base . 'editviewdefs.php') && !file_exists($base . 'editviewdefs.php')
          ⋮┆----------------------------------------
        164┆ elseif (!file_exists('custom/' . $base . 'editviewdefs.php') && !file_exists($base . 'editviewdefs.php')
          ⋮┆----------------------------------------
        165┆ && !file_exists('custom/modules/' . $module .'/EditView.php') && !file_exists('modules/' . $module .'/EditView.php')
          ⋮┆----------------------------------------
        165┆ && !file_exists('custom/modules/' . $module .'/EditView.php') && !file_exists('modules/' . $module .'/EditView.php')
          ⋮┆----------------------------------------
        193┆ if (file_exists('custom/modules/'.$module.'/views/view.edit.php')) {
          ⋮┆----------------------------------------
        198┆ if (file_exists($editFileName)) {
          ⋮┆----------------------------------------
        208┆ if ($view->useModuleQuickCreateTemplate && file_exists('modules/'.$module.'/tpls/QuickCreate.tpl')) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        203┆ $view = new $c;
          ⋮┆----------------------------------------
        217┆ $bean = new $class();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/MVC/View/views/view.sugarpdf.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         80┆ header('Location:index.php?module='.(isset($_REQUEST['module']) ? $_REQUEST['module'] : null).'&action=DetailView&record='.(isset($_REQUEST['record']) ? $_REQUE ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/MySugar/MySugar.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        164┆ require_once($dashlets[$id]['fileLocation']);
          ⋮┆----------------------------------------
        198┆ require_once($dashlets[$id]['fileLocation']);
          ⋮┆----------------------------------------
        390┆ require_once($dashletDefs[$id]['fileLocation']);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        186┆ header("Location: index.php?action=index&module=". $this->type);
          ⋮┆----------------------------------------
        203┆ header("Location: index.php?action=index&module=". $this->type);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        165┆ $dashlet = new $dashlets[$id]['className']($id, (isset($dashlets[$id]['options']) ? $dashlets[$id]['options'] : array()));
          ⋮┆----------------------------------------
        199┆ $dashlet = new $dashlets[$id]['className']($id, (isset($dashlets[$id]['options']) ? $dashlets[$id]['options'] : array()));
          ⋮┆----------------------------------------
        392┆ $dashlet = new $dashletDefs[$id]['className']($id, (isset($dashletDefs[$id]['options']) ? $dashletDefs[$id]['options'] : array()));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/MySugar/retrieve_dash_page.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        242┆ require_once($dashlets[$id]['fileLocation']);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        228┆ if (!empty($id) && isset($dashlets[$id]) && is_file($dashlets[$id]['fileLocation'])) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        243┆ $dashlet = new $dashlets[$id]['className']($id, (isset($dashlets[$id]['options']) ? $dashlets[$id]['options'] : array()));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/Popups/Popup_picker.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         70┆ require_once('modules/' . $currentModule . '/metadata/' . $_REQUEST['metadata'] . '.php');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/Smarty/plugins/function.html_image.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         98┆ if(!$_image_data = @getimagesize($_image_path)) {
          ⋮┆----------------------------------------
         99┆ if(!file_exists($_image_path)) {
          ⋮┆----------------------------------------
        102┆ } else if(!is_readable($_image_path)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/Smarty/plugins/function.math.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.eval-use
        Evaluating non-constant commands. This can lead to command injection.

         94┆ eval("\$smarty_math_result = " . $equation . ";");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/SubPanel/SubPanel.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        301┆ unlink('custom/Extension/modules/'. $panel->parent_bean->module_dir . "/Ext/Layoutdefs/$oldName1.php");
          ⋮┆----------------------------------------
        304┆ unlink('custom/Extension/modules/'. $panel->parent_bean->module_dir . "/Ext/Layoutdefs/$oldName2.php");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/SubPanel/SubPanelDefinitions.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        881┆ $hidden_subpanels = unserialize($hidden_subpanels);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/SugarCache/SugarCacheFile.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        138┆ $this->localCache = unserialize(file_get_contents($cachedfile));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/SugarCache/SugarCacheRedis.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        144┆ unserialize($returnValue) :


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/SugarCache/SugarCacheZend.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         89┆ unserialize($raw_cache_value) :


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/SugarEmailAddress/SugarEmailAddress.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

       1002┆ $query = "SELECT opt_out, invalid_email, confirm_opt_in FROM email_addresses WHERE email_address_caps = '" . $this->db->quote(strtoupper($email)) . "'";
          ⋮┆----------------------------------------
       1027┆ $GLOBALS['log']->fatal('Invalid Argument: Delete Values to be an array, ' . gettype($deleteValues) . ' given.');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/SugarFields/Fields/Image/deleteAttachment.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         52┆ if (file_exists($removeFile)) {
          ⋮┆----------------------------------------
         53┆ if (!unlink($removeFile)) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-url-host
        User data flows into the host portion of this manually-constructed URL. This could allow an
        attacker to send data to their own server, potentially exposing sensitive data such as
        cookies or authorization information sent with this request. They could also probe internal
        servers or other resources that the server runnig this code can access. (This is called
        server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an
        allowlist for approved hosts hardcode the correct host.

         45┆ $removeFile = "upload://{$_REQUEST[$field . '_record_id'] }_" . $field;
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         53┆ if (!unlink($removeFile)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/SugarObjects/LanguageManager.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        180┆ unlink($file);
          ⋮┆----------------------------------------
        315┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/SugarObjects/VardefManager.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        239┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/SugarObjects/templates/file/File.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        161┆ if (!unlink($removeFile)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/SugarTheme/SugarTheme.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        406┆ unlink("$cachedir/pathCache.php");
          ⋮┆----------------------------------------
        409┆ unlink("$cachedir/spriteCache.php");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        344┆ $caches = unserialize(file_get_contents($cachedfile));
          ⋮┆----------------------------------------
        360┆ $this->_spriteCache = unserialize(sugar_file_get_contents($cachedfile));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/SugarTheme/getImage.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         67┆ header($_SERVER["SERVER_PROTOCOL"].' 404 Not Found');
          ⋮┆----------------------------------------
         73┆ header($_SERVER["SERVER_PROTOCOL"].' 404 Not Found');
          ⋮┆----------------------------------------
         84┆ header($_SERVER["SERVER_PROTOCOL"].' 404 Not Found');
          ⋮┆----------------------------------------
        100┆ header("Etag: $etag");
          ⋮┆----------------------------------------
        101┆ header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 2592000));
          ⋮┆----------------------------------------
        108┆ header($_SERVER["SERVER_PROTOCOL"].' 304 Not Modified');
          ⋮┆----------------------------------------
        112┆ header("Last-Modified: ".gmdate('D, d M Y H:i:s \G\M\T', $last_modified_time));
          ⋮┆----------------------------------------
        113┆ header('Content-Type: ' . $mime_type);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         66┆ if (! file_exists($filename)) {
          ⋮┆----------------------------------------
         93┆ $last_modified_time = filemtime($filename);
          ⋮┆----------------------------------------
         96┆ $etag = '"'.md5_file($filename).'"';
          ⋮┆----------------------------------------
        116┆ if (!file_exists($filename)) {
          ⋮┆----------------------------------------
        121┆ readfile($filename);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/Sugarpdf/FontManager.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        334┆ unlink($this->fontPath.$this->filename);
          ⋮┆----------------------------------------
        336┆ unlink($this->fontPath.$this->getFilenameShort()."ctg.z");
          ⋮┆----------------------------------------
        339┆ unlink($this->fontPath.$this->getFilenameShort().".z");
          ⋮┆----------------------------------------
        376┆ unlink($font_file);
          ⋮┆----------------------------------------
        377┆ unlink($metric_file);
          ⋮┆----------------------------------------
        423┆ unlink($filename.".php");
          ⋮┆----------------------------------------
        426┆ unlink($filename.".ctg.z");
          ⋮┆----------------------------------------
        429┆ unlink($filename.".z");
          ⋮┆----------------------------------------
        447┆ return unlink($cachedfile);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/TemplateHandler/TemplateHandler.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        114┆ unlink($cacheDir . $e);
          ⋮┆----------------------------------------
        140┆ unlink($tplDir . $e);
          ⋮┆----------------------------------------
        392┆ return unlink($this->cacheDir . $this->themeDir . $theme . '/' . $this->templateDir . $module . '/' . $view . '.tpl');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/UploadFile.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        207┆ if (!unlink($oldStyleSource)) {
          ⋮┆----------------------------------------
        535┆ unlink($new_destination);
          ⋮┆----------------------------------------
        564┆ return unlink("upload://$bean_id$file_name");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/UploadMultipleFiles.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        210┆ if (!unlink($oldStyleSource)) {
          ⋮┆----------------------------------------
        528┆ unlink($new_destination);
          ⋮┆----------------------------------------
        557┆ return unlink("upload://$bean_id$file_name");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/UploadStream.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        303┆ unlink(self::path($path));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/connectors/component.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.eval-use
        Evaluating non-constant commands. This can lead to command injection.

        243┆ eval($eval_code);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/connectors/utils/ConnectorUtils.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        495┆ if (file_exists($cachedfile = sugar_cached("modules/{$module}/DetailView.tpl")) && !unlink($cachedfile)) {
          ⋮┆----------------------------------------
        595┆ if (file_exists($cachedfile = sugar_cached("modules/{$module}/DetailView.tpl")) && !unlink($cachedfile)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/database/DBManagerFactory.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.phpinfo-use
        The 'phpinfo' function may reveal sensitive information about your environment.

        274┆ phpinfo(INFO_MODULES);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/dir_inc.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        137┆ return(unlink($path));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/export_utils.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        917┆ require_once($beanFiles[$bean]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         84┆ header("Content-type: text/comma-separated-values; charset=" . $charset);
          ⋮┆----------------------------------------
         85┆ header("Content-Disposition: attachment; filename=\"{$name}.csv\"");
          ⋮┆----------------------------------------
         88┆ header("Last-Modified: " . TimeDate::httpTime());
          ⋮┆----------------------------------------
         90┆ header("Content-Length: " . mb_strlen($data, '8bit'));
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        918┆ $focus = new $bean;
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        437┆  ... "(SELECT $currentTable.id AS current_id,'$currentModule' AS current_module,'$currentField' AS current_field,'$relatedModule' AS related_module,'$relatedField' A ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/externalAPI/ExternalAPIFactory.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        189┆ unlink($cached);
          ⋮┆----------------------------------------
        193┆ unlink($cached);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/formbase.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        247┆ header("Location: ". $_REQUEST['return_url']);
          ⋮┆----------------------------------------
        252┆ header($url);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/generic/DeleteRelationship.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         66┆ require_once($beanFiles[$bean_name]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         67┆ $focus = new $bean_name();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/generic/Save2.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        107┆ require_once($beanFiles[$bean_name]);
          ⋮┆----------------------------------------
        121┆ require_once($beanFiles[$bean_name]);
          ⋮┆----------------------------------------
        142┆ require('custom/modules/'.$module.'/metadata/metafiles.php');
          ⋮┆----------------------------------------
        144┆ require('modules/'.$module.'/metadata/metafiles.php');
          ⋮┆----------------------------------------
        148┆ require_once('custom/modules/'.$module.'/metadata/searchdefs.php');
          ⋮┆----------------------------------------
        150┆ require_once($metafiles[$module]['searchdefs']);
          ⋮┆----------------------------------------
        152┆ require_once('modules/'.$module.'/metadata/searchdefs.php');
          ⋮┆----------------------------------------
        156┆ require_once($metafiles[$module]['searchfields']);
          ⋮┆----------------------------------------
        158┆ require_once('modules/'.$module.'/metadata/SearchFields.php');
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        212┆ header("Location: index.php?sugar_body_only=1&module=".$_REQUEST['module']."&subpanel=".$_REQUEST['subpanel_module_name']."&action=SubPanelViewer&inline=$inline ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        141┆ if (file_exists('custom/modules/'.$module.'/metadata/metafiles.php')) {
          ⋮┆----------------------------------------
        143┆ } elseif (file_exists('modules/'.$module.'/metadata/metafiles.php')) {
          ⋮┆----------------------------------------
        147┆ if (file_exists('custom/modules/'.$module.'/metadata/searchdefs.php')) {
          ⋮┆----------------------------------------
        151┆ } elseif (file_exists('modules/'.$module.'/metadata/searchdefs.php')) {
          ⋮┆----------------------------------------
        157┆ } elseif (file_exists('modules/'.$module.'/metadata/SearchFields.php')) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        108┆ $focus = new $bean_name();
          ⋮┆----------------------------------------
        122┆ $focus = new $bean_name();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/generic/SugarWidgets/SugarWidgetSubPanelRemoveButtonMeetings.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         84┆ require_once($beanFiles[$class]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         85┆ $focus = new $class();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/generic/SugarWidgets/SugarWidgetSubPanelTopCreateCampaignLogEntryButton.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        151┆ . " onclick='open_popup(\"$this->module_name\",600,400,\"$initial_filter\",true,true,$json_encoded_php_array,\"$popup_mode\",$create);' /></form>\n";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/generic/SugarWidgets/SugarWidgetSubPanelTopSelectButton.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        177┆ . " onclick='open_popup(\"$this->module_name\",600,400,\"$initial_filter\",true,true,$json_encoded_php_array,\"$popup_mode\",$create);' />\n";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/generic/SugarWidgets/SugarWidgetSubPanelTopSelectContactsButton.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        177┆ . " onclick='open_popup(\"$this->module_name\",600,400,\"$initial_filter\",true,true,$json_encoded_php_array,\"$popup_mode\",$create);' /></form>\n";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/generic/SugarWidgets/SugarWidgetSubPanelTopSelectUsersButton.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        181┆ . " onclick='open_popup(\"$this->module_name\",600,400,\"$initial_filter\",true,true,$json_encoded_php_array,\"$popup_mode\",$create);' /></form>\n";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/javascript/getYUIComboFile.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        104┆ header("Etag: $etag");
          ⋮┆----------------------------------------
        105┆ header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 2592000));
          ⋮┆----------------------------------------
        106┆ header("Content-Type: $contentType");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         90┆ if (is_file($path)) {
          ⋮┆----------------------------------------
         92┆ $contents =  file_get_contents($path);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/language/getJSLanguage.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         96┆ header('Expires: '.gmdate('D, d M Y H:i:s \G\M\T', time() + 31556940));
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         75┆ if (!is_file($file)) {
          ⋮┆----------------------------------------
         87┆ if (!is_file($file)) {
          ⋮┆----------------------------------------
         98┆ readfile($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/nusoap/class.soap_server.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.eval-use
        Evaluating non-constant commands. This can lead to command injection.

        675┆ @eval($funcCall);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        326┆ header('Location: '.$this->externalWSDLURL);
          ⋮┆----------------------------------------
        876┆ header($hdr, false);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/nusoap/class.soapclient.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.eval-use
        Evaluating non-constant commands. This can lead to command injection.

        878┆ eval($evalStr);
          ⋮┆----------------------------------------
        880┆ eval("\$proxy = new nusoap_proxy_$r('');");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/nusoap/class.wsdlcache.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        135┆ unlink($filename);
          ⋮┆----------------------------------------
        248┆ $ret = unlink($filename);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        157┆ return (!is_null($s)) ? unserialize($s) : null;


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/nusoap/nusoap.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.eval-use
        Evaluating non-constant commands. This can lead to command injection.

       5423┆ @eval($funcCall);
          ⋮┆----------------------------------------
       9906┆ eval($evalStr);
          ⋮┆----------------------------------------
       9908┆ eval("\$proxy = new nusoap_proxy_$r('');");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

       5065┆ header('Location: '.$this->externalWSDLURL);
          ⋮┆----------------------------------------
       5626┆ header($hdr, false);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/parsecsv.lib.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        266┆ header('Content-Disposition: attachment; filename="'.$filename.'"');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/resource/Observers/SoapResourceObserver.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         72┆ header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/social/get_data.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         49┆ header("Location: " . $sugar_config['site_url'] . "?module=" . $_REQUEST['module'] . "&action=DetailView&record=" . $_REQUEST['record'] . "&");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/social/twitter/twitter_auth/callback.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         48┆ header('Location: ' .$sugar_config['site_url'] . '/index.php');
          ⋮┆----------------------------------------
         51┆ header('Location: ' .$sugar_config['site_url'] . '/index.php');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/utils/autoloader.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        118┆ if (file_exists("custom/$modulepath")) {
          ⋮┆----------------------------------------
        121┆ if (file_exists($modulepath)) {
          ⋮┆----------------------------------------
        126┆ if (file_exists("custom/$basepath")) {
          ⋮┆----------------------------------------
        129┆ if (file_exists($basepath)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/utils/file_utils.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        101┆ if (!$temp_dir || !unlink($temp_dir)) {
          ⋮┆----------------------------------------
        334┆ unlink($new_filename);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/utils/sugar_file_utils.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        222┆ @unlink($filename);
          ⋮┆----------------------------------------
        225┆ @unlink($temp);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/utils.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

       5660┆ header('ETag: ' . $etag);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.phpinfo-use
        The 'phpinfo' function may reveal sensitive information about your environment.

       4181┆ phpinfo($level);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

       3970┆ unlink($file);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

       2280┆ $xsstags = unserialize(base64_decode($sugar_config['email_xss']));
          ⋮┆----------------------------------------
       5815┆ return unserialize($value);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/include/vCard.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        168┆ header("Content-Disposition: attachment; filename={$this->name}.vcf");
          ⋮┆----------------------------------------
        169┆ header("Content-Type: text/x-vcard; charset=".$locale->getExportCharset());
          ⋮┆----------------------------------------
        171┆ header("Last-Modified: " . TimeDate::httpTime());
          ⋮┆----------------------------------------
        177┆ header("Content-Length: ".strlen($content));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/install/UploadLangFileCheck.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         65┆ if (file_exists($file_name)) {
          ⋮┆----------------------------------------
         66┆ $filesize =filesize($file_name);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/install/install_utils.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        147┆ include($manifest);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        136┆ if (is_file($zipFile)) {
          ⋮┆----------------------------------------
        146┆ if (is_file($manifest)) {
          ⋮┆----------------------------------------
        422┆ if (is_file($manifest)) {
          ⋮┆----------------------------------------
        423┆ if (!unlink($manifest)) {
          ⋮┆----------------------------------------
        432┆ if (is_file($zipFile)) {
          ⋮┆----------------------------------------
        433┆ if (!unlink($zipFile)) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        199┆ @unlink(getcwd().substr($fileFrom, strlen($unzip_dir), strlen($fileFrom)));
          ⋮┆----------------------------------------
        307┆ unlink($file);
          ⋮┆----------------------------------------
        423┆ if (!unlink($manifest)) {
          ⋮┆----------------------------------------
        433┆ if (!unlink($zipFile)) {
          ⋮┆----------------------------------------
       1928┆ @unlink($_FILES['language_pack']['tmp_name']);
          ⋮┆----------------------------------------
       1930┆ @unlink($manifest);
          ⋮┆----------------------------------------
       1935┆ @unlink($sugar_config['upload_dir'].$tmpZipFile);
          ⋮┆----------------------------------------
       1984┆ unlink($full_file); // remove tempFile


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/install/licensePrint.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         51┆ require_once("install/language/{$_GET['language']}.lang.php");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/install.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        166┆ require_once("install/language/{$current_language}.lang.php");
          ⋮┆----------------------------------------
        827┆ require($the_file);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        165┆ if (file_exists("install/language/{$current_language}.lang.php")) {
          ⋮┆----------------------------------------
        825┆ if (is_file($the_file)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/jssource/minify_utils.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        404┆ unlink($bu_path);
          ⋮┆----------------------------------------
        481┆ unlink($bu_path);
          ⋮┆----------------------------------------
        489┆ unlink($from_path);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/lib/Robo/Plugin/Commands/BuildCommands.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        134┆ unlink($directory . $file . '/style.css');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/lib/Search/AOD/LuceneSearchEngine.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        105┆ $hits = unserialize(sugar_file_get_contents($cachePath));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/lib/Search/UI/MVC/Controller.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        100┆ header("Location: $location");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/lib/Utility/AntiMalware/Providers/Sophos.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.exec-use
        Executing non-constant commands. This can lead to command injection.

        119┆ $lineOutput = shell_exec($command);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ACLRoles/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         81┆ header("Location: index.php?module=ACLRoles&action=DetailView&record=". $role->id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AM_ProjectTemplates/controller.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        274┆  ... "select max(duration) +1 from am_tasktemplates inner join am_tasktemplates_am_projecttemplates_c on am_tasktemplates_am_projecttemplatesam_tasktemplates_idb = a ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        408┆ $query = "SELECT date_finish FROM project_task WHERE id = '{$id}'";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOP_Case_Updates/CaseUpdatesHook.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-url-host
        User data flows into the host portion of this manually-constructed URL. This could allow an
        attacker to send data to their own server, potentially exposing sensitive data such as
        cookies or authorization information sent with this request. They could also probe internal
        servers or other resources that the server runnig this code can access. (This is called
        server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an
        allowlist for approved hosts hardcode the correct host.

        161┆ $srcFile = "upload://{$doc->document_revision_id}";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOR_Charts/lib/pChart/class/pCache.class.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         46┆ unlink($this->CacheFolder."/".$this->CacheIndex);
          ⋮┆----------------------------------------
         50┆ unlink($this->CacheFolder."/".$this->CacheDB);
          ⋮┆----------------------------------------
         92┆ unlink($TemporaryFile);
          ⋮┆----------------------------------------
        177┆ unlink($Database);
          ⋮┆----------------------------------------
        178┆ unlink($Index);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOR_Charts/lib/pChart/class/pImage.class.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        341┆ unlink($StorageFolder."/".$UniqueID.".map");
          ⋮┆----------------------------------------
        530┆ unlink($StorageFolder."/".$UniqueID.".map");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOR_Conditions/conditionLines.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         59┆ $condition_name->module_path = unserialize(base64_decode($condition_name->module_path));
          ⋮┆----------------------------------------
         62┆ $condition_name->value = unserialize(base64_decode($condition_name->value));
          ⋮┆----------------------------------------
         87┆ $condition_name->module_path = unserialize(base64_decode($condition_name->module_path));
          ⋮┆----------------------------------------
         89┆ $condition_name->value = unserialize(base64_decode($condition_name->value));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOR_Fields/fieldLines.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         64┆ $field_name->module_path = unserialize(base64_decode($field_name->module_path));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOR_Reports/AOR_Report.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        207┆ $path = unserialize(base64_decode($field->module_path));
          ⋮┆----------------------------------------
        311┆ $rows[0]['module_path'] = unserialize(base64_decode($rows[0]['module_path']));
          ⋮┆----------------------------------------
        440┆ $path = unserialize(base64_decode($field->module_path));
          ⋮┆----------------------------------------
        670┆ $path = unserialize(base64_decode($field->module_path));
          ⋮┆----------------------------------------
        902┆ $path = unserialize(base64_decode($field->module_path));
          ⋮┆----------------------------------------
       1040┆ $path = unserialize(base64_decode($field->module_path));
          ⋮┆----------------------------------------
       1233┆ $path = unserialize(base64_decode($field->module_path));
          ⋮┆----------------------------------------
       1494┆ $path = unserialize(base64_decode($condition->module_path));
          ⋮┆----------------------------------------
       1631┆ $params = unserialize(base64_decode($condition->value));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOR_Reports/aor_utils.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        188┆ $path = unserialize(base64_decode($condition->module_path));
          ⋮┆----------------------------------------
        199┆ $additionalConditions = unserialize(base64_decode($condition->value));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOR_Reports/controller.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        320┆ require_once($beanFiles[$beanList[$module]]);
          ⋮┆----------------------------------------
        420┆ require_once($beanFiles[$beanList[$module]]);
          ⋮┆----------------------------------------
        503┆ require_once($beanFiles[$beanList[$module]]);
          ⋮┆----------------------------------------
        766┆ require_once($beanFiles[$beanList[$module]]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        321┆ $focus = new $beanList[$module];
          ⋮┆----------------------------------------
        421┆ $focus = new $beanList[$module];
          ⋮┆----------------------------------------
        504┆ $focus = new $beanList[$module];
          ⋮┆----------------------------------------
        767┆ $focus = new $beanList[$module];
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        284┆ echo "<select type='text' style='width:100px;' name='$aor_field' id='$aor_field' title='' tabindex='116'>" . get_select_options_with_id(
          ⋮┆----------------------------------------
        385┆ echo "<select type='text' style='width:178px;' name='$aor_field' id='$aor_field' title='' tabindex='116'>" . get_select_options_with_id(
          ⋮┆----------------------------------------
        467┆ echo "<select type='text' style='width:178px;' name='$aor_field' id='$aor_field' title='' tabindex='116'>" . get_select_options_with_id(
          ⋮┆----------------------------------------
        549┆ echo "<select type='text' style='width:178px;' name='$aor_field' id='$aor_field' title='' tabindex='116'>" . get_select_options_with_id(
          ⋮┆----------------------------------------
        591┆ echo "<select type='text' style='width:178px;' name='$aor_field' id='$aor_field' title='' tabindex='116'>" . getModuleFields(
          ⋮┆----------------------------------------
        608┆ echo "<select type='text' style='width:178px;' name='$aor_field' id='$aor_field' title='' tabindex='116'>" . getDropdownList(
          ⋮┆----------------------------------------
        651┆ echo "<select type='text' style='width:178px;' name='$aor_field' id='$aor_field' title='' tabindex='116'>" . getModuleFields(
          ⋮┆----------------------------------------
        727┆ echo "<select type='text' style='width:178px;' name='$aor_field' id='$aor_field' title='' tabindex='116'>" . getModuleFields(
          ⋮┆----------------------------------------
        786┆ echo "<select type='text' style='width:178px;' name='$aor_field' id='$aor_field' title='' tabindex='116'>" . get_select_options_with_id(


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOR_Reports/views/view.detail.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         40┆ $condition->module_path = implode(":", unserialize(base64_decode($condition->module_path)));
          ⋮┆----------------------------------------
         42┆ $condition->value = unserialize(base64_decode($condition->value));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOR_Reports/views/view.edit.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         84┆ $condition_name->module_path = implode(":", unserialize(base64_decode($condition_name->module_path)));
          ⋮┆----------------------------------------
         87┆ $condition_name->value = unserialize(base64_decode($condition_name->value));
          ⋮┆----------------------------------------
        117┆ $field_name->module_path = implode(":", unserialize(base64_decode($field_name->module_path)));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOR_Scheduled_Reports/AOR_Scheduled_Reports.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         93┆ $params = unserialize(base64_decode($this->email_recipients));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOR_Scheduled_Reports/emailRecipients.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         44┆ $params = unserialize(base64_decode($value));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOS_PDF_Templates/generatePdf.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         65┆  ... "SELECT pg.id, pg.product_id, pg.group_id FROM aos_products_quotes pg LEFT JOIN aos_line_item_groups lig ON pg.group_id = lig.id WHERE pg.parent_type = '" . $be ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOS_PDF_Templates/sendEmail.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        138┆ header('Location: index.php?action=ComposeViewWithPdfTemplate&module=Emails&return_module=' . $module_type . '&return_action=DetailView&return_id=' . $module->i ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOS_Quotes/converToInvoice.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        139┆ header('Location: index.php?module=AOS_Invoices&action=EditView&record='.$invoice->id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOS_Quotes/createContract.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        128┆ header('Location: index.php?module=AOS_Contracts&action=EditView&record='.$contract->id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOS_Quotes/createOpportunity.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         57┆ header('Location: index.php?module=Opportunities&action=EditView&record='.$opportunity->id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOW_Conditions/conditionLines.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         60┆ $condition_name->module_path = unserialize(base64_decode($condition_name->module_path));
          ⋮┆----------------------------------------
         66┆ $condition_name->value = unserialize(base64_decode($condition_name->value));
          ⋮┆----------------------------------------
         91┆ $condition_name->module_path = unserialize(base64_decode($condition_name->module_path));
          ⋮┆----------------------------------------
         97┆ $condition_name->value = unserialize(base64_decode($condition_name->value));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOW_WorkFlow/AOW_WorkFlow.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        382┆ $path = unserialize(base64_decode($condition->module_path));
          ⋮┆----------------------------------------
        453┆ $params = @unserialize(base64_decode($condition->value));
          ⋮┆----------------------------------------
        676┆ $path = unserialize(base64_decode($condition->module_path));
          ⋮┆----------------------------------------
        741┆ $params =  unserialize(base64_decode($value));
          ⋮┆----------------------------------------
        965┆ if (!$flow_action->run_action($bean, unserialize(base64_decode($action->parameters)), $in_save)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/AOW_WorkFlow/controller.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        102┆ require_once($beanFiles[$beanList[$module]]);
          ⋮┆----------------------------------------
        179┆ require_once($beanFiles[$beanList[$module]]);
          ⋮┆----------------------------------------
        255┆ require_once($beanFiles[$beanList[$module]]);
          ⋮┆----------------------------------------
        495┆ require_once($beanFiles[$beanList[$module]]);
          ⋮┆----------------------------------------
        535┆ require_once('custom/modules/AOW_Actions/actions/'.$action_name.'.php');
          ⋮┆----------------------------------------
        538┆ require_once('modules/AOW_Actions/actions/'.$action_name.'.php');
          ⋮┆----------------------------------------
        562┆ require_once($beanFiles[$beanList[$_REQUEST['aow_module']]]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        534┆ if (file_exists('custom/modules/AOW_Actions/actions/'.$action_name.'.php')) {
          ⋮┆----------------------------------------
        537┆ if (file_exists('modules/AOW_Actions/actions/'.$action_name.'.php')) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        103┆ $focus = new $beanList[$module];
          ⋮┆----------------------------------------
        180┆ $focus = new $beanList[$module];
          ⋮┆----------------------------------------
        256┆ $focus = new $beanList[$module];
          ⋮┆----------------------------------------
        496┆ $focus = new $beanList[$module];
          ⋮┆----------------------------------------
        560┆ $action = new $action_name($id);
          ⋮┆----------------------------------------
        563┆ $bean = new $beanList[$_REQUEST['aow_module']];
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        146┆  ... "<select type='text' name='$aow_field' id='$aow_field' title='' tabindex='116'>". get_select_options_with_id($app_list_strings['aow_operator_list'], $value) ."< ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        227┆  ... "<select type='text'  name='$aow_field' id='$aow_field' title='' tabindex='116'>". get_select_options_with_id($app_list_strings['aow_condition_type_list'], $val ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        301┆  ... "<select type='text'  name='$aow_field' id='$aow_field' title='' tabindex='116'>". get_select_options_with_id($app_list_strings['aow_action_type_list'], $value) ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        343┆  ... "<select type='text'  name='$aow_field' id='$aow_field ' title='' tabindex='116'>". getModuleFields($module, $view, $value, getValidFieldsTypes($module, $fieldn ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        394┆ echo "<select type='text'  name='$aow_field' id='$aow_field ' title='' tabindex='116'>". getModuleFields($module, $view, $value, $valid_fields) ."</select>";
          ⋮┆----------------------------------------
        460┆ echo "<select type='text'  name='$aow_field' id='$aow_field ' title='' tabindex='116'>". getModuleFields($module, $view, $value) ."</select>";
          ⋮┆----------------------------------------
        515┆  ... "<select type='text'  name='$aow_field' id='$aow_field' title='' tabindex='116'>". get_select_options_with_id($app_list_strings['aow_rel_action_type_list'], $va ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        592┆ echo "<select type='text'  name='$aow_field' id='$aow_field' title='' tabindex='116'>". get_select_options_with_id($rel_field_list, $value) ."</select>";
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        557┆ $params = unserialize(base64_decode($aow_action->parameters));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Accounts/AccountFormBase.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        500┆ header("Location: index.php?$location");
          ⋮┆----------------------------------------
        551┆ header("Location: index.php?".http_build_query($urlData));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Accounts/ShowDuplicates.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        172┆ $input .= '<input type="hidden" name="create" value="'.$_POST['create'].'">';


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/AOPAdmin.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-url-host
        User data flows into the host portion of this manually-constructed URL. This could allow an
        attacker to send data to their own server, potentially exposing sensitive data such as
        cookies or authorization information sent with this request. They could also probe internal
        servers or other resources that the server runnig this code can access. (This is called
        server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an
        allowlist for approved hosts hardcode the correct host.

        100┆ preg_match("@^https?://@", $joomlaUrl) ? $joomlaUrl : 'http://' . $joomlaUrl;


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/Async.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        110┆ require_once($beanFiles[$beanList[$target]]);
          ⋮┆----------------------------------------
        135┆ require_once($beanFiles[$beanList[$target]]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        111┆ $bean = new $beanList[$target]();
          ⋮┆----------------------------------------
        141┆ $bean = new $beanList[$target]();
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        112┆ $q = "SELECT count(*) as count FROM {$bean->table_name}";
          ⋮┆----------------------------------------
        119┆ $q2 = "SELECT id FROM {$bean->table_name}";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/DiagnosticDelete.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         75┆ if (file_exists($cachedfile = sugar_cached("diagnostic/".$_REQUEST['guid']."/".$_REQUEST['file'].".zip"))) {
          ⋮┆----------------------------------------
         76┆ unlink($cachedfile);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         76┆ unlink($cachedfile);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/DiagnosticDownload.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         68┆ header("Content-Disposition: attachment; filename=$guid.zip");
          ⋮┆----------------------------------------
         70┆ header("Content-Length: $filesize");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         61┆ $filesize = filesize($path);
          ⋮┆----------------------------------------
         71┆ readfile($path);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/DiagnosticRun.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.exec-use
        Executing non-constant commands. This can lead to command injection.

        837┆ executeconfigphp();
          ⋮┆----------------------------------------
        842┆ executecustom_dir();
          ⋮┆----------------------------------------
        847┆ executephpinfo();
          ⋮┆----------------------------------------
        856┆ execute_sql($domysql_info, $domysql_dumps, $domysql_schema);
          ⋮┆----------------------------------------
        861┆ executemd5($domd5filesmd5, $domd5calculated);
          ⋮┆----------------------------------------
        866┆ executebeanlistbeanfiles();
          ⋮┆----------------------------------------
        871┆ executesugarlog();
          ⋮┆----------------------------------------
        876┆ executevardefs();
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.phpinfo-use
        The 'phpinfo' function may reveal sensitive information about your environment.

        351┆ phpinfo();
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        262┆ if (!unlink($dir.$obj)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/ExportCustomFieldStructure.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         58┆ header("Content-Type: text/txt; charset={$app_strings['LBL_CHARSET']}");
          ⋮┆----------------------------------------
         60┆ header("Last-Modified: " . TimeDate::httpTime());
          ⋮┆----------------------------------------
         62┆ header("Content-Length: ".strlen($str));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/PasswordManager.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.php-ssrf
        The web server receives a URL or similar request from an upstream component and retrieves
        the contents of this URL, but it does not sufficiently ensure that the request is being sent
        to the expected destination. Dangerous function fopen with payload
        "http://www.google.com/recaptcha/api/challenge?k=" . $_POST['captcha_public_key'] .
        "&cachestop=35235354"

         83┆ $handle = @fopen("http://www.google.com/recaptcha/api/challenge?k=" . $_POST['captcha_public_key'] . "&cachestop=35235354",
         84┆     'rb');
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         83┆ $handle = @fopen("http://www.google.com/recaptcha/api/challenge?k=" . $_POST['captcha_public_key'] . "&cachestop=35235354",
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        207┆ $storedOptions = unserialize(base64_decode($focus->stored_options));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/QuickRepairAndRebuild.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        383┆ unlink((string)$src_file);
          ⋮┆----------------------------------------
        481┆ unlink($thedir . "/" . $children);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/RebuildDashlets.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         52┆ unlink($cachedfile);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/RepairUploadFolder.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        106┆ if (unlink('upload://' . $node->getFilename())) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         79┆ header("Location: index.php?action={$_POST['return_action']}&module={$_POST['return_module']}");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/Updater.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        101┆ $versions = unserialize(base64_decode($encodedVersions));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/UpgradeWizard.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        144┆ if (is_file($manifest_file)) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-url-host
        User data flows into the host portion of this manually-constructed URL. This could allow an
        attacker to send data to their own server, potentially exposing sensitive data such as
        cookies or authorization information sent with this request. They could also probe internal
        servers or other resources that the server runnig this code can access. (This is called
        server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an
        allowlist for approved hosts hardcode the correct host.

        120┆ copy($moduleDir . '/' . $_REQUEST['upgrade_zip_escaped'], "upload://" . $_REQUEST['upgrade_zip_escaped']);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         54┆ @unlink($_FILES['upgrade_zip']['tmp_name']);
          ⋮┆----------------------------------------
         55┆ @unlink("upload://".$_FILES['upgrade_zip']['name']);
          ⋮┆----------------------------------------
        213┆ if (unlink($delete_me)) { // successful deletion?


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/UpgradeWizard_commit.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        261┆ if ($install_type=="patch" && is_file($dest_file)) {
          ⋮┆----------------------------------------
        262┆ if (!is_dir(dirname($rest_file))) {
          ⋮┆----------------------------------------
        267┆ sugar_touch($rest_file, filemtime($dest_file));
          ⋮┆----------------------------------------
        276┆ if ($install_type=="patch" && is_file($rest_file)) {
          ⋮┆----------------------------------------
        278┆ sugar_touch($dest_file, filemtime($rest_file));
          ⋮┆----------------------------------------
        279┆ } elseif (file_exists($dest_file) && !unlink($dest_file)) {
          ⋮┆----------------------------------------
        279┆ } elseif (file_exists($dest_file) && !unlink($dest_file)) {
          ⋮┆----------------------------------------
        403┆ if (is_dir($rest_dir)) {
          ⋮┆----------------------------------------
        442┆ $new_upgrade->md5sum        = md5_file($install_file);
          ⋮┆----------------------------------------
        476┆ $the_md5 = md5_file($install_file);
          ⋮┆----------------------------------------
        488┆ $the_md5 = md5_file($install_file);
          ⋮┆----------------------------------------
        501┆ $the_md5 = md5_file($install_file);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        279┆ } elseif (file_exists($dest_file) && !unlink($dest_file)) {
          ⋮┆----------------------------------------
        438┆ unlink($uh->filename);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/UpgradeWizard_prepare.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.md5-loose-equality
        Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type
        juggling issues

        433┆ if (!$forced_copy && is_file($new_file) && (md5_file($unzip_file) == md5_file($new_file))) {
          ⋮┆----------------------------------------
        446┆ if (md5_file($unzip_file) == md5_file($new_file)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/clear_chart_cache.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         58┆ unlink((string)$src_file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/expandDatabase.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        128┆ header("Content-Type: text/sql; charset={$app_strings['LBL_CHARSET']}");
          ⋮┆----------------------------------------
        130┆ header("Last-Modified: " . TimeDate::httpTime());
          ⋮┆----------------------------------------
        132┆ header("Content-Length: ".strlen($theAlterQueries));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/repairDatabase.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         65┆ header("Content-Type: text/sql; charset={$app_strings['LBL_CHARSET']}");
          ⋮┆----------------------------------------
         67┆ header("Last-Modified: " . TimeDate::httpTime());
          ⋮┆----------------------------------------
         69┆ header("Content-Length: " . strlen($_POST['sql']));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/repairUniSearch.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         55┆ unlink((string)$src_file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/undoupdateclass.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         52┆ unlink($filename);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/updateTimezonePrefs.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         81┆ $prefs = unserialize(base64_decode($row['user_preferences']));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/updater_utils.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        199┆ $resultData = unserialize($serializedResultData);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Administration/views/view.backups.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        114┆ if (!is_dir($backup_dir)) {
          ⋮┆----------------------------------------
        120┆ if (!is_writable($backup_dir)) {
          ⋮┆----------------------------------------
        124┆ if (is_file("$backup_dir/$backup_zip")) {
          ⋮┆----------------------------------------
        127┆ if (is_dir("$backup_dir/$backup_zip")) {
          ⋮┆----------------------------------------
        147┆ $size = filesize("$backup_dir/$backup_zip");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Audit/Popup_picker.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         58┆ require_once($beanFiles[$bean]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         59┆ $focus = new $bean;


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Calendar/CalendarDisplay.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        231┆ $newActivities = unserialize(base64_decode($current_user->getPreference("CalendarActivities")));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Calendar/views/view.createinvitee.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         56┆ require_once($beanFiles[$beanList[$module]]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         57┆ $this->bean = new $beanList[$module]();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Calendar/views/view.savesettings.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         74┆ header("Location: index.php?module=Calendar&action=index&view=".$_REQUEST['view']."&hour=0&day=".$_REQUEST['day']."&month=".$_REQUEST['month']."&year=".$_REQUES ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Calls/CallFormBase.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        449┆ $qU  = 'UPDATE calls_users SET deleted = 0, accept_status = \''.$acceptStatusUsers[$user_id].'\' ';
          ⋮┆----------------------------------------
        472┆ $qU  = 'UPDATE calls_contacts SET deleted = 0, accept_status = \''.$acceptStatusContacts[$contact_id].'\' ';
          ⋮┆----------------------------------------
        494┆ $qU  = 'UPDATE calls_leads SET deleted = 0, accept_status = \''.$acceptStatusLeads[$lead_id].'\' ';


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Calls/Reschedule.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         46┆ $query = 'SELECT date_start FROM calls WHERE id="'.$id.'"';


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Campaigns/GenerateWebToLeadForm.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        106┆ $person = new $typeOfPerson();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Campaigns/QueueCampaign.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        215┆ header($header_URL);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        147┆ $delete_emailman_query="delete from emailman where campaign_id='{$campaign->id}' and marketing_id='{$message_id}' and list_id='{$prospect_list_id}'";
          ⋮┆----------------------------------------
        154┆  ... " SELECT $current_date,'{$current_user->id}',plc.campaign_id,'{$message_id}',plp.prospect_list_id, plp.related_id, plp.related_type,{$send_date_time}"; ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Campaigns/RemoveMe.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         76┆ require_once($beanFiles[$beantype]);
          ⋮┆----------------------------------------
         84┆ require_once($beanFiles[$class]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         77┆ $focus = new $beantype();
          ⋮┆----------------------------------------
         85┆ $mod = new $class();
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         93┆  ... "UPDATE email_addresses SET email_addresses.opt_out = 1 WHERE EXISTS(SELECT 1 FROM email_addr_bean_rel ear WHERE ear.bean_id = '$id' AND ear.deleted=0 AND email ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Campaigns/Tracker.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         83┆ $query = "SELECT tracker_url FROM campaign_trkrs WHERE id='$track'";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Campaigns/WebToLeadCapture.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         76┆ $camp_query  = "select name,id from campaigns where id='$campaign_id'";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Campaigns/WebToPersonCapture.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        354┆ header($_SERVER['SERVER_PROTOCOL'].'201', true, 201);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         75┆ $camp_query = "select name,id from campaigns where id='$campaign_id'";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Campaigns/utils.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        134┆ $ret[$a['id']] = unserialize(base64_decode($a['stored_options']));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Charts/DynamicAction.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         55┆ file_put_contents($filepath, base64_decode($data));
          ⋮┆----------------------------------------
         57┆ unlink($filepath);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         57┆ unlink($filepath);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Charts/code/Chart_my_pipeline_by_sales_stage.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        210┆ if (file_exists($cache_file_name)) {
          ⋮┆----------------------------------------
        211┆ $file_date = $timedate->asUser($timedate->fromTimestamp(filemtime($cache_file_name)));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Charts/code/Chart_outcome_by_month.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        196┆ if (file_exists($cache_file_name)) {
          ⋮┆----------------------------------------
        197┆ $file_date = $timedate->asUser($timedate->fromTimestamp(filemtime($cache_file_name)));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Charts/code/Chart_pipeline_by_sales_stage.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        261┆ if (file_exists($cache_file_name)) {
          ⋮┆----------------------------------------
        262┆ $file_date = $timedate->asUser($timedate->fromTimestamp(filemtime($cache_file_name)));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Configurator/Configurator.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-url-host
        User data flows into the host portion of this manually-constructed URL. This could allow an
        attacker to send data to their own server, potentially exposing sensitive data such as
        cookies or authorization information sent with this request. They could also probe internal
        servers or other resources that the server runnig this code can access. (This is called
        server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an
        allowlist for approved hosts hardcode the correct host.

        392┆ if ($this->saveCompanyLogo("upload://" . $_POST['company_logo']) === false) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Configurator/UploadFileCheck.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         92┆ unlink($file_name);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Configurator/controller.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         78┆ header("Location: $urlSTR");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Configurator/views/view.sugarpdfsettings.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        110┆ $result = $focus->db->query("SELECT count(*) AS the_count FROM config WHERE category = '{$prefix[0]}' AND name = '{$prefix[1]}'");
          ⋮┆----------------------------------------
        113┆ $focus->db->query("DELETE FROM config WHERE category = '{$prefix[0]}' AND name = '{$prefix[1]}'");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         97┆ unlink($cachedfile);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Connectors/Menu.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         60┆ require("custom/modules/{$merge_module}/Menu.php");
          ⋮┆----------------------------------------
         63┆ require("modules/{$merge_module}/Menu.php");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         59┆ if (file_exists("custom/modules/{$merge_module}/Menu.php")) {
          ⋮┆----------------------------------------
         62┆ if (file_exists("modules/{$merge_module}/Menu.php")) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Connectors/controller.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        282┆ if (false === ($result = @file_get_contents($_REQUEST['url']))) {
          ⋮┆----------------------------------------
        527┆ if (!file_exists((string)($dir))) {
          ⋮┆----------------------------------------
        598┆ if (!file_exists((string)($dir))) {
          ⋮┆----------------------------------------
        680┆ if (!file_exists((string)($dir))) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Contacts/AcceptDecline.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         79┆ require_once($beanFiles[$bean]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         80┆ $focus = new $bean;


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Contacts/ContactFormBase.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        557┆ header("Location: index.php?$location");
          ⋮┆----------------------------------------
        592┆ header("Location: index.php?&module=Emails&action=EditView&type=out&inbound_email_id=".$_REQUEST['inbound_email_id']."&parent_id=".$email->parent_id."&parent_ty ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        639┆ header("Location: index.php?".http_build_query($urlData));
          ⋮┆----------------------------------------
        686┆ header("Location: ". $redirect_url);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Contacts/SaveContactOpportunityRelationship.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         76┆ header($header_URL);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Contacts/ShowDuplicates.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        183┆ $input .= '<input type="hidden" name="create" value="'.$_POST['create'].'">';


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Contacts/createPortalUser.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.php-ssrf
        The web server receives a URL or similar request from an upstream component and retrieves
        the contents of this URL, but it does not sufficiently ensure that the request is being sent
        to the expected destination. Dangerous function file_get_contents with payload
        $portalURL.'/index.php?option=com_advancedopenportal&task=create&sug='.$_REQUEST['record']

         40┆ $wbsv = file_get_contents($portalURL.'/index.php?option=com_advancedopenportal&task=create&sug='.$_REQUEST['record']);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         40┆ $wbsv = file_get_contents($portalURL.'/index.php?option=com_advancedopenportal&task=create&sug='.$_REQUEST['record']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Contacts/disablePortalUser.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.php-ssrf
        The web server receives a URL or similar request from an upstream component and retrieves
        the contents of this URL, but it does not sufficiently ensure that the request is being sent
        to the expected destination. Dangerous function file_get_contents with payload $portalURL.'/
        index.php?option=com_advancedopenportal&task=disable_user&sug='.$_REQUEST['record'].'&uid='.
        $bean->joomla_account_id

         40┆ $wbsv = file_get_contents($portalURL.'/index.php?option=com_advancedopenportal&task=disable_user&sug='.$_REQUEST['record'].'&uid='.$bean->joomla_account_id);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         40┆ $wbsv = file_get_contents($portalURL.'/index.php?option=com_advancedopenportal&task=disable_user&sug='.$_REQUEST['record'].'&uid='.$bean->joomla_account_id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Contacts/enablePortalUser.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.php-ssrf
        The web server receives a URL or similar request from an upstream component and retrieves
        the contents of this URL, but it does not sufficiently ensure that the request is being sent
        to the expected destination. Dangerous function file_get_contents with payload $portalURL.'/
        index.php?option=com_advancedopenportal&task=enable_user&sug='.$_REQUEST['record'].'&uid='.$
        bean->joomla_account_id

         40┆ $wbsv = file_get_contents($portalURL.'/index.php?option=com_advancedopenportal&task=enable_user&sug='.$_REQUEST['record'].'&uid='.$bean->joomla_account_id);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         40┆ $wbsv = file_get_contents($portalURL.'/index.php?option=com_advancedopenportal&task=enable_user&sug='.$_REQUEST['record'].'&uid='.$bean->joomla_account_id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Contacts/views/view.retrieveemail.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         73┆ $result = $db->query("SELECT * FROM email_addresses WHERE email_address_caps = '$email' AND deleted = 0");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Contacts/views/view.validportalusername.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         75┆ $result = $this->bean->db->query("Select count(id) as total from contacts where portal_name = '$portalUsername' and deleted='0'");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Currencies/Currency.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        620┆ $html .= '>'. $selectCurrency . '</select>';


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/DocumentRevisions/DocumentRevision.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        180┆  ... "SELECT document_name, revision, document_revision_id FROM documents, document_revisions where documents.id = '".$this->db->quote($this->document_id)."' AND doc ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Documents/Delete.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         76┆ header("Location: index.php?module=".$_REQUEST['return_module']."&action=".$_REQUEST['return_action']."&record=".$_REQUEST['return_id']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Documents/Document.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        203┆ $query="update linked_documents set deleted=1 where id='".$loadSignedIdQuoted."'";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Documents/GetLatestRevision.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         53┆  ... "' where id ='{$_REQUEST['get_latest_for_id']}' "; ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Documents/views/view.extdoc.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        112┆ if (file_exists($tpl_file)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/DynamicFields/DynamicField.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        778┆ unlink($file_loc);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/DynamicFields/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         55┆ require_once("modules/$module/$class_file.php");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         56┆ $mod = new $class_name();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/DynamicFields/templates/Fields/TemplateEnum.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        153┆ $def['dependency'] = isset($this->ext4)? unserialize(html_entity_decode($this->ext4)) : null ;


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/DynamicFields/templates/Fields/TemplateMultiEnum.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        129┆ $unpacked = @unserialize($this->ext4) ;


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/DynamicFields/templates/Fields/TemplateRange.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         79┆ require('modules/'.$module.'/metadata/SearchFields.php');
          ⋮┆----------------------------------------
         83┆ require('custom/modules/'.$module.'/metadata/SearchFields.php');
          ⋮┆----------------------------------------
        130┆ require('modules/'.$module.'/metadata/SearchFields.php');
          ⋮┆----------------------------------------
        134┆ require('custom/modules/'.$module.'/metadata/SearchFields.php');
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         78┆ if (file_exists('modules/'.$module.'/metadata/SearchFields.php')) {
          ⋮┆----------------------------------------
         82┆ if (file_exists('custom/modules/'.$module.'/metadata/SearchFields.php')) {
          ⋮┆----------------------------------------
        111┆ if (!file_exists('custom/modules/'.$module.'/metadata/SearchFields.php')) {
          ⋮┆----------------------------------------
        117┆ if (file_exists($cachefile = sugar_cached("modules/$module/SearchForm_basic.tpl"))) {
          ⋮┆----------------------------------------
        118┆ unlink($cachefile);
          ⋮┆----------------------------------------
        121┆ if (file_exists($cachefile = sugar_cached("modules/$module/SearchForm_advanced.tpl"))) {
          ⋮┆----------------------------------------
        122┆ unlink($cachefile);
          ⋮┆----------------------------------------
        129┆ if (file_exists('modules/'.$module.'/metadata/SearchFields.php')) {
          ⋮┆----------------------------------------
        133┆ if (file_exists('custom/modules/'.$module.'/metadata/SearchFields.php')) {
          ⋮┆----------------------------------------
        157┆ if (!file_exists('custom/modules/'.$module.'/metadata/SearchFields.php')) {
          ⋮┆----------------------------------------
        163┆ if (file_exists($cachefile = sugar_cached("modules/$module/SearchForm_basic.tpl"))) {
          ⋮┆----------------------------------------
        164┆ unlink($cachefile);
          ⋮┆----------------------------------------
        167┆ if (file_exists($cachefile = sugar_cached("modules/$module/SearchForm_advanced.tpl"))) {
          ⋮┆----------------------------------------
        168┆ unlink($cachefile);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        118┆ unlink($cachefile);
          ⋮┆----------------------------------------
        122┆ unlink($cachefile);
          ⋮┆----------------------------------------
        164┆ unlink($cachefile);
          ⋮┆----------------------------------------
        168┆ unlink($cachefile);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/EmailMan/EmailImage.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         61┆ header("Content-Type: {$mime['mime']}");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.php-ssrf
        The web server receives a URL or similar request from an upstream component and retrieves
        the contents of this URL, but it does not sufficiently ensure that the request is being sent
        to the expected destination. Dangerous function readfile with payload
        $GLOBALS['sugar_config']['upload_dir']."/" . $_REQUEST['id']

         56┆ $location = $GLOBALS['sugar_config']['upload_dir']."/" . $_REQUEST['id'];
         57┆ 
         58┆ $mime = getimagesize($location);
         59┆ 
         60┆ if (!empty($mime)) {
         61┆     header("Content-Type: {$mime['mime']}");
         62┆ } else {
         63┆     header("Content-Type: image/png");
         64┆ }
         65┆ 
           [hid 2 additional lines, adjust with --max-lines-per-finding] 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         58┆ $mime = getimagesize($location);
          ⋮┆----------------------------------------
         67┆ readfile($location);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/EmailMan/EmailManDelivery.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        321┆ header($header_URL);
          ⋮┆----------------------------------------
        323┆ header("Location: index.php?module={$_REQUEST['return_module']}&action={$_REQUEST['return_action']}&record={$_REQUEST['return_id']}&from=test");
          ⋮┆----------------------------------------
        326┆ header("Location: index.php?module={$_REQUEST['return_module']}&action={$_REQUEST['return_action']}&record={$_REQUEST['return_id']}");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        209┆  ... "SELECT email_address FROM email_addresses ea JOIN email_addr_bean_rel eabr ON ea.id = eabr.email_address_id JOIN prospect_lists_prospects plp ON eabr.bean_id = ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/EmailMan/views/view.config.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        274┆ foreach (unserialize(base64_decode($sugar_config['email_xss'])) as $k => $v) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/EmailMarketing/Delete.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         67┆ header("Location: index.php?module=".$_REQUEST['return_module']."&action=".$_REQUEST['return_action']."&record=".$_REQUEST['return_id']);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         63┆ $query = "DELETE FROM emailman WHERE marketing_id ='" . $_REQUEST['record'] ."'";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/EmailMarketing/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        150┆ header($header_URL);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/EmailTemplates/AttachFiles.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         83┆ unlink($path);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/EmailTemplates/Delete.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         63┆ header("Location: index.php?module=".$_REQUEST['return_module']."&action=".$_REQUEST['return_action']."&record=".$_REQUEST['return_id']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/EmailTemplates/EmailTemplateData.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        103┆ header('Location: ' . $redirectUrl);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/EmailTemplates/EmailTemplateFormBase.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        393┆ $q = 'UPDATE notes SET deleted = 1 WHERE id = \''.$noteId.'\'';


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Emails/Check.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         58┆ header('Location: index.php?module=Emails&action=ListView&type=inbound&assigned_user_id='.$current_user->id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Emails/Delete.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         72┆ header($loc);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Emails/Email.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

       2483┆ $q = 'UPDATE notes SET deleted = 1 WHERE id = \'' . $noteId . '\'';
          ⋮┆----------------------------------------
       2492┆ $q = 'UPDATE notes SET deleted = 1 WHERE id = \'' . $noteId . '\'';
          ⋮┆----------------------------------------
       2683┆ $q = 'UPDATE notes SET deleted = 1 WHERE id = \'' . $noteId . '\'';
          ⋮┆----------------------------------------
       2692┆ $q = 'UPDATE notes SET deleted = 1 WHERE id = \'' . $noteId . '\'';


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Emails/EmailUI.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

       1620┆ require_once($class);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

       1723┆ if (!is_file(sugar_cached('jsLanguage/') . $_REQUEST['qc_module'] . '/' . $GLOBALS['current_language'] . '.js')) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

       1622┆ $focus = new $bean();
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

       1262┆ unlink($filePath);
          ⋮┆----------------------------------------
       2929┆ unlink($file);
          ⋮┆----------------------------------------
       2939┆ unlink($file);
          ⋮┆----------------------------------------
       2943┆ unlink($file);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

       1558┆ $metaOut = unserialize($cacheFile['out']);
          ⋮┆----------------------------------------
       3391┆ $ret = unserialize($cacheFile[$key]);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Emails/EmailUIAjax.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        225┆ unlink($filePath);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        785┆ $GLOBALS['log']->debug("*** ERROR: tried to delete an email for an account for which {$current_user->full_name} is not the owner!");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        225┆ unlink($filePath);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

       1513┆ $ie->$k = unserialize(base64_decode($ie->$k));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Emails/EmailsController.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        542┆ header('location:index.php?module=Emails&action=DetailView&record=' . $result[0]->id);
          ⋮┆----------------------------------------
        562┆ header('location:index.php?module=Emails&action=DetailView&record=' . $importedEmailId);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Emails/Grab.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         72┆ header('Location: index.php?module=Emails&action=ListView&type=inbound&assigned_user_id='.$current_user->id);
          ⋮┆----------------------------------------
         74┆ header('Location: index.php?module=Emails&action=ListView&show_error=true&type=inbound&assigned_user_id='.$current_user->id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Emails/PessimisticLock.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         87┆ header('Location: index.php?module=Emails&action=DetailView&record='.$next->id);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Emails/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        277┆ header("Location: index.php?module=$return_module&action=ListViewDrafts");
          ⋮┆----------------------------------------
        283┆ header('Location: index.php?module='.$return_module.'&action=index');
          ⋮┆----------------------------------------
        288┆ header('Location: index.php?action='.$return_action.'&module='.$return_module.'&record='.$return_id.'&assigned_user_id='.$current_user->id.'&type=inbound');
          ⋮┆----------------------------------------
        292┆ header("Location: index.php?action=$return_action&module=$return_module&record=$return_id");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Emails/SugarRoutingAsync.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         85┆ require_once("modules/{$_REQUEST['bean']}/{$class}.php");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         86┆ $bean = new $class();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Employees/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         93┆ header("Location: index.php?action=$return_action&module=$return_module&record=$return_id");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Employees/WapAuthenticate.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         58┆ header("Location: ".$GLOBALS['app']->getLoginRedirect());
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        104┆ unlink($tmp_file_name);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/FP_events/controller.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         60┆  ... 'UPDATE fp_events_contacts_c SET invite_status="Invited" WHERE fp_events_contactsfp_events_ida="'.$eventIDQuoted.'" AND fp_events_contactscontacts_idb="'. $db-> ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         63┆  ... 'UPDATE fp_events_leads_1_c SET invite_status="Invited" WHERE fp_events_leads_1fp_events_ida="'.$eventIDQuoted.'" AND fp_events_leads_1leads_idb="'. $db->quote( ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         66┆  ... 'UPDATE fp_events_prospects_1_c SET invite_status="Invited" WHERE fp_events_prospects_1fp_events_ida="'.$eventIDQuoted.'" AND fp_events_prospects_1prospects_idb ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         72┆ $query = 'UPDATE fp_events_contacts_c SET invite_status="Invited" WHERE fp_events_contactsfp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
         75┆ $query2 = 'UPDATE fp_events_leads_1_c SET invite_status="Invited" WHERE fp_events_leads_1fp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
         78┆ $query3 = 'UPDATE fp_events_prospects_1_c SET invite_status="Invited" WHERE fp_events_prospects_1fp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
         95┆  ... 'UPDATE fp_events_contacts_c SET invite_status="Attended" WHERE fp_events_contactsfp_events_ida="'.$eventIDQuoted.'" AND fp_events_contactscontacts_idb="'. $db- ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         98┆  ... 'UPDATE fp_events_leads_1_c SET invite_status="Attended" WHERE fp_events_leads_1fp_events_ida="'.$eventIDQuoted.'" AND fp_events_leads_1leads_idb="'. $db->quote ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        101┆  ... 'UPDATE fp_events_prospects_1_c SET invite_status="Attended" WHERE fp_events_prospects_1fp_events_ida="'.$eventIDQuoted.'" AND fp_events_prospects_1prospects_id ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        107┆ $query = 'UPDATE fp_events_contacts_c SET invite_status="Attended" WHERE fp_events_contactsfp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        110┆ $query2 = 'UPDATE fp_events_leads_1_c SET invite_status="Attended" WHERE fp_events_leads_1fp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        113┆ $query3 = 'UPDATE fp_events_prospects_1_c SET invite_status="Attended" WHERE fp_events_prospects_1fp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        130┆  ... 'UPDATE fp_events_contacts_c SET invite_status="Not Attended" WHERE fp_events_contactsfp_events_ida="'.$eventIDQuoted.'" AND fp_events_contactscontacts_idb="'.  ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        133┆  ... 'UPDATE fp_events_leads_1_c SET invite_status="Not Attended" WHERE fp_events_leads_1fp_events_ida="'.$eventIDQuoted.'" AND fp_events_leads_1leads_idb="'. $db->q ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        136┆  ... 'UPDATE fp_events_prospects_1_c SET invite_status="Not Attended" WHERE fp_events_prospects_1fp_events_ida="'.$eventIDQuoted.'" AND fp_events_prospects_1prospect ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        142┆ $query = 'UPDATE fp_events_contacts_c SET invite_status="Not Attended" WHERE fp_events_contactsfp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        145┆ $query2 = 'UPDATE fp_events_leads_1_c SET invite_status="Not Attended" WHERE fp_events_leads_1fp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        148┆ $query3 = 'UPDATE fp_events_prospects_1_c SET invite_status="Not Attended" WHERE fp_events_prospects_1fp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        165┆  ... 'UPDATE fp_events_contacts_c SET invite_status="Not Invited", email_responded="0" WHERE fp_events_contactsfp_events_ida="'.$eventIDQuoted.'" AND fp_events_conta ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        168┆  ... 'UPDATE fp_events_leads_1_c SET invite_status="Not Invited", email_responded="0" WHERE fp_events_leads_1fp_events_ida="'.$eventIDQuoted.'" AND fp_events_leads_1 ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        171┆  ... 'UPDATE fp_events_prospects_1_c SET invite_status="Not Invited", email_responded="0" WHERE fp_events_prospects_1fp_events_ida="'.$eventIDQuoted.'" AND fp_events ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        177┆ $query = 'UPDATE fp_events_contacts_c SET invite_status="Not Invited", email_responded="0" WHERE fp_events_contactsfp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        180┆ $query2 = 'UPDATE fp_events_leads_1_c SET invite_status="Not Invited", email_responded="0" WHERE fp_events_leads_1fp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        183┆ $query3 = 'UPDATE fp_events_prospects_1_c SET invite_status="Not Invited", email_responded="0" WHERE fp_events_prospects_1fp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        200┆  ... 'UPDATE fp_events_contacts_c SET accept_status="Accepted" WHERE fp_events_contactsfp_events_ida="'.$eventIDQuoted.'" AND fp_events_contactscontacts_idb="'. $db- ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        203┆  ... 'UPDATE fp_events_leads_1_c SET accept_status="Accepted" WHERE fp_events_leads_1fp_events_ida="'.$eventIDQuoted.'" AND fp_events_leads_1leads_idb="'. $db->quote ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        206┆  ... 'UPDATE fp_events_prospects_1_c SET accept_status="Accepted" WHERE fp_events_prospects_1fp_events_ida="'.$eventIDQuoted.'" AND fp_events_prospects_1prospects_id ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        212┆ $query = 'UPDATE fp_events_contacts_c SET accept_status="Accepted" WHERE fp_events_contactsfp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        215┆ $query2 = 'UPDATE fp_events_leads_1_c SET accept_status="Accepted" WHERE fp_events_leads_1fp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        218┆ $query3 = 'UPDATE fp_events_prospects_1_c SET accept_status="Accepted" WHERE fp_events_prospects_1fp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        234┆  ... 'UPDATE fp_events_contacts_c SET accept_status="Declined" WHERE fp_events_contactsfp_events_ida="'.$eventIDQuoted.'" AND fp_events_contactscontacts_idb="'. $db- ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        237┆  ... 'UPDATE fp_events_leads_1_c SET accept_status="Declined" WHERE fp_events_leads_1fp_events_ida="'.$eventIDQuoted.'" AND fp_events_leads_1leads_idb="'. $db->quote ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        241┆  ... 'UPDATE fp_events_prospects_1_c SET accept_status="Declined" WHERE fp_events_prospects_1fp_events_ida="'.$eventIDQuoted.'" AND fp_events_prospects_1prospects_id ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        247┆ $query = 'UPDATE fp_events_contacts_c SET accept_status="Declined" WHERE fp_events_contactsfp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        250┆ $query2 = 'UPDATE fp_events_leads_1_c SET accept_status="Declined" WHERE fp_events_leads_1fp_events_ida="'.$eventIDQuoted.'"';
          ⋮┆----------------------------------------
        253┆ $query3 = 'UPDATE fp_events_prospects_1_c SET accept_status="Declined" WHERE fp_events_prospects_1fp_events_ida="'.$eventIDQuoted.'"';


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/FP_events/responseEntryPoint.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         30┆ header('Location: ' . $url);
          ⋮┆----------------------------------------
         48┆ header('Location: ' . $url);
          ⋮┆----------------------------------------
         71┆ header('Location: ' . $url);
          ⋮┆----------------------------------------
         88┆ header('Location: ' . $url);
          ⋮┆----------------------------------------
        110┆ header('Location: ' . $url);
          ⋮┆----------------------------------------
        128┆ header('Location: ' . $url);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         23┆  ... 'SELECT email_responded FROM fp_events_contacts_c WHERE fp_events_contactsfp_events_ida="'.$event->id.'" AND fp_events_contactscontacts_idb="'.$delegate_id.'"'; ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         26┆  ... 'UPDATE fp_events_contacts_c SET accept_status="Accepted", email_responded="1" WHERE fp_events_contactsfp_events_ida="'.$event->id.'" AND fp_events_contactscont ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         40┆  ... 'SELECT email_responded FROM fp_events_contacts_c WHERE fp_events_contactsfp_events_ida="'.$event->id.'" AND fp_events_contactscontacts_idb="'.$delegate_id.'"'; ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         43┆  ... 'UPDATE fp_events_contacts_c SET accept_status="Declined", email_responded="1" WHERE fp_events_contactsfp_events_ida="'.$event->id.'" AND fp_events_contactscont ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         63┆  ... 'SELECT email_responded FROM fp_events_prospects_1_c WHERE fp_events_prospects_1fp_events_ida="'.$event->id.'" AND fp_events_prospects_1prospects_idb="'.$delega ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         67┆  ... 'UPDATE fp_events_prospects_1_c SET accept_status="Accepted", email_responded="1" WHERE fp_events_prospects_1fp_events_ida="'.$event->id.'" AND fp_events_prospe ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         81┆  ... 'SELECT email_responded FROM fp_events_prospects_1_c WHERE fp_events_prospects_1fp_events_ida="'.$event->id.'" AND fp_events_prospects_1prospects_idb="'.$delega ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
         84┆  ... 'UPDATE fp_events_prospects_1_c SET accept_status="Declined", email_responded="1" WHERE fp_events_prospects_1fp_events_ida="'.$event->id.'" AND fp_events_prospe ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        103┆  ... 'SELECT email_responded FROM fp_events_leads_1_c WHERE ffp_events_leads_1fp_events_ida="'.$event->id.'" AND fp_events_leads_1leads_idb="'.$delegate_id.'"'; ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        106┆  ... 'UPDATE fp_events_leads_1_c SET accept_status="Accepted", email_responded="1" WHERE fp_events_leads_1fp_events_ida="'.$event->id.'" AND fp_events_leads_1leads_i ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        120┆  ... 'SELECT email_responded FROM fp_events_leads_1_c WHERE fp_events_leads_1fp_events_ida="'.$event->id.'" AND fp_events_leads_1leads_idb="'.$delegate_id.'"'; ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        123┆  ... 'UPDATE fp_events_leads_1_c SET accept_status="Declined", email_responded="1" WHERE fp_events_leads_1fp_events_ida="'.$event->id.'" AND fp_events_leads_1leads_i ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Groups/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         90┆ header("Location: index.php?action=$return_action&module=$return_module&record=$return_id");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Home/SubpanelCreates.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         50┆ require_once('modules/' . $target_module . '/' . $target_module . 'QuickCreate.php');
          ⋮┆----------------------------------------
         65┆ require_once('custom/' . $subpanelView);
          ⋮┆----------------------------------------
         74┆ require_once($subpanelView);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         47┆ if (file_exists('modules/'. $_REQUEST['target_module'] . '/EditView.php')) {
          ⋮┆----------------------------------------
         49┆ if (is_file('modules/' . $target_module . '/' . $target_module . 'QuickCreate.php')) { // if there is a quickcreate override
          ⋮┆----------------------------------------
         64┆ if (file_exists('custom/' . $subpanelView)) {
          ⋮┆----------------------------------------
         73┆ if (file_exists($subpanelView)) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         52┆ $editview          = new $editviewClass($target_module, 'modules/' . $target_module . '/tpls/' . $tpl);
          ⋮┆----------------------------------------
         71┆ $sqc  = new $subpanelClass($target_module, $view);
          ⋮┆----------------------------------------
         76┆ $sqc  = new $subpanelClass($target_module, $view);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Home/SubpanelEdits.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         51┆ require_once('modules/' . $target_module . '/' . $target_module . 'QuickCreate.php');
          ⋮┆----------------------------------------
         66┆ require_once('custom/' . $subpanelView);
          ⋮┆----------------------------------------
         71┆ require_once($subpanelView);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         48┆ if (file_exists('modules/'. $_REQUEST['target_module'] . '/EditView.php')) {
          ⋮┆----------------------------------------
         50┆ if (is_file('modules/' . $target_module . '/' . $target_module . 'QuickCreate.php')) { // if there is a quickcreate override
          ⋮┆----------------------------------------
         65┆ if (file_exists('custom/' . $subpanelView)) {
          ⋮┆----------------------------------------
         70┆ if (file_exists($subpanelView)) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         53┆ $editview          = new $editviewClass($target_module, 'modules/' . $target_module . '/tpls/' . $tpl);
          ⋮┆----------------------------------------
         68┆ $sqc  = new $subpanelClass($target_module, $view);
          ⋮┆----------------------------------------
         73┆ $sqc  = new $subpanelClass($target_module, $view);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Home/UnifiedSearchAdvanced.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        240┆ require_once $beanFiles[$beanName] ;
          ⋮┆----------------------------------------
        248┆ require('modules/'.$seed->module_dir.'/metadata/listviewdefs.php');
          ⋮┆----------------------------------------
        252┆ require('custom/modules/'.$seed->module_dir.'/metadata/listviewdefs.php');
          ⋮┆----------------------------------------
        297┆ require_once $beanFiles[$beanName] ;
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        251┆ if (file_exists('custom/modules/'.$seed->module_dir.'/metadata/listviewdefs.php')) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        241┆ $seed = new $beanName();
          ⋮┆----------------------------------------
        298┆ $seed = new $beanName();
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        552┆ unlink($cache_search);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Home/controller.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        123┆ require_once($beanFiles[$beanList[$_REQUEST['current_module']]]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        124┆ $focus = new $beanList[$_REQUEST['current_module']];


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Home/views/view.additionaldetailsretrieve.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         72┆ require_once($beanFiles[$beanName]);
          ⋮┆----------------------------------------
         73┆ require_once($additionalDetailsFile);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         67┆ empty($id) || !is_file($additionalDetailsFile)) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         78┆ $bean = new $beanName();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Import/ImportCacheFiles.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        211┆ unlink("$importdir/$file");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Import/Importer.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        254┆ $emailres = $focus->db->query("SELECT opt_out, invalid_email FROM email_addresses WHERE email_address = '".$focus->db->quote($rowValue)."'");
          ⋮┆----------------------------------------
        358┆ $query = "SELECT * FROM {$focus->table_name} WHERE id='".$focus->db->quote($focus->id)."'";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Import/sources/ImportFile.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        170┆ unlink($this->_sourcename);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Import/views/view.confirm.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-url-host
        User data flows into the host portion of this manually-constructed URL. This could allow an
        attacker to send data to their own server, potentially exposing sensitive data such as
        cookies or authorization information sent with this request. They could also probe internal
        servers or other resources that the server runnig this code can access. (This is called
        server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an
        allowlist for approved hosts hardcode the correct host.

        106┆ $uploadFileName = "upload://".basename($_REQUEST['tmp_file']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Import/views/view.dupcheck.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-url-host
        User data flows into the host portion of this manually-constructed URL. This could allow an
        attacker to send data to their own server, potentially exposing sensitive data such as
        cookies or authorization information sent with this request. They could also probe internal
        servers or other resources that the server runnig this code can access. (This is called
        server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an
        allowlist for approved hosts hardcode the correct host.

        108┆ $uploadFileName = "upload://".basename($_REQUEST['tmp_file']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Import/views/view.last.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        131┆ $this->bean = new $beanname;


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Import/views/view.step3.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        110┆ $mapping_file = new $classname;


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Import/views/view.step4.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-url-host
        User data flows into the host portion of this manually-constructed URL. This could allow an
        attacker to send data to their own server, potentially exposing sensitive data such as
        cookies or authorization information sent with this request. They could also probe internal
        servers or other resources that the server runnig this code can access. (This is called
        server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an
        allowlist for approved hosts hardcode the correct host.

         73┆ $uploadFile = "upload://".basename($_REQUEST['tmp_file']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/InboundEmail/AOPInboundEmail.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        150┆ $storedOptions = unserialize(base64_decode($this->stored_options));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/InboundEmail/Delete.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         55┆ header("Location: index.php?module=".$_REQUEST['return_module']."&action=".$_REQUEST['return_action']."&record=".$_REQUEST['return_id']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/InboundEmail/DetailView.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        138┆ $storedOptions = unserialize(base64_decode($focus->stored_options));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/InboundEmail/EditView.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        149┆ $storedOptions = unserialize(base64_decode($focus->stored_options));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/InboundEmail/InboundEmail.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        873┆ if (!unlink($file)) {
          ⋮┆----------------------------------------
       1538┆ unlink($cacheFilePath);
          ⋮┆----------------------------------------
       1855┆ unlink($cacheFilePath);
          ⋮┆----------------------------------------
       2172┆ if (!unlink($file)) {
          ⋮┆----------------------------------------
       2418┆ unlink($file);
          ⋮┆----------------------------------------
       7225┆ if (!unlink($msgCacheFile)) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

       1450┆ $diff = unserialize($data);
          ⋮┆----------------------------------------
       1913┆ $results = unserialize($data);
          ⋮┆----------------------------------------
       7109┆ $metaOut = unserialize($cacheFile['out']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/InboundEmail/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        392┆ header($redirectUrl);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        222┆ $foldersFound = $focus->db->query('SELECT id FROM folders WHERE folders.id LIKE "'.$focus->id.'"');
          ⋮┆----------------------------------------
        303┆ $foldersFound = $focus->db->query('SELECT * FROM folders WHERE folders.id LIKE "'.$focus->id.'" OR '.


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/LabelEditor/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         70┆ header("Location:$location");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Leads/LeadFormBase.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        361┆ header("Location: index.php?$location");
          ⋮┆----------------------------------------
        425┆ header("Location: index.php?&module=Emails&action=EditView&type=out&inbound_email_id=".urlencode($_REQUEST['inbound_email_id'])."&parent_id=".$email->parent_id. ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Leads/views/view.convertlead.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        548┆ if (($lead->photo === $beans['Contacts']->photo) && is_readable('upload/' . $lead->id . '_photo')) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Leads/views/view.showduplicates.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        173┆ $input .= '<input type="hidden" name="create" value="'.$_POST['create'].'">';


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MailMerge/MailMerge.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         91┆ unlink($this->mm_data_dir.'/Temp/'.$this->datasource_file);
          ⋮┆----------------------------------------
         92┆ unlink($this->mm_data_dir.'/Temp/'.$this->header_file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MailMerge/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         58┆ require_once($includedir);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         88┆ header("Location: index.php?module=MailMerge&action=Step4&file=" . urlencode($file));
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         59┆ $seed = new $class_name();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MailMerge/Step1.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        149┆ require_once($includedir);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        150┆ $seed = new $class_name();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MailMerge/Step2.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        110┆ $step_txt .= "Select list of ".$_SESSION['MAILMERGE_MODULE']." to merge.";
          ⋮┆----------------------------------------
        133┆  ... '<table><tr><td>'.$mod_strings['LBL_CONTAINS_CONTACT_INFO'].'</td><td><select id="contains_contact_info" name="contains_contact_info">'.get_select_options_with_ ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MailMerge/Step3.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        117┆ require_once($beanFiles[$class_name]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        118┆ $seed = new $class_name();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MailMerge/Step4.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        105┆ require_once($beanFiles[$class_name]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        107┆ $seed = new $class_name();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MailMerge/Step5.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         58┆ unlink($file);
          ⋮┆----------------------------------------
         59┆ if (file_exists($rtfFile)) {
          ⋮┆----------------------------------------
         60┆ unlink($rtfFile);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         58┆ unlink($file);
          ⋮┆----------------------------------------
         60┆ unlink($rtfFile);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MailMerge/get_doc.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         56┆ header("Content-Length: " . filesize($local_location));
          ⋮┆----------------------------------------
         57┆ header("Content-disposition: attachment; filename=\"".$name."\";");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MailMerge/index.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         54┆ include('modules/MailMerge/Step'. (int)$step . '.php');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Meetings/JoinExternalMeeting.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         55┆  ... "SELECT id FROM meetings_users WHERE meeting_id = '".$db->quote($_REQUEST['meeting_id'])."' AND user_id = '".$current_user->id."' AND deleted = 0", true); ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Meetings/Meeting.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        740┆ return unlink($path);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Meetings/MeetingFormBase.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        422┆ $qU  = 'UPDATE meetings_users SET deleted = 0, accept_status = \''.$acceptStatusUsers[$user_id].'\' ';
          ⋮┆----------------------------------------
        446┆ $qU  = 'UPDATE meetings_contacts SET deleted = 0, accept_status = \''.$acceptStatusContacts[$contact_id].'\' ';
          ⋮┆----------------------------------------
        469┆ $qU  = 'UPDATE meetings_leads SET deleted = 0, accept_status = \''.$acceptStatusLeads[$lead_id].'\' ';


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MergeRecords/SaveMerge.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        174┆ header("Location: index.php?action=$return_action&module=$return_module&record=$return_id");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MergeRecords/Step2.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        105┆ require_once('custom/modules/'.$module.'/metadata/metafiles.php');
          ⋮┆----------------------------------------
        111┆ require_once('modules/'.$module.'/metadata/metafiles.php');
          ⋮┆----------------------------------------
        121┆ require_once($metadataFile);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        100┆ if (file_exists('custom/modules/' . $module. '/metadata/listviewdefs.php')) {
          ⋮┆----------------------------------------
        104┆ if (file_exists('custom/modules/'.$module.'/metadata/metafiles.php')) {
          ⋮┆----------------------------------------
        110┆ } elseif (file_exists('modules/'.$module.'/metadata/metafiles.php')) {
          ⋮┆----------------------------------------
        118┆ if (!$foundViewDefs && file_exists('modules/'.$module.'/metadata/listviewdefs.php')) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MergeRecords/index.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         69┆ require_once($beanFiles[$bean]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         70┆ $focus = new $bean();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ModuleBuilder/MB/MBModule.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        513┆ unlink($path . '/metadata/studio.php') ;


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ModuleBuilder/MB/MBPackage.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        332┆ header('Location:' . $zipDir . '/' . $this->name . $date . '.zip');
          ⋮┆----------------------------------------
        703┆ header('Location:' . $zipDir . '/' . $this->name . $date . '.zip');
          ⋮┆----------------------------------------
       1066┆ header('Location:' . $zipDir . '/project_' . $this->name . $date . '.zip');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ModuleBuilder/controller.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        395┆ require_once($GLOBALS [ 'beanFiles' ] [ $class_name ]) ;
          ⋮┆----------------------------------------
        604┆ require_once($GLOBALS [ 'beanFiles' ] [ $class_name ]) ;
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        396┆ $mod = new $class_name() ;
          ⋮┆----------------------------------------
        605┆ $seed = new $class_name() ;


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ModuleBuilder/parsers/ModuleBuilderParser.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        120┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ModuleBuilder/parsers/parser.label.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        290┆ include $extension_filename;
          ⋮┆----------------------------------------
        334┆ include $relationships_filename;
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.php-ssrf
        The web server receives a URL or similar request from an upstream component and retrieves
        the contents of this URL, but it does not sufficiently ensure that the request is being sent
        to the expected destination. Dangerous function fopen with payload
        "$extension_basepath/$language.custom".$_POST[relationship_name].'.php'

        285┆ $extension_filename = "$extension_basepath/$language.custom".$_POST[relationship_name].'.php';
        286┆ 
        287┆ $mod_strings = array();
        288┆ if (file_exists($extension_filename)) {
        289┆     // obtain $mod_strings
        290┆     include $extension_filename;
        291┆ }
        292┆ 
        293┆ foreach ($labels as $key => $value) {
        294┆     foreach ($mod_strings as $key_mod_string => $value_mod_string) {
           [hid 23 additional lines, adjust with --max-lines-per-finding] 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.php-ssrf
        The web server receives a URL or similar request from an upstream component and retrieves
        the contents of this URL, but it does not sufficiently ensure that the request is being sent
        to the expected destination. Dangerous function fopen with payload
        "$relationships_basepath/".$_POST[lhs_module].'.php'

        329┆ $relationships_filename = "$relationships_basepath/".$_POST[lhs_module].'.php';
        330┆ 
        331┆ $mod_strings = array();
        332┆ if (file_exists($relationships_filename)) {
        333┆     // obtain $mod_strings
        334┆     include $relationships_filename;
        335┆ }
        336┆ 
        337┆ $changed_mod_strings = false;
        338┆ foreach ($labels as $key => $value) {
           [hid 27 additional lines, adjust with --max-lines-per-finding] 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        288┆ if (file_exists($extension_filename)) {
          ⋮┆----------------------------------------
        311┆ $file_contents = fopen($extension_filename, 'wb');
          ⋮┆----------------------------------------
        332┆ if (file_exists($relationships_filename)) {
          ⋮┆----------------------------------------
        358┆ $file_contents = fopen($relationships_filename, 'wb');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ModuleBuilder/parsers/views/AbstractMetaDataImplementation.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        338┆ unlink($filename);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ModuleBuilder/parsers/views/DeployedMetaDataImplementation.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        344┆ unlink($this->getFileName($this->_view, $this->_moduleName, null, MB_WORKINGMETADATALOCATION));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ModuleBuilder/parsers/views/History.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        199┆ if (!unlink($this->getFileByTimestamp($timestamp))) {
          ⋮┆----------------------------------------
        208┆ unlink($this->_previewFilename);
          ⋮┆----------------------------------------
        239┆ unlink($this->_previewFilename);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ModuleBuilder/views/view.labels.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        147┆ include($langfile);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        146┆ if (is_file($langfile)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ModuleBuilder/views/view.modulefields.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        142┆ include($this->mbModule->path .'/language/'.$current_language.'.lang.php');
          ⋮┆----------------------------------------
        145┆ include($this->mbModule->path .'/language/en_us.lang.php');
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        141┆ if (file_exists($this->mbModule->path. '/language/'.$current_language.'.lang.php')) {
          ⋮┆----------------------------------------
        144┆ } elseif (file_exists($this->mbModule->path. '/language/en_us.lang.php')) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ModuleBuilder/views/view.resetmodule.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        186┆ unlink($file);
          ⋮┆----------------------------------------
        235┆ unlink($languageDir . "/" . $langFile);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MySettings/LoadTabSubpanels.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         58┆ require_once($beanFiles[$class]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         59┆ $focus = new $class();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/MySettings/TabController.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         81┆ $tabs = unserialize($tabs);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Notes/Note.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        143┆ if (!unlink($removeFile)) {
          ⋮┆----------------------------------------
        166┆ if (!unlink($removeFile)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Project/Delete.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         88┆ header("Location: $return_location");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Project/Project.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        164┆ $accountId = $this->db->getOne('SELECT account_id FROM accounts_contacts WHERE contact_id=' . $this->db->quoted($new_rel_id));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Project/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        133┆ header("Location: index.php?action=ProjectTemplatesDetailView&module=Project&record=$return_id&return_module=Project&return_action=ProjectTemplatesEditView");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         63┆ $query = "SELECT id FROM project_task WHERE project_id = '" . $base_project_id . "' AND deleted = 0";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Project/controller.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        210┆ $query = "SELECT COUNT(*) FROM project_task WHERE project_id = '{$project_id}' AND deleted = '0'";
          ⋮┆----------------------------------------
        242┆ $query = "SELECT date_finish FROM project_task WHERE id = '{$id}'";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ProjectTask/Delete.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         89┆ header("Location: $return_location");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ProjectTask/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        102┆ header("Location: index.php?module=$return_module&action=$return_action&record=$return_id");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ProspectLists/Delete.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         62┆ header("Location: index.php?module=".$_REQUEST['return_module']."&action=".$_REQUEST['return_action']."&record=".$_REQUEST['return_id']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/ProspectLists/Duplicate.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         72┆ header("Location: index.php?action=DetailView&module=ProspectLists&record=$return_id");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         62┆ $query  = "select * from prospect_lists_prospects where prospect_list_id = '". $focus->db->quote($_POST['record']) ."'";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Prospects/Delete.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         63┆ header("Location: index.php?module=".$_REQUEST['return_module']."&action=".$_REQUEST['return_action']."&record=".$_REQUEST['return_id']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Prospects/ProspectFormBase.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        520┆ header("Location: index.php?$get");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        512┆ $get .= '&create='.$_POST['create'];


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Relationships/Relationship.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        250┆ unlink($filename);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Relationships/views/view.editfields.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         58┆ $link = new Link($this->rel, new $beanName(), array());


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Releases/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         98┆ header("Location: index.php?action=$return_action&module=$return_module&record=$return_id$edit");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Roles/Delete.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         58┆ header("Location: index.php?module=".$_REQUEST['return_module']."&action=".$_REQUEST['return_action']."&record=".$_REQUEST['return_id']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Roles/DeleteUserRelationship.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         60┆ header($header_URL);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Roles/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         98┆ header("Location: index.php?action=$return_action&module=$return_module&record=$return_id");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/SavedSearch/SavedSearch.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        325┆ $contents = unserialize(base64_decode($row['contents']));
          ⋮┆----------------------------------------
        491┆ $this->contents = unserialize(base64_decode($this->contents));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/SavedSearch/UpgradeSavedSearch.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         52┆ $contents = unserialize(base64_decode($focus->contents));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/SavedSearch/index.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         74┆ header("Location: index.php?action=index&module={$_REQUEST['search_module']}&searchFormTab={$searchFormTab}&query=true&clear_query=true$ajaxLoad");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Schedulers/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        144┆ header("Location: index.php?action=$return_action&module=$return_module&record=$return_id&$edit");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/SecurityGroups/MassAssign.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         24┆ require_once($GLOBALS['beanFiles'][$class]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        128┆ header("Location: index.php?action={$_POST['return_action']}&module={$_POST['return_module']}");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         25┆ $sugarbean = new $class();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/SecurityGroups/SaveConfig.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         91┆ header("Location: index.php?action={$_POST['return_action']}&module={$_POST['return_module']}");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/SecurityGroups/SaveSecurityGroupUserRelationship.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         61┆ header($header_URL);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Studio/SaveTabs.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         51┆ header('Location: index.php?module=Studio&action=TabGroups&lang='.$_POST['grouptab_lang']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Studio/wizard.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         53┆ require_once('modules/Studio/wizards/'. $wizard . '.php');
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         52┆ if (file_exists('modules/Studio/wizards/'. $wizard . '.php')) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         54┆ $thewiz = new $wizard();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/SugarFeed/SugarFeed.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        125┆ unlink($cachefile);
          ⋮┆----------------------------------------
        130┆ unlink($cachefile);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/SugarFeed/linkHandlers/Image.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

         50┆ $imageData = unserialize(base64_decode($data['LINK_URL']));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Surveys/Entry/SurveySubmit.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        146┆ header('Location: index.php?entryPoint=surveyThanks&name=' . $survey->name);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Tasks/Save.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        138┆ header("Location: index.php?&module=Emails&action=EditView&type=out&inbound_email_id=".$_REQUEST['inbound_email_id']."&parent_id=".$email->parent_id."&parent_ty ... [0m
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/UpgradeRemoval.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        101┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/UploadFileCheck.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

         65┆ if (file_exists($file_name)) {
          ⋮┆----------------------------------------
         66┆ $filesize = filesize($file_name);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/cancel.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         52┆ @unlink(isset($_SESSION['install_file']));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/commit.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        238┆ include $file;
          ⋮┆----------------------------------------
        310┆ include $file;
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        102┆ if (!isset($_SESSION['install_file']) || empty($_SESSION['install_file']) || !is_file($_SESSION['install_file'])) {
          ⋮┆----------------------------------------
        192┆ if (!isset($_SESSION['unzip_dir']) || !file_exists($_SESSION['unzip_dir'])
          ⋮┆----------------------------------------
        193┆ || !isset($_SESSION['install_file']) || empty($_SESSION['install_file']) || !file_exists($_SESSION['install_file'])
          ⋮┆----------------------------------------
        236┆ if (is_file($file)) {
          ⋮┆----------------------------------------
        306┆ if (is_file($file)) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        259┆ unlink($file);
          ⋮┆----------------------------------------
        365┆ unlink($file);
          ⋮┆----------------------------------------
        379┆ unlink($file);
          ⋮┆----------------------------------------
        656┆ unlink($styleJSFilePath);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/deleteCache.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         62┆ unlink($file);
          ⋮┆----------------------------------------
         73┆ unlink($file);
          ⋮┆----------------------------------------
         84┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/index.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        291┆ require('modules/UpgradeWizard/' . $upgradeStepFile . '.php');
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        537┆ header('Location: ' . $_SERVER['HTTP_REFERER'] . '?module=UpgradeWizard&action=index&step=4&additional_step=true');
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        147┆ if (is_dir($delete_dir) && !@rmdir_recursive($delete_dir)) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        134┆ logThis('ERROR: trying to delete non-existent file: ['.$_REQUEST['install_file'].']');
          ⋮┆----------------------------------------
        141┆ logThis('ERROR: could not delete: '.$delete_me);
          ⋮┆----------------------------------------
        148┆ logThis('ERROR: could not delete: '.$delete_dir);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        140┆ if (is_file($delete_me) && !@unlink($delete_me)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/layouts.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        165┆ @unlink($srcFile);
          ⋮┆----------------------------------------
        169┆ @unlink($srcBackupFile);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/silentUpgrade.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.exec-use
        Executing non-constant commands. This can lead to command injection.

         95┆ passthru($step1, $output);
          ⋮┆----------------------------------------
        104┆ passthru($step2, $output);
          ⋮┆----------------------------------------
        107┆ passthru($step2, $output);
          ⋮┆----------------------------------------
        115┆ passthru($step3, $output);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/silentUpgrade_dce_step1.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         74┆ unlink($thedir . "/" . $children);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/silentUpgrade_dce_step2.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         60┆ unlink($thedir . "/" . $children);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/silentUpgrade_step1.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.exec-use
        Executing non-constant commands. This can lead to command injection.

        766┆ executeConvertTablesSql($_SESSION['allTables']);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

         77┆ unlink($thedir . '/' . $children);
          ⋮┆----------------------------------------
        704┆ unlink($file);
          ⋮┆----------------------------------------
        881┆ unlink($file);
          ⋮┆----------------------------------------
        893┆ unlink($file);
          ⋮┆----------------------------------------
        905┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/silentUpgrade_step2.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        365┆ unlink($file);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/upgradeMetaHelper.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.md5-loose-equality
        Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type
        juggling issues

        204┆ if (md5($fileContents) == $md5_string['./'.$file]) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/upload.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-filename
        File name based on user input risks server-side request forgery.

        120┆ if (is_file($manifest_file)) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        205┆ logThis('ERROR: trying to delete non-existent file: ['.$_REQUEST['install_file'].']');
          ⋮┆----------------------------------------
        215┆ logThis('ERROR: could not delete ['.$delete_me.']');
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        211┆ if (@unlink($delete_me)) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/uw_ajax.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.exec-use
        Executing non-constant commands. This can lead to command injection.

         92┆ executeConvertTablesSql($persistence['allTables']);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UpgradeWizard/uw_utils.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.md5-loose-equality
        Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type
        juggling issues

        571┆ if (md5($fileContents) == $md5_string['./'.$file]) {
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

       2764┆ logThis('ERROR: trying to delete non-existent file: ['.$_REQUEST['install_file'].']');
          ⋮┆----------------------------------------
       2773┆ logThis('ERROR: could not delete ['.$delete_me.']');
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        277┆ unlink($cur);
          ⋮┆----------------------------------------
        352┆ unlink($f);
          ⋮┆----------------------------------------
        475┆ unlink($path);
          ⋮┆----------------------------------------
        572┆ unlink($file);
          ⋮┆----------------------------------------
        666┆ unlink($file);
          ⋮┆----------------------------------------
        679┆ unlink($file);
          ⋮┆----------------------------------------
        690┆ unlink($file);
          ⋮┆----------------------------------------
       1994┆ unlink($upgrade_progress_file);
          ⋮┆----------------------------------------
       2337┆ return @unlink($folder);
          ⋮┆----------------------------------------
       2371┆ @unlink($cacheFile);
          ⋮┆----------------------------------------
       2769┆ if (@unlink($delete_me)) {
          ⋮┆----------------------------------------
       4008┆ unlink($the_file);
          ⋮┆----------------------------------------
       4339┆ unlink($cacheFile);
          ⋮┆----------------------------------------
       4428┆ unlink($cachefile);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

       3898┆ $content = unserialize(base64_decode($row['contents']));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/UserPreferences/UserPreference.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

        242┆ $_SESSION[$user->user_name . '_PREFERENCES'][$category] = unserialize(base64_decode($row['contents']));
          ⋮┆----------------------------------------
        243┆ $user->user_preferences[$category] = unserialize(base64_decode($row['contents']));
          ⋮┆----------------------------------------
        436┆ $prefs = unserialize(base64_decode($row['user_preferences']));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Users/Authenticate.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        111┆ header($url);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Users/Changenewpassword.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

         74┆ $Q = "SELECT * FROM users_password_link WHERE id = '" . $db->quote($_REQUEST['guid']) . "' AND COALESCE(deleted, 0) = '0'";
          ⋮┆----------------------------------------
        118┆ $query2 = "UPDATE users_password_link SET deleted='1' where id='" . $db->quote($_REQUEST['guid']) . "'";
          ⋮┆----------------------------------------
        141┆ $query2 = "UPDATE users_password_link SET deleted='1' where id='" . $db->quote($_REQUEST['guid']) . "'";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Users/LoggedOut.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

         47┆ header('Location: ' . $GLOBALS['app']->getLoginRedirect());


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Users/authentication/LDAPAuthenticate/LDAPAuthenticateUser.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.ldap-bind-without-password
        Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements.
        Consider enforcing authentication for LDAP.

        387┆ $bind = @ldap_bind($ldapconn);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Users/authentication/SugarAuthenticate/SugarAuthenticate.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        241┆ header("Location: index.php?action=Login&module=Users" . $GLOBALS['app']->getLoginRedirect());
          ⋮┆----------------------------------------
        460┆ header("Location: ".$GLOBALS['app']->getLoginRedirect());
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        178┆ unlink($tmp_file_name);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/Users/reassignUserRecords.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

        287┆ require_once($beanFiles[$module]);
          ⋮┆----------------------------------------
        414┆ require_once($beanFiles[$module]);
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

        288┆ $object = new $module();
          ⋮┆----------------------------------------
        416┆ $bean = new $module();
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        255┆ $query = "select user_name, id from users where id in ('$fromUserNameQuoted', '$toUserNameQuoted')";
          ⋮┆----------------------------------------
        353┆ $countquery = "select count(*) AS count from $q_tables $q_where";


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/iCals/HTTP_WebDAV_Server_iCal.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        218┆ header('Content-Type: text/calendar; charset="' . $this->cal_charset . '"');
          ⋮┆----------------------------------------
        256┆ header("HTTP/$this->http_spec $status");
          ⋮┆----------------------------------------
        257┆ header("X-WebDAV-Status: $status", true);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/jjwg_Maps/controller.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        465┆ header("Content-Disposition: attachment; filename=\"$filename\"");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-sql-string
        User data flows into this manually-constructed SQL string. User data can be safely inserted
        into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-
        constructed SQL strings is a possible indicator of SQL injection, which could let an
        attacker steal or manipulate data from the database. Instead, use prepared statements
        (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a safe library.

        766┆ $query = str_replace('SELECT ', 'SELECT (' . $calc_distance_expression . ') AS display_object_distance, ', $query);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/modules/vCals/HTTP_WebDAV_Server_vCal.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        104┆ header('WWW-Authenticate: Basic realm="'.($this->http_auth_realm).'"');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/pdf.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         56┆ require_once($GLOBALS['beanFiles'][$entity]);
          ⋮┆----------------------------------------
         60┆ include("modules/$currentModule/$action.php");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.tainted-object-instantiation
        <- A new object is created where the class name is based on user input. This could lead to
        remote code execution, as it allows to instantiate any class in the application.

         57┆ $GLOBALS['focus'] = new $entity();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/service/core/SugarRestService.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.file-inclusion
        Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote
        file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to
        sensitive files being obtained by attackers. Instead, explicitly specify what to include. If
        that is not a viable solution, validate user input thoroughly.

         99┆ require_once('service/core/REST/'. $this->serverClass . '.php');


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/service/example/Rest_Proxy.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.non-literal-header
        Using user input when setting headers with `header()` is potentially dangerous. This could
        allow an attacker to inject a new line and add a new header into the response. This is
        called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\s]+'.

        107┆ header($header);
          ⋮┆----------------------------------------
        110┆ header('Content-Length: ' . strlen($result[1]));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/service/v3_1/SugarWebServiceUtilv3_1.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unlink-use
        Using user input when deleting files with `unlink()` is potentially dangerous. A malicious
        actor could use this to modify or access files they have no right to.

        356┆ @unlink($filename);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/salesagility.SuiteCRM/soap/SoapHelperFunctions.php 
     home.rtz.github_vuln_research.my_semgrep_rules.php_semgrep_rules.unserialize-use
        Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
        Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).

       1143┆ return unserialize(base64_decode($object));
