
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/integration-test/java/com/dotcms/rest/DummyResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

         14┆     @POST
         15┆ 	@Path("/postauth")
         16┆ 	public String doPostAuthentication(@Context HttpServletRequest request, @FormParam("user") String user, @FormParam("password") String password) {
         17┆         webResource.init("user/" + user + "/password/" + password, true, request, true, null);
         18┆         return "success";
         19┆ 	}


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.object-deserialization
        Found object deserialization using ObjectInputStream. Deserializing entire Java objects is
        dangerous because malicious actors can create Java object streams with unintended
        consequences. Ensure that the objects being deserialized are not user-controlled. If this
        must be done, consider using HMACs to sign the data stream to make sure it is not tampered
        with, or consider only transmitting object fields and populating a new object.

        861┆ try(ObjectInputStream inputStream = new ObjectInputStream(fileInputStream)){


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/integration-test/java/com/ettrema/httpclient/RespUtils.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.owasp.java.xxe.org.jdom2.input.SAXBuild
     er
        SAXBuilder being instantiated without calling the setFeature functions that are generally
        used for disabling entity processing

         97┆ SAXBuilder builder = new SAXBuilder();
          ⋮┆----------------------------------------
         97┆ SAXBuilder builder = new SAXBuilder();
         98┆ builder.setExpandEntities(false);
         99┆ return builder.build(bin);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/auth/providers/saml/v1/DotSamlResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        298┆ @POST
        299┆ @Path("/logout/{idpConfigId}")
        300┆ @NoCache
        301┆ @Produces({MediaType.TEXT_HTML, MediaType.APPLICATION_XHTML_XML})
        302┆ // Login configuration by id
        303┆ public void logoutPost(@PathParam("idpConfigId") final String idpConfigId,
        304┆ 				   @Context final HttpServletRequest httpServletRequest,
        305┆ 				   @Context final HttpServletResponse httpServletResponse) throws IOException, URISyntaxException {
        306┆ 
        307┆ 	if (DotSamlProxyFactory.getInstance().isAnyHostConfiguredAsSAML()) {
           [hid 26 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/cache/lettuce/DotObjectCodec.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.object-deserialization
        Found object deserialization using ObjectInputStream. Deserializing entire Java objects is
        dangerous because malicious actors can create Java object streams with unintended
        consequences. Ensure that the objects being deserialized are not user-controlled. If this
        must be done, consider using HMACs to sign the data stream to make sure it is not tampered
        with, or consider only transmitting object fields and populating a new object.

         31┆ try (ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes.array()))){


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/dotpubsub/PostgresPubSubImpl.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

        170┆ stmt.execute("LISTEN " + topic.toString().toLowerCase());
          ⋮┆----------------------------------------
        177┆ stmt.execute("UNLISTEN " + topic.toString().toLowerCase());


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rendering/velocity/directive/DotParse.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

        141┆ final File fileToServe = contentlet.getBinary(idAndField._2);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/BundleResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        377┆ 	@DELETE
        378┆     @Path("/ids")
        379┆     @Produces("application/json")
        380┆     public Response deleteBundlesByIdentifiers(@Context   final HttpServletRequest request,
        381┆                                                @Context   final HttpServletResponse response,
        382┆                                                final DeleteBundlesByIdentifierForm  deleteBundlesByIdentifierForm) {
        383┆ 
        384┆         final InitDataObject initData = new WebResource.InitBuilder(webResource)
        385┆                 .requiredBackendUser(true)
        386┆                 .requiredFrontendUser(false)
           [hid 37 additional lines, adjust with --max-lines-per-finding] 
        516┆ @DELETE
        517┆ @Path("/olderthan/{olderThan}")
        518┆ @Produces("application/json")
        519┆ public Response deleteBundlesOlderThan(@Context   final HttpServletRequest request,
        520┆                                    @Context   final HttpServletResponse response,
        521┆                                    @PathParam("olderThan") final ISODateParam olderThan) {
        522┆ 
        523┆     if(olderThan.after(new Date())) {
        524┆ 
        525┆         throw new IllegalArgumentException("To avoid deleting bundles that publish in the future, the date can not be after the current date");
           [hid 37 additional lines, adjust with --max-lines-per-finding] 
        570┆ @DELETE
        571┆ @Path("/all")
        572┆ @Produces("application/json")
        573┆ public Response deleteAll(@Context   final HttpServletRequest request,
        574┆                           @Context   final HttpServletResponse response) {
        575┆ 
        576┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
        577┆             .requiredBackendUser(true)
        578┆             .requiredFrontendUser(false)
        579┆             .requestAndResponse(request, response)
           [hid 30 additional lines, adjust with --max-lines-per-finding] 
        617┆ @DELETE
        618┆ @Path("/all/fail")
        619┆ @Produces("application/json")
        620┆ public Response deleteAllFail(@Context   final HttpServletRequest request,
        621┆                           @Context   final HttpServletResponse response) {
        622┆ 
        623┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
        624┆             .requiredBackendUser(true)
        625┆             .requiredFrontendUser(false)
        626┆             .requestAndResponse(request, response)
           [hid 30 additional lines, adjust with --max-lines-per-finding] 
        677┆ @DELETE
        678┆ @Path("/all/success")
        679┆ @Produces("application/json")
        680┆ public Response deleteAllSuccess(@Context final HttpServletRequest request,
        681┆                                   @Context final HttpServletResponse response) {
        682┆ 
        683┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
        684┆             .requiredBackendUser(true)
        685┆             .requiredFrontendUser(false)
        686┆             .requestAndResponse(request, response)
           [hid 29 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/ClusterResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        158┆ @POST
        159┆ @Path("/remove/{params:.*}")
        160┆ public Response removeFromCluster(@Context HttpServletRequest request, @Context final HttpServletResponse response, @PathParam("params") String params) {
        161┆     InitDataObject initData = webResource.init(params, request, response, true, PortletID.CONFIGURATION.toString());
        162┆     String serverId = initData.getParamsMap().get("serverid");
        163┆     try {
        164┆     	HibernateUtil.startTransaction();
        165┆         APILocator.getServerAPI().removeServerFromClusterTable(serverId);
        166┆         HibernateUtil.closeAndCommitTransaction();
        167┆     }
           [hid 14 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/ContentResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        153┆ @POST
        154┆ @Path("/_search")
        155┆ @Produces(MediaType.APPLICATION_JSON)
        156┆ public Response search(@Context HttpServletRequest request,
        157┆                        @Context final HttpServletResponse response,
        158┆                        final SearchForm searchForm) throws DotSecurityException, DotDataException {
        159┆ 
        160┆     final InitDataObject initData = this.webResource.init
        161┆             (null, request, response, false, null);
        162┆ 
           [hid 60 additional lines, adjust with --max-lines-per-finding] 
        308┆ @PUT
        309┆ @Path("/lock/{params:.*}")
        310┆ @Produces(MediaType.APPLICATION_JSON)
        311┆ 
        312┆ public Response lockContent(@Context HttpServletRequest request,
        313┆         @Context HttpServletResponse response, @PathParam("params") String params)
        314┆         throws DotDataException, JSONException {
        315┆ 
        316┆     InitDataObject initData = webResource.init(params, request, response, false, null);
        317┆     Map<String, String> paramsMap = initData.getParamsMap();
           [hid 60 additional lines, adjust with --max-lines-per-finding] 
        380┆ @PUT
        381┆ @Path("/canLock/{params:.*}")
        382┆ @Produces(MediaType.APPLICATION_JSON)
        383┆ public Response canLockContent(@Context HttpServletRequest request, @Context final HttpServletResponse response,
        384┆         @PathParam("params") String params)
        385┆         throws DotDataException, JSONException {
        386┆ 
        387┆     InitDataObject initData = webResource.init(params, request, response, false, null);
        388┆     Map<String, String> paramsMap = initData.getParamsMap();
        389┆     String callback = paramsMap.get(RESTParams.CALLBACK.getValue());
           [hid 77 additional lines, adjust with --max-lines-per-finding] 
        468┆ @PUT
        469┆ @Path("/unlock/{params:.*}")
        470┆ @Produces(MediaType.APPLICATION_JSON)
        471┆ 
        472┆ public Response unlockContent(@Context HttpServletRequest request,
        473┆         @Context HttpServletResponse response, @PathParam("params") String params)
        474┆         throws DotDataException, JSONException {
        475┆ 
        476┆     InitDataObject initData = webResource.init(params, request, response, false, null);
        477┆ 
           [hid 58 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        172┆ @POST
        173┆ @Path("/_generateintegritydata")
        174┆ @Produces("text/plain")
        175┆ public Response generateIntegrityData(@Context HttpServletRequest request)  {
        176┆ 
        177┆     if (LicenseManager.getInstance().isCommunity()) {
        178┆         throw new InvalidLicenseException("License required");
        179┆     }
        180┆ 
        181┆     final String localAddress = RestEndPointIPUtil.getFullLocalIp(request);
           [hid 52 additional lines, adjust with --max-lines-per-finding] 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

        907┆ final File bundle = new File(IntegrityUtil.getIntegrityDataFilePath(
        908┆         endpointId,
        909┆         IntegrityUtil.INTEGRITY_DATA_TO_FIX_ZIP_FILENAME));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/JSPPortlet.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

         44┆ @POST
         45┆ @Path("/{params:.*}")
         46┆ @Produces("text/html")
         47┆ public Response layoutPost(@Context HttpServletRequest request, @Context HttpServletResponse response, @PathParam("params") String params) throws DotDataExcepti ... [0m
         48┆ 		DotSecurityException, ServletException, IOException, DotRuntimeException, PortalException, SystemException {
         49┆ 
         50┆ 	return super.getLayout(request, response, params);
         51┆ }
          [shortened a long line from output, adjust with --max-chars-per-line]


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/LicenseResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        163┆ @NoCache
        164┆ @DELETE
        165┆ @Path("/delete/{params:.*}")
        166┆ public Response delete(@Context HttpServletRequest request, @Context final HttpServletResponse response, @PathParam("params") String params) {
        167┆ 
        168┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
        169┆             .requiredBackendUser(true)
        170┆             .requiredFrontendUser(false)
        171┆             .params(params)
        172┆             .requestAndResponse(request, response)
           [hid 28 additional lines, adjust with --max-lines-per-finding] 
        202┆ @NoCache
        203┆ @POST
        204┆ @Path("/pick/{params:.*}")
        205┆ public Response pickLicense(@Context HttpServletRequest request, @Context final HttpServletResponse response, @PathParam("params") String params) {
        206┆ 
        207┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
        208┆             .requiredBackendUser(true)
        209┆             .requiredFrontendUser(false)
        210┆             .params(params)
        211┆             .requestAndResponse(request, response)
           [hid 40 additional lines, adjust with --max-lines-per-finding] 
        253┆ @NoCache
        254┆ @POST
        255┆ @Path("/free/{params:.*}")
        256┆ public Response freeLicense(@Context HttpServletRequest request, @Context final HttpServletResponse response, @PathParam("params") String params) {
        257┆ 
        258┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
        259┆             .requiredBackendUser(true)
        260┆             .requiredFrontendUser(false)
        261┆             .params(params)
        262┆             .requestAndResponse(request, response)
           [hid 88 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/TagResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        329┆ @DELETE
        330┆ @JSONP
        331┆ @Path("/{tagId}")
        332┆ @NoCache
        333┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        334┆ public Response delete(@Context final HttpServletRequest request,
        335┆         @Context final HttpServletResponse response,
        336┆         @PathParam("tagId") final String tagId) {
        337┆ 
        338┆     final InitDataObject initDataObject =
           [hid 31 additional lines, adjust with --max-lines-per-finding] 
        382┆ @PUT
        383┆ @JSONP
        384┆ @Path("/tag/{nameOrId}/inode/{inode}")
        385┆ @NoCache
        386┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        387┆ public Response linkTagsAndInode(@Context final HttpServletRequest request,
        388┆         @Context final HttpServletResponse response,
        389┆         @PathParam("nameOrId") final String nameOrId,
        390┆         @PathParam("inode") final String inode) {
        391┆ 
           [hid 39 additional lines, adjust with --max-lines-per-finding] 
        474┆ @DELETE
        475┆ @JSONP
        476┆ @Path("/inode/{inode}")
        477┆ @NoCache
        478┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        479┆ public Response deleteTagInodesByInode(@Context final HttpServletRequest request,
        480┆         @Context final HttpServletResponse response,
        481┆         @PathParam("inode") final String inode) {
        482┆ 
        483┆     final InitDataObject initDataObject =
           [hid 29 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        238┆ @POST
        239┆ @Path("/{key}/{siteId}")
        240┆ @JSONP
        241┆ @NoCache
        242┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        243┆ public final Response createAppSecrets(
        244┆         @Context final HttpServletRequest request,
        245┆         @Context final HttpServletResponse response,
        246┆         @PathParam("key") final String key,
        247┆         @PathParam("siteId") final String siteId,
           [hid 22 additional lines, adjust with --max-lines-per-finding] 
        280┆ @PUT
        281┆ @Path("/{key}/{siteId}")
        282┆ @JSONP
        283┆ @NoCache
        284┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        285┆ public final Response updateAppIndividualSecret(
        286┆         @Context final HttpServletRequest request,
        287┆         @Context final HttpServletResponse response,
        288┆         @PathParam("key") final String key,
        289┆         @PathParam("siteId") final String siteId,
           [hid 22 additional lines, adjust with --max-lines-per-finding] 
        322┆ @DELETE
        323┆ @Path("/")
        324┆ @JSONP
        325┆ @NoCache
        326┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        327┆ public final Response deleteIndividualAppSecret(
        328┆         @Context final HttpServletRequest request,
        329┆         @Context final HttpServletResponse response,
        330┆         final DeleteSecretForm secretForm
        331┆ ) {
           [hid 20 additional lines, adjust with --max-lines-per-finding] 
        365┆ @DELETE
        366┆ @Path("/{key}/{siteId}")
        367┆ @JSONP
        368┆ @NoCache
        369┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        370┆ public final Response deleteAllAppSecrets(
        371┆         @Context final HttpServletRequest request,
        372┆         @Context final HttpServletResponse response,
        373┆         @PathParam("key") final String key,
        374┆         @PathParam("siteId") final String siteId
           [hid 21 additional lines, adjust with --max-lines-per-finding] 
        407┆ @DELETE
        408┆ @Path("/{key}")
        409┆ @JSONP
        410┆ @NoCache
        411┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        412┆ public final Response deleteApp(
        413┆         @Context final HttpServletRequest request,
        414┆         @Context final HttpServletResponse response,
        415┆         @PathParam("key") final String serviceKey,
        416┆         @QueryParam("removeDescriptor") final boolean removeDescriptor
           [hid 18 additional lines, adjust with --max-lines-per-finding] 
        443┆ @POST
        444┆ @Path("/export")
        445┆ @JSONP
        446┆ @NoCache
        447┆ @Produces({MediaType.APPLICATION_OCTET_STREAM, MediaType.APPLICATION_JSON})
        448┆ public final Response exportSecrets(
        449┆         @Context final HttpServletRequest request,
        450┆         @Context final HttpServletResponse response,
        451┆         final ExportSecretForm exportSecretForm
        452┆ ) {
           [hid 20 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/authentication/ApiTokenResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

         91┆ @PUT
         92┆ @Path("/{tokenId}/revoke")
         93┆ @JSONP
         94┆ @NoCache
         95┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
         96┆ public final Response revokeApiToken(@Context final HttpServletRequest request, @Context final HttpServletResponse response,
         97┆         @PathParam("tokenId") final String tokenId) {
         98┆ 
         99┆     final InitDataObject initDataObject = this.webResource.init(null, true, request, true, "users");
        100┆     final User user                     = initDataObject.getUser();
           [hid 19 additional lines, adjust with --max-lines-per-finding] 
        121┆ @DELETE
        122┆ @Path("/{tokenId}")
        123┆ @JSONP
        124┆ @NoCache
        125┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        126┆ public final Response deleteApiToken(@Context final HttpServletRequest request, @Context final HttpServletResponse response,
        127┆         @PathParam("tokenId") final String tokenId) {
        128┆ 
        129┆     final InitDataObject initDataObject = this.webResource.init(null, true, request, true, "users");
        130┆     final User user                     = initDataObject.getUser();
           [hid 17 additional lines, adjust with --max-lines-per-finding] 
        356┆ @PUT
        357┆ @Path("/users/{userid}/revoke")
        358┆ @JSONP
        359┆ @NoCache
        360┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        361┆ public final Response revokeUserToken(@Context final HttpServletRequest request, @Context final HttpServletResponse response,
        362┆                                      @PathParam("userid") final String userid) throws DotSecurityException, DotDataException {
        363┆ 
        364┆     final InitDataObject initDataObject = new WebResource.InitBuilder(this.webResource).rejectWhenNoUser(true)
        365┆                                             .requestAndResponse(request, response).requiredPortlet("users")
           [hid 26 additional lines, adjust with --max-lines-per-finding] 
        393┆ @PUT
        394┆ @Path("/users/revoke")
        395┆ @JSONP
        396┆ @NoCache
        397┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        398┆ public final Response revokeUsersToken(@Context final HttpServletRequest request,
        399┆                                        @Context final HttpServletResponse response) throws DotSecurityException, DotDataException {
        400┆ 
        401┆     final InitDataObject initDataObject = new WebResource.InitBuilder(this.webResource).rejectWhenNoUser(true)
        402┆             .requestAndResponse(request, response).requiredPortlet("users")
           [hid 27 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/authentication/CreateJsonWebTokenResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

         90┆ @POST
         91┆ @Path("/api-token")
         92┆ @JSONP
         93┆ @NoCache
         94┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
         95┆ public final Response getApiToken(@Context final HttpServletRequest request,
         96┆                                      @Context final HttpServletResponse response,
         97┆                                      final CreateTokenForm createTokenForm) {
         98┆ 
         99┆     final String userId = createTokenForm.user;
           [hid 72 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/browser/BrowserResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

         96┆ @Path("/selectedfolder")
         97┆ @PUT
         98┆ @JSONP
         99┆ @NoCache
        100┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        101┆ public Response selectFolder(@Context final HttpServletRequest request,
        102┆                                  @Context final HttpServletResponse response,
        103┆                                  final OpenFolderForm openFolderForm) throws DotSecurityException, DotDataException {
        104┆ 
        105┆     final InitDataObject initData = new WebResource.InitBuilder()
           [hid 15 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/categories/CategoriesResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        424┆ @PUT
        425┆ @Path("/_sort")
        426┆ @JSONP
        427┆ @NoCache
        428┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        429┆ public final Response save(@Context final HttpServletRequest httpRequest,
        430┆         @Context final HttpServletResponse httpResponse,
        431┆         final CategoryEditForm categoryEditForm
        432┆ ) throws DotDataException, DotSecurityException {
        433┆ 
           [hid 31 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/container/ContainerResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        586┆ @Path("/containerContent/{params:.*}")
        587┆ public final Response containerContents(@Context final HttpServletRequest req, @Context final HttpServletResponse res,
        588┆         @QueryParam("containerId") final String containerId, @QueryParam("contentInode") final String contentInode)
        589┆         throws DotDataException, IOException {
        590┆ 
        591┆     final InitDataObject initData = webResource.init(req, res, true);
        592┆     final User user = initData.getUser();
        593┆ 
        594┆     try {
        595┆ 
           [hid 36 additional lines, adjust with --max-lines-per-finding] 
        874┆ @PUT
        875┆ @Path("/_publish")
        876┆ @JSONP
        877┆ @NoCache
        878┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        879┆ public final Response publish(@Context final HttpServletRequest  request,
        880┆                                 @Context final HttpServletResponse response,
        881┆                                 @QueryParam("containerId") final String containerId) throws DotSecurityException, DotDataException {
        882┆ 
        883┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 30 additional lines, adjust with --max-lines-per-finding] 
        929┆ @PUT
        930┆ @Path("/_unpublish")
        931┆ @JSONP
        932┆ @NoCache
        933┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        934┆ public final Response unpublish(@Context final HttpServletRequest  request,
        935┆                               @Context final HttpServletResponse response,
        936┆                               @QueryParam("containerId") final String containerId) throws DotSecurityException, DotDataException {
        937┆ 
        938┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 29 additional lines, adjust with --max-lines-per-finding] 
        982┆ @PUT
        983┆ @Path("/_archive")
        984┆ @JSONP
        985┆ @NoCache
        986┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        987┆ public final Response archive(@Context final HttpServletRequest  request,
        988┆                               @Context final HttpServletResponse response,
        989┆                               @QueryParam("containerId") final String containerId) throws DotSecurityException, DotDataException {
        990┆ 
        991┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 29 additional lines, adjust with --max-lines-per-finding] 
       1035┆ @PUT
       1036┆ @Path("/_unarchive")
       1037┆ @JSONP
       1038┆ @NoCache
       1039┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1040┆ public final Response unarchive(@Context final HttpServletRequest  request,
       1041┆                               @Context final HttpServletResponse response,
       1042┆                               @QueryParam("containerId") final String containerId) throws DotSecurityException, DotDataException {
       1043┆ 
       1044┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 29 additional lines, adjust with --max-lines-per-finding] 
       1142┆ @POST
       1143┆ @Path("/{id}/_copy")
       1144┆ @JSONP
       1145┆ @NoCache
       1146┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1147┆ public ResponseEntityContainerView copy(@Context final HttpServletRequest request,
       1148┆         @Context final HttpServletResponse response,
       1149┆         @PathParam("id") final String id) throws DotDataException, DotSecurityException {
       1150┆ 
       1151┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 32 additional lines, adjust with --max-lines-per-finding] 
       1197┆ @DELETE
       1198┆ @Path("_bulkdelete")
       1199┆ @JSONP
       1200┆ @NoCache
       1201┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1202┆ public final Response bulkDelete(@Context final HttpServletRequest  request,
       1203┆         @Context final HttpServletResponse response,
       1204┆         final List<String> containersToDelete) {
       1205┆ 
       1206┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 38 additional lines, adjust with --max-lines-per-finding] 
       1260┆ @PUT
       1261┆ @Path("/_bulkpublish")
       1262┆ @JSONP
       1263┆ @NoCache
       1264┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1265┆ public final Response bulkPublish(@Context final HttpServletRequest  request,
       1266┆         @Context final HttpServletResponse response,
       1267┆         final List<String> containersToPublish){
       1268┆ 
       1269┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 37 additional lines, adjust with --max-lines-per-finding] 
       1321┆ @PUT
       1322┆ @Path("/_bulkunpublish")
       1323┆ @JSONP
       1324┆ @NoCache
       1325┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1326┆ public final Response bulkUnpublish(@Context final HttpServletRequest  request,
       1327┆         @Context final HttpServletResponse response,
       1328┆         final List<String> containersToUnpublish) {
       1329┆ 
       1330┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 37 additional lines, adjust with --max-lines-per-finding] 
       1382┆ @PUT
       1383┆ @Path("/_bulkarchive")
       1384┆ @JSONP
       1385┆ @NoCache
       1386┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1387┆ public final Response bulkArchive(@Context final HttpServletRequest  request,
       1388┆         @Context final HttpServletResponse response,
       1389┆         final List<String> containersToArchive) {
       1390┆ 
       1391┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 38 additional lines, adjust with --max-lines-per-finding] 
       1445┆ @PUT
       1446┆ @Path("/_bulkunarchive")
       1447┆ @JSONP
       1448┆ @NoCache
       1449┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1450┆ public final Response bulkUnarchive(@Context final HttpServletRequest  request,
       1451┆         @Context final HttpServletResponse response,
       1452┆         final List<String> containersToUnarchive){
       1453┆ 
       1454┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 37 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/content/ContentResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        250┆ @POST
        251┆ @JSONP
        252┆ @NoCache
        253┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        254┆ @Path("related")
        255┆ @Operation(summary = "Pull Related Content",
        256┆         responses = {
        257┆                 @ApiResponse(
        258┆                         responseCode = "200",
        259┆                         content = @Content(mediaType = "application/json",
           [hid 52 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/contenttype/ContentTypeResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        506┆ @DELETE
        507┆ @Path("/id/{idOrVar}")
        508┆ @JSONP
        509┆ @NoCache
        510┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        511┆ public Response deleteType(@PathParam("idOrVar") final String idOrVar, @Context final HttpServletRequest req, @Context final HttpServletResponse res)
        512┆ 		throws DotDataException, JSONException {
        513┆ 
        514┆ 	final InitDataObject initData = this.webResource.init(null, req, res, true, null);
        515┆ 	final User user = initData.getUser();
           [hid 26 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/contenttype/FieldResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        396┆ @DELETE
        397┆ @Path("/id/{fieldId}")
        398┆ @JSONP
        399┆ @NoCache
        400┆ @Produces({ MediaType.APPLICATION_JSON, "application/javascript" })
        401┆ public Response deleteContentTypeFieldById(@PathParam("typeId") final String typeId,
        402┆ 										   @PathParam("fieldId") final String fieldId, @Context final HttpServletRequest req)
        403┆ 		throws DotDataException, DotSecurityException {
        404┆ 
        405┆ 	final InitDataObject initData = this.webResource.init(null, false, req, false, null);
           [hid 25 additional lines, adjust with --max-lines-per-finding] 
        432┆ @DELETE
        433┆ @Path("/var/{fieldVar}")
        434┆ @JSONP
        435┆ @NoCache
        436┆ @Produces({ MediaType.APPLICATION_JSON, "application/javascript" })
        437┆ public Response deleteContentTypeFieldByVar(@PathParam("typeId") final String typeId,
        438┆ 		@PathParam("fieldVar") final String fieldVar, @Context final HttpServletRequest req)
        439┆ 		throws DotDataException, DotSecurityException {
        440┆ 
        441┆ 	final InitDataObject initData = this.webResource.init(null, false, req, false, null);
           [hid 26 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/contenttype/FieldVariableResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        441┆ @DELETE
        442┆ @Path("/id/{fieldId}/variables/id/{fieldVarId}")
        443┆ @JSONP
        444┆ @NoCache
        445┆ @Produces({ MediaType.APPLICATION_JSON, "application/javascript" })
        446┆ public Response deleteFieldVariableByFieldId(@PathParam("typeId") final String typeId,
        447┆ 		@PathParam("fieldId") final String fieldId, @PathParam("fieldVarId") final String fieldVarId,
        448┆ 		@Context final HttpServletRequest req, @Context final HttpServletResponse res) throws DotDataException {
        449┆ 
        450┆ 	this.webResource.init(null, req, res, false, null);
           [hid 31 additional lines, adjust with --max-lines-per-finding] 
        483┆ @DELETE
        484┆ @Path("/var/{fieldVar}/variables/id/{fieldVarId}")
        485┆ @JSONP
        486┆ @NoCache
        487┆ @Produces({ MediaType.APPLICATION_JSON, "application/javascript" })
        488┆ public Response deleteFieldVariableByFieldVar(@PathParam("typeId") final String typeId,
        489┆ 		@PathParam("fieldVar") final String fieldVar, @PathParam("fieldVarId") final String fieldVarId,
        490┆ 		@Context final HttpServletRequest req, @Context final HttpServletResponse res) throws DotDataException {
        491┆ 
        492┆ 	this.webResource.init(null, req, res, false, null);
           [hid 31 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/experiments/ExperimentsResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        114┆ @PATCH
        115┆ @Path("/{experimentId}")
        116┆ @JSONP
        117┆ @NoCache
        118┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        119┆ public ResponseEntitySingleExperimentView update(@Context final HttpServletRequest request,
        120┆         @Context final HttpServletResponse response,
        121┆         @PathParam("experimentId") final String experimentId,
        122┆         final ExperimentForm experimentForm) throws DotDataException, DotSecurityException {
        123┆     final InitDataObject initData = getInitData(request, response);
           [hid 13 additional lines, adjust with --max-lines-per-finding] 
        144┆ @PUT
        145┆ @Path("/{experimentId}/_archive")
        146┆ @JSONP
        147┆ @NoCache
        148┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        149┆ public ResponseEntityExperimentView archive(@Context final HttpServletRequest request,
        150┆         @Context final HttpServletResponse response,
        151┆         @PathParam("experimentId") final String experimentId) throws DotDataException, DotSecurityException {
        152┆     final InitDataObject initData = getInitData(request, response);
        153┆     final User user = initData.getUser();
           [hid 3 additional lines, adjust with --max-lines-per-finding] 
        162┆ @DELETE
        163┆ @Path("/{experimentId}")
        164┆ @JSONP
        165┆ @NoCache
        166┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        167┆ public ResponseEntityView<String> delete(@Context final HttpServletRequest request,
        168┆         @Context final HttpServletResponse response,
        169┆         @PathParam("experimentId") final String experimentId) throws DotDataException, DotSecurityException {
        170┆     final InitDataObject initData = getInitData(request, response);
        171┆     final User user = initData.getUser();
           [hid 3 additional lines, adjust with --max-lines-per-finding] 
        229┆ @DELETE
        230┆ @Path("/{experimentId}/goals/primary")
        231┆ @JSONP
        232┆ @NoCache
        233┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        234┆ public ResponseEntitySingleExperimentView deleteGoal(@Context final HttpServletRequest request,
        235┆         @Context final HttpServletResponse response,
        236┆         @PathParam("experimentId") final String experimentId) throws DotDataException, DotSecurityException {
        237┆     final InitDataObject initData = getInitData(request, response);
        238┆     final User user = initData.getUser();
           [hid 11 additional lines, adjust with --max-lines-per-finding] 
        267┆ @POST
        268┆ @Path("/{experimentId}/_start")
        269┆ @JSONP
        270┆ @NoCache
        271┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        272┆ public ResponseEntitySingleExperimentView start(@Context final HttpServletRequest request,
        273┆         @Context final HttpServletResponse response,
        274┆         @PathParam("experimentId") final String experimentId) throws DotDataException, DotSecurityException {
        275┆     final InitDataObject initData = getInitData(request, response);
        276┆     final User user = initData.getUser();
           [hid 3 additional lines, adjust with --max-lines-per-finding] 
        286┆ @POST
        287┆ @Path("/{experimentId}/_end")
        288┆ @JSONP
        289┆ @NoCache
        290┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        291┆ public ResponseEntitySingleExperimentView end(@Context final HttpServletRequest request,
        292┆         @Context final HttpServletResponse response,
        293┆         @PathParam("experimentId") final String experimentId) throws DotDataException, DotSecurityException {
        294┆     final InitDataObject initData = getInitData(request, response);
        295┆     final User user = initData.getUser();
           [hid 3 additional lines, adjust with --max-lines-per-finding] 
        329┆ @DELETE
        330┆ @Path("/{experimentId}/variants/{name}")
        331┆ @JSONP
        332┆ @NoCache
        333┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        334┆ public ResponseEntitySingleExperimentView deleteVariant(@Context final HttpServletRequest request,
        335┆         @Context final HttpServletResponse response,
        336┆         @PathParam("experimentId") final String experimentId,
        337┆         @PathParam("name") final String variantName) throws DotDataException, DotSecurityException {
        338┆     final InitDataObject initData = getInitData(request, response);
           [hid 4 additional lines, adjust with --max-lines-per-finding] 
        380┆ @DELETE
        381┆ @Path("/{experimentId}/targetingConditions/{id}")
        382┆ @JSONP
        383┆ @NoCache
        384┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        385┆ public ResponseEntitySingleExperimentView deleteTargetingCondition(@Context final HttpServletRequest request,
        386┆         @Context final HttpServletResponse response,
        387┆         @PathParam("experimentId") final String experimentId,
        388┆         @PathParam("id") final String conditionId) throws DotDataException, DotSecurityException {
        389┆     final InitDataObject initData = getInitData(request, response);
           [hid 5 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        152┆ @PUT
        153┆ @Path("/{id}/file-browser-selected")
        154┆ @NoCache
        155┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        156┆ public final Response selectFolder(@Context final HttpServletRequest httpServletRequest,
        157┆         @Context final HttpServletResponse httpServletResponse,
        158┆         @PathParam("id") final String folderId)
        159┆         throws DotSecurityException, DotDataException {
        160┆ 
        161┆     new WebResource.InitBuilder(webResource)
           [hid 9 additional lines, adjust with --max-lines-per-finding] 
        281┆ @POST
        282┆ @Path ("/byPath")
        283┆ @JSONP
        284┆ @NoCache
        285┆ @Produces({MediaType.APPLICATION_JSON})
        286┆ public final Response findSubFoldersByPath(@Context final HttpServletRequest httpServletRequest,
        287┆         @Context final HttpServletResponse httpServletResponse,
        288┆         final SearchByPathForm searchByPathForm
        289┆         ) throws  DotDataException, DotSecurityException   {
        290┆ 
           [hid 38 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/index/ESIndexResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        212┆ @CloseDBIfOpened
        213┆ @DELETE
        214┆ @JSONP
        215┆ @NoCache
        216┆ @Path("/failed")
        217┆ @Produces({MediaType.APPLICATION_JSON})
        218┆ public Response deleteFailedRecords(@Context final HttpServletRequest request, @Context final HttpServletResponse response)
        219┆                 throws DotDataException {
        220┆     final InitDataObject init = auth(request, response);
        221┆     APILocator.getReindexQueueAPI().deleteFailedRecords();
           [hid 2 additional lines, adjust with --max-lines-per-finding] 
        225┆ @CloseDBIfOpened
        226┆ @POST
        227┆ @JSONP
        228┆ @NoCache
        229┆ @Path("/optimize")
        230┆ @Produces({MediaType.APPLICATION_JSON})
        231┆ public Response optimizeIndices(@Context final HttpServletRequest request, @Context final HttpServletResponse response) {
        232┆     final InitDataObject init = auth(request, response);
        233┆     final ContentletIndexAPI api = APILocator.getContentletIndexAPI();
        234┆     final List<String> indices = api.listDotCMSIndices();
           [hid 5 additional lines, adjust with --max-lines-per-finding] 
        241┆ @CloseDBIfOpened
        242┆ @DELETE
        243┆ @JSONP
        244┆ @NoCache
        245┆ @Path("/cache")
        246┆ @Produces({MediaType.APPLICATION_JSON})
        247┆ public Response flushIndiciesCache(@Context final HttpServletRequest request, @Context final HttpServletResponse response) {
        248┆     final InitDataObject init = auth(request, response);
        249┆     final ContentletIndexAPI api = APILocator.getContentletIndexAPI();
        250┆     final List<String> indices = api.listDotCMSIndices();
           [hid 8 additional lines, adjust with --max-lines-per-finding] 
        261┆ @Deprecated
        262┆ @PUT
        263┆ @Path("/create/{params:.*}")
        264┆ @Produces("text/plain")
        265┆ public Response createIndex(@Context HttpServletRequest httpServletRequest, @Context final HttpServletResponse httpServletResponse, @PathParam("params") String  ... [0m
        266┆     try {
        267┆         InitDataObject init=auth(httpServletRequest, httpServletResponse);
        268┆ 
        269┆         int shards=Integer.parseInt(init.getParamsMap().get("shards"));
        270┆         boolean live = init.getParamsMap().containsKey("live") ? Boolean.parseBoolean(init.getParamsMap().get("live")) : false;
          [shortened a long line from output, adjust with --max-chars-per-line]
           [hid 15 additional lines, adjust with --max-lines-per-finding] 
        294┆ @Deprecated
        295┆ @PUT
        296┆ @Path("/clear/{params:.*}")
        297┆ public Response clearIndex(@Context HttpServletRequest httpServletRequest, @Context final HttpServletResponse httpServletResponse, @PathParam("params") String p ... [0m
        298┆ 
        299┆     InitDataObject init=auth(httpServletRequest,httpServletResponse);
        300┆     String indexName = this.indexHelper.getIndexNameOrAlias(init.getParamsMap(),"index","alias",this.indexAPI);
        301┆     return modIndex(httpServletRequest, httpServletResponse, indexName, IndexAction.CLEAR.name());
        302┆ }
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        321┆ @CloseDBIfOpened
        322┆ @POST
        323┆ @JSONP
        324┆ @NoCache
        325┆ @Path("/reindex")
        326┆ @Produces({MediaType.APPLICATION_JSON})
        327┆ public Response startReindex(@Context final HttpServletRequest request, @Context final HttpServletResponse response,
        328┆                 @QueryParam("shards") int shards, @DefaultValue(DOTALL) @QueryParam("contentType") String contentType) throws DotDataException, DotSecurityExcep ... [0m
        329┆     final InitDataObject init = auth(request, response);
        330┆     shards = (shards <= 0) ? Config.getIntProperty("es.index.number_of_shards", 2) : shards;
          [shortened a long line from output, adjust with --max-chars-per-line]
           [hid 18 additional lines, adjust with --max-lines-per-finding] 
        350┆ @CloseDBIfOpened
        351┆ @DELETE
        352┆ @JSONP
        353┆ @NoCache
        354┆ @Path("/reindex")
        355┆ @Produces({MediaType.APPLICATION_JSON})
        356┆ public Response stopReindexation(@Context final HttpServletRequest request,
        357┆                 @Context final HttpServletResponse response,
        358┆                 @DefaultValue("true") @QueryParam("switch") boolean switchMe)
        359┆                 throws DotDataException {
           [hid 11 additional lines, adjust with --max-lines-per-finding] 
        373┆ @CloseDBIfOpened
        374┆ @DELETE
        375┆ @JSONP
        376┆ @NoCache
        377┆ @Path("/{indexName: .*}")
        378┆ @Produces({MediaType.APPLICATION_JSON})
        379┆ public Response deleteIndex(@Context final HttpServletRequest request, @Context final HttpServletResponse response,
        380┆                 @PathParam("indexName") final String indexName) throws DotDataException {
        381┆ 
        382┆     final InitDataObject init = auth(request, response);
           [hid 15 additional lines, adjust with --max-lines-per-finding] 
        405┆ @Deprecated
        406┆ @PUT
        407┆ @Path("/activate/{params:.*}")
        408┆ public Response activateIndex(@Context HttpServletRequest httpServletRequest, @Context final HttpServletResponse httpServletResponse, @PathParam("params") Strin ... [0m
        409┆     InitDataObject init=auth(httpServletRequest,httpServletResponse);
        410┆     String indexName = this.indexHelper.getIndexNameOrAlias(init.getParamsMap(),"index","alias",this.indexAPI);
        411┆     return modIndex(httpServletRequest, httpServletResponse, indexName, IndexAction.ACTIVATE.name());
        412┆ }
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        422┆ @Deprecated
        423┆ @PUT
        424┆ @Path("/deactivate/{params:.*}")
        425┆ public Response deactivateIndex(@Context HttpServletRequest httpServletRequest, @Context final HttpServletResponse httpServletResponse, @PathParam("params") Str ... [0m
        426┆     InitDataObject init=auth(httpServletRequest,httpServletResponse);
        427┆     String indexName = this.indexHelper.getIndexNameOrAlias(init.getParamsMap(),"index","alias",this.indexAPI);
        428┆     return modIndex(httpServletRequest, httpServletResponse, indexName, IndexAction.DEACTIVATE.name());
        429┆ }
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        438┆ @Deprecated
        439┆ @PUT
        440┆ @Path("/close/{params:.*}")
        441┆ public Response closeIndex(@Context HttpServletRequest httpServletRequest,@Context final HttpServletResponse httpServletResponse, @PathParam("params") String pa ... [0m
        442┆     InitDataObject init=auth(httpServletRequest,httpServletResponse);
        443┆     String indexName = this.indexHelper.getIndexNameOrAlias(init.getParamsMap(),"index","alias",this.indexAPI);
        444┆     return modIndex(httpServletRequest, httpServletResponse, indexName, IndexAction.CLOSE.name());
        445┆ }
          [shortened a long line from output, adjust with --max-chars-per-line]
          ⋮┆----------------------------------------
        454┆ @Deprecated
        455┆ @PUT
        456┆ @Path("/open/{params:.*}")
        457┆ public Response openIndex(@Context HttpServletRequest httpServletRequest, @Context final HttpServletResponse httpServletResponse, @PathParam("params") String pa ... [0m
        458┆     try {
        459┆         InitDataObject init=auth(httpServletRequest, httpServletResponse);
        460┆         String indexName = this.indexHelper.getIndexNameOrAlias(init.getParamsMap(),"index","alias",this.indexAPI);
        461┆         APILocator.getESIndexAPI().openIndex(indexName);
        462┆ 
        463┆         return Response.ok().build();
          [shortened a long line from output, adjust with --max-chars-per-line]
           [hid 5 additional lines, adjust with --max-lines-per-finding] 
        528┆ @CloseDBIfOpened
        529┆ @PUT
        530┆ @JSONP
        531┆ @NoCache
        532┆ @Path("/{indexName: .*}")
        533┆ @Produces({MediaType.APPLICATION_JSON})
        534┆ public Response modIndex(@Context final HttpServletRequest request, @Context final HttpServletResponse response,
        535┆                 @PathParam("indexName") final String indexName, @QueryParam("action") final String action) throws DotDataException, IOException {
        536┆ 
        537┆     final InitDataObject init = auth(request, response);
           [hid 32 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/languages/LanguagesResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

         71┆ @POST
         72┆ @JSONP
         73┆ @NoCache
         74┆ @Path("/i18n")
         75┆ @InitRequestRequired
         76┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
         77┆ /**
         78┆  * @deprecated use {@link LanguagesResource#getMessages(HttpServletRequest, I18NForm)} instead
         79┆  */
         80┆ public Response getMessages(@Context HttpServletRequest request,
           [hid 26 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/notification/NotificationResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        236┆ @PUT
        237┆ @Path ("/markAsRead")
        238┆ @Produces ("application/json")
        239┆ public Response markAsRead ( @Context final HttpServletRequest httpServletRequest, @Context final HttpServletResponse httpServletResponse )  {
        240┆ 
        241┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
        242┆             .requiredBackendUser(true)
        243┆             .requiredFrontendUser(false)
        244┆             .requestAndResponse(httpServletRequest, httpServletResponse)
        245┆             .rejectWhenNoUser(true).init();
           [hid 23 additional lines, adjust with --max-lines-per-finding] 
        276┆ @DELETE
        277┆ @Path("/id/{id}")
        278┆ @Produces ("application/json")
        279┆ public Response delete(@Context HttpServletRequest httpServletRequest, @Context final HttpServletResponse httpServletResponse, @PathParam("id") String groupId)  ... [0m
        280┆ 
        281┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
        282┆             .requiredBackendUser(true)
        283┆             .requiredFrontendUser(false)
        284┆             .requestAndResponse(httpServletRequest, httpServletResponse)
        285┆             .rejectWhenNoUser(true).init();
          [shortened a long line from output, adjust with --max-chars-per-line]
           [hid 24 additional lines, adjust with --max-lines-per-finding] 
        321┆ @PUT
        322┆ @Path("/delete")
        323┆ @Produces ("application/json")
        324┆ public Response delete ( @Context HttpServletRequest httpServletRequest, @Context final HttpServletResponse httpServletResponse, final DeleteForm deleteForm )   ... [0m
        325┆ 
        326┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
        327┆             .requiredBackendUser(true)
        328┆             .requiredFrontendUser(false)
        329┆             .requestAndResponse(httpServletRequest, httpServletResponse)
        330┆             .rejectWhenNoUser(true).init();
          [shortened a long line from output, adjust with --max-chars-per-line]
           [hid 24 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/page/PageResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        315┆ @NoCache
        316┆ @POST
        317┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        318┆ @Path("/{pageId}/layout")
        319┆ public Response saveLayout(@Context final HttpServletRequest request,
        320┆         @Context final HttpServletResponse response,
        321┆         @PathParam("pageId") final String pageId,
        322┆         @QueryParam("variantName") final String variantNameParam,
        323┆         final PageForm form) throws DotSecurityException {
        324┆ 
           [hid 46 additional lines, adjust with --max-lines-per-finding] 
        381┆ @NoCache
        382┆ @POST
        383┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        384┆ @Path("/layout")
        385┆ public Response saveLayout(@Context final HttpServletRequest request, @Context final HttpServletResponse response, final PageForm form) throws DotDataException  ... [0m
        386┆ 
        387┆     final InitDataObject auth = webResource.init(request, response, true);
        388┆     final User user = auth.getUser();
        389┆ 
        390┆     Response res = null;
          [shortened a long line from output, adjust with --max-chars-per-line]
           [hid 25 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/personalization/PersonalizationResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

         82┆ @POST
         83┆ @Path("/pagepersonas")
         84┆ @JSONP
         85┆ @NoCache
         86┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
         87┆ public Response personalizePageContainers (@Context final HttpServletRequest  request,
         88┆                                            @Context final HttpServletResponse response,
         89┆                                            final PersonalizationPersonaPageForm personalizationPersonaPageForm) throws DotDataException, DotSecurityException {
         90┆ 
         91┆     final User user = this.webResource.init(true, request, true).getUser();
           [hid 28 additional lines, adjust with --max-lines-per-finding] 
        129┆ @DELETE
        130┆ @Path("/pagepersonas/page/{pageId}/personalization/{personalization}")
        131┆ @JSONP
        132┆ @NoCache
        133┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        134┆ public Response personalizePageContainers (@Context final HttpServletRequest  request,
        135┆                                            @Context final HttpServletResponse response,
        136┆                                            @PathParam("pageId") final String  pageId,
        137┆                                            @PathParam("personalization") final String personalization) throws DotDataException, DotSecurityException {
        138┆ 
           [hid 28 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/portlet/ToolGroupResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

         58┆ @PUT
         59┆ @Path("/{layoutId}/_removefromuser")
         60┆ @JSONP
         61┆ @NoCache
         62┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
         63┆ public final Response deleteToolGroupFromUser(@Context final HttpServletRequest request,
         64┆         @Context final HttpServletResponse response,
         65┆         @PathParam("layoutId") final String layoutId, @QueryParam("userid") final String userid)
         66┆         throws DotDataException, DotSecurityException {
         67┆ 
           [hid 23 additional lines, adjust with --max-lines-per-finding] 
         98┆ @PUT
         99┆ @Path("/{layoutId}/_addtouser")
        100┆ @JSONP
        101┆ @NoCache
        102┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        103┆ public final Response addToolGroupToUser(@Context final HttpServletRequest request,
        104┆         @Context final HttpServletResponse response,
        105┆         @PathParam("layoutId") final String layoutId, @QueryParam("userid") final String userid)
        106┆         throws DotDataException, DotSecurityException {
        107┆ 
           [hid 22 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/pushpublish/PushPublishFilterResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        387┆ @DELETE
        388┆ @Path("/{filterKey}")
        389┆ @JSONP
        390┆ @NoCache
        391┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        392┆ public final Response deleteFilter(@Context final HttpServletRequest request,
        393┆                                  @Context final HttpServletResponse response,
        394┆                                  @PathParam("filterKey") final String filterKey) throws DotDataException {
        395┆ 
        396┆     final InitDataObject initData =
           [hid 22 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/site/SiteResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        260┆ @PUT
        261┆ @Path ("/switch/{id}")
        262┆ @JSONP
        263┆ @NoCache
        264┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        265┆ public final Response switchSite(
        266┆         @Context final HttpServletRequest httpServletRequest,
        267┆         @Context final HttpServletResponse httpServletResponse,
        268┆         @PathParam("id")   final String hostId
        269┆ ) {
           [hid 38 additional lines, adjust with --max-lines-per-finding] 
        315┆ @PUT
        316┆ @Path ("/switch")
        317┆ @JSONP
        318┆ @NoCache
        319┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        320┆ public final Response switchSite(
        321┆         @Context final HttpServletRequest request,
        322┆         @Context final HttpServletResponse response
        323┆ ) {
        324┆ 
           [hid 21 additional lines, adjust with --max-lines-per-finding] 
        409┆ @PUT
        410┆ @Path("/{siteId}/_publish")
        411┆ @JSONP
        412┆ @NoCache
        413┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        414┆ public Response publishSite(@Context final HttpServletRequest httpServletRequest,
        415┆                             @Context final HttpServletResponse httpServletResponse,
        416┆                             @PathParam("siteId") final String siteId) throws DotDataException, DotSecurityException {
        417┆ 
        418┆     final User user = new WebResource.InitBuilder(this.webResource)
           [hid 17 additional lines, adjust with --max-lines-per-finding] 
        448┆ @PUT
        449┆ @Path("/{siteId}/_unpublish")
        450┆ @JSONP
        451┆ @NoCache
        452┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        453┆ public Response unpublishSite(@Context final HttpServletRequest httpServletRequest,
        454┆                               @Context final HttpServletResponse httpServletResponse,
        455┆                               @PathParam("siteId") final String siteId) throws DotDataException, DotSecurityException {
        456┆ 
        457┆     final User user = new WebResource.InitBuilder(this.webResource)
           [hid 19 additional lines, adjust with --max-lines-per-finding] 
        489┆ @PUT
        490┆ @Path("/{siteId}/_archive")
        491┆ @JSONP
        492┆ @NoCache
        493┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        494┆ public Response archiveSite(@Context final HttpServletRequest httpServletRequest,
        495┆                             @Context final HttpServletResponse httpServletResponse,
        496┆                             @PathParam("siteId")  final String siteId) throws DotDataException, DotSecurityException{
        497┆ 
        498┆     final User user = new WebResource.InitBuilder(this.webResource)
           [hid 24 additional lines, adjust with --max-lines-per-finding] 
        548┆ @PUT
        549┆ @Path("/{siteId}/_unarchive")
        550┆ @JSONP
        551┆ @NoCache
        552┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        553┆ public Response unarchiveSite(@Context final HttpServletRequest httpServletRequest,
        554┆                               @Context final HttpServletResponse httpServletResponse,
        555┆                               @PathParam("siteId")  final String siteId) throws DotDataException, DotSecurityException {
        556┆ 
        557┆     final User user = new WebResource.InitBuilder(this.webResource)
           [hid 19 additional lines, adjust with --max-lines-per-finding] 
        590┆ @DELETE
        591┆ @Path("/{siteId}")
        592┆ @JSONP
        593┆ @NoCache
        594┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        595┆ public void deleteSite(@Context final HttpServletRequest httpServletRequest,
        596┆                             @Context final HttpServletResponse httpServletResponse,
        597┆                             @Suspended final AsyncResponse asyncResponse,
        598┆                             @PathParam("siteId")  final String siteId) throws DotDataException, DotSecurityException {
        599┆ 
           [hid 36 additional lines, adjust with --max-lines-per-finding] 
        649┆ @PUT
        650┆ @Path("/{siteId}/_makedefault")
        651┆ @JSONP
        652┆ @NoCache
        653┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        654┆ public Response makeDefault(@Context final HttpServletRequest httpServletRequest,
        655┆                        @Context final HttpServletResponse httpServletResponse,
        656┆                        @PathParam("siteId")  final String siteId) throws DotDataException, DotSecurityException {
        657┆ 
        658┆     final User user = new WebResource.InitBuilder(this.webResource)
           [hid 20 additional lines, adjust with --max-lines-per-finding] 
        764┆ @POST
        765┆ @Path("/_byname")
        766┆ @JSONP
        767┆ @NoCache
        768┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        769┆ public Response findHostByName(@Context final HttpServletRequest httpServletRequest,
        770┆                              @Context final HttpServletResponse httpServletResponse,
        771┆                              final SearchSiteByNameForm searchSiteByNameForm) throws DotDataException, DotSecurityException {
        772┆ 
        773┆     final User user = new WebResource.InitBuilder(this.webResource)
           [hid 23 additional lines, adjust with --max-lines-per-finding] 
        911┆ @PUT
        912┆ @Path("/variable")
        913┆ @JSONP
        914┆ @NoCache
        915┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        916┆ @Operation(summary = "Save a Site Variable",
        917┆         responses = {
        918┆                 @ApiResponse(
        919┆                         responseCode = "200",
        920┆                         content = @Content(mediaType = "application/json",
           [hid 68 additional lines, adjust with --max-lines-per-finding] 
       1223┆ @PUT
       1224┆ @Path("/_copy")
       1225┆ @JSONP
       1226┆ @NoCache
       1227┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1228┆ public Response copySite(@Context final HttpServletRequest httpServletRequest,
       1229┆                               @Context final HttpServletResponse httpServletResponse,
       1230┆                               final CopySiteForm copySiteForm)
       1231┆         throws DotDataException, DotSecurityException, PortalException, SystemException, ParseException, SchedulerException, ClassNotFoundException, AlreadyExis ... [0m
       1232┆ 
          [shortened a long line from output, adjust with --max-chars-per-line]
           [hid 33 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/sites/ruleengine/rules/RuleResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        163┆ @DELETE
        164┆ @Path("/rules/{ruleId}")
        165┆ public Response remove(@Context HttpServletRequest request, @Context final HttpServletResponse response, @PathParam("siteId") String siteId, @PathParam("ruleId" ... [0m
        166┆     User user = getUser(request, response);
        167┆ 
        168┆     try {
        169┆         Ruleable proxy =  getParent(siteId, user);
        170┆         Rule rule = getRule(ruleId, user);
        171┆         HibernateUtil.startTransaction();
        172┆         rulesAPI.deleteRule(rule, user, false);
          [shortened a long line from output, adjust with --max-chars-per-line]
           [hid 10 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/sites/ruleengine/rules/conditions/ConditionGroupResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        172┆ @DELETE
        173┆ @Path("/rules/{ruleId}/conditionGroups/{conditionGroupId}")
        174┆ public Response remove(@Context HttpServletRequest request,
        175┆                        @Context final HttpServletResponse response,
        176┆                                      @PathParam("siteId") String siteId,
        177┆                                      @PathParam("ruleId") String ruleId,
        178┆                                      @PathParam("conditionGroupId") String groupId) throws JSONException {
        179┆     User user = getUser(request, response);
        180┆ 
        181┆     try {
           [hid 13 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/sites/ruleengine/rules/conditions/ConditionResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        151┆ @DELETE
        152┆ @Path("/conditions/{conditionId}")
        153┆ public Response remove(@Context HttpServletRequest request, @Context final HttpServletResponse response, @PathParam("siteId") String siteId, @PathParam("conditi ... [0m
        154┆         throws JSONException {
        155┆     User user = getUser(request, response);
        156┆ 
        157┆     try {
        158┆         getHost(siteId, user);
        159┆         Condition condition = getCondition(conditionId, user);
        160┆         rulesAPI.deleteCondition(condition, user, false);
          [shortened a long line from output, adjust with --max-chars-per-line]
           [hid 8 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/sites/ruleengine/rules/conditions/ConditionValueResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        178┆ @DELETE
        179┆ @Path("/conditions/{conditionId}/conditionValues/{valueId}")
        180┆ public Response remove(@Context HttpServletRequest request,
        181┆                        @Context final HttpServletResponse response,
        182┆                        @PathParam("siteId") String siteId,
        183┆                        @PathParam("conditionId") String conditionId,
        184┆                        @PathParam("valueId") String valueId)
        185┆         throws JSONException {
        186┆     User user = getUser(request, response);
        187┆ 
           [hid 15 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/system/ConfigurationResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        198┆ @POST
        199┆ @Path("/_validateCompanyEmail")
        200┆ @JSONP
        201┆ @NoCache
        202┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        203┆ public Response validateEmail(
        204┆ 		@Context final HttpServletRequest request,
        205┆ 		@Context final HttpServletResponse response,
        206┆ 		final CompanyEmailForm form) throws ExecutionException, InterruptedException {
        207┆ 
           [hid 10 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/system/cache/CacheResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        264┆ @NoCache
        265┆ @DELETE
        266┆ @Path("/provider/{provider: .*}/flush/{group: .*}")
        267┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        268┆ public Response flushGroup(@Context final HttpServletRequest request,
        269┆                            @Context final HttpServletResponse response,
        270┆                            @PathParam("provider") final String provider,
        271┆                            @PathParam("group") final String group) {
        272┆ 
        273┆     new WebResource.InitBuilder(webResource)
           [hid 12 additional lines, adjust with --max-lines-per-finding] 
        295┆ @NoCache
        296┆ @DELETE
        297┆ @Path("/provider/{provider: .*}/flush/{group: .*}/{id: .*}")
        298┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        299┆ public Response flushObject(@Context final HttpServletRequest request,
        300┆                             @Context final HttpServletResponse response,
        301┆                             @PathParam("provider") final String provider,
        302┆                             @PathParam("group") final String group,
        303┆                             @PathParam("id") final String id) {
        304┆ 
           [hid 13 additional lines, adjust with --max-lines-per-finding] 
        326┆ @NoCache
        327┆ @DELETE
        328┆ @Path("/provider/{provider: .*}/flush")
        329┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        330┆ public Response flushAll(@Context final HttpServletRequest request,
        331┆                             @Context final HttpServletResponse response,
        332┆                             @PathParam("provider") final String provider) {
        333┆ 
        334┆     new WebResource.InitBuilder(webResource)
        335┆             .requestAndResponse(request, response)
           [hid 10 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/system/redis/RedisResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        125┆ @NoCache
        126┆ @DELETE
        127┆ @Path("/{key}")
        128┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        129┆ public Response delete(@Context final HttpServletRequest request,
        130┆                     @Context final HttpServletResponse response,
        131┆                     @PathParam("key") final String key) {
        132┆ 
        133┆     new WebResource.InitBuilder(webResource)
        134┆             .requestAndResponse(request, response)
           [hid 7 additional lines, adjust with --max-lines-per-finding] 
        144┆ @NoCache
        145┆ @PUT
        146┆ @Path("/hash")
        147┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        148┆ public Response setHash(@Context final HttpServletRequest request,
        149┆                     @Context final HttpServletResponse response,
        150┆                     final SetHashForm setForm) {
        151┆ 
        152┆     new WebResource.InitBuilder(webResource)
        153┆             .requestAndResponse(request, response)
           [hid 8 additional lines, adjust with --max-lines-per-finding] 
        181┆ @NoCache
        182┆ @DELETE
        183┆ @Path("/hash/{key}")
        184┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        185┆ public Response deleteHash(@Context final HttpServletRequest request,
        186┆                        @Context final HttpServletResponse response,
        187┆                        @PathParam("key") final String key) {
        188┆ 
        189┆     new WebResource.InitBuilder(webResource)
        190┆             .requestAndResponse(request, response)
           [hid 12 additional lines, adjust with --max-lines-per-finding] 
        205┆ @NoCache
        206┆ @PUT
        207┆ @Path("/incr/{key}")
        208┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        209┆ public void incrementAsync(@Context final HttpServletRequest request,
        210┆                         @Context final HttpServletResponse response,
        211┆                         @Suspended final AsyncResponse asyncResponse,
        212┆                         @PathParam("key") final String key) {
        213┆ 
        214┆     new WebResource.InitBuilder(webResource)
           [hid 17 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/system/role/RoleResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        148┆ @DELETE
        149┆ @Path("/layouts")
        150┆ @Produces("application/json")
        151┆ public Response deleteRoleLayouts(
        152┆ 		final @Context HttpServletRequest request,
        153┆ 		final @Context HttpServletResponse response,
        154┆ 		final RoleLayoutForm roleLayoutForm) throws DotDataException, DotSecurityException {
        155┆ 
        156┆ 	final InitDataObject initDataObject = new WebResource.InitBuilder()
        157┆ 			.requiredFrontendUser(false).rejectWhenNoUser(true)
           [hid 23 additional lines, adjust with --max-lines-per-finding] 
        186┆ @POST
        187┆ @Path("/layouts")
        188┆ @Produces("application/json")
        189┆ public Response saveRoleLayouts(
        190┆ 		final @Context HttpServletRequest request,
        191┆ 		final @Context HttpServletResponse response,
        192┆ 		final RoleLayoutForm roleLayoutForm) throws DotDataException, DotSecurityException {
        193┆ 
        194┆ 	final InitDataObject initDataObject = new WebResource.InitBuilder(this.webResource)
        195┆ 			.requiredFrontendUser(false).rejectWhenNoUser(true)
           [hid 23 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/temp/TempFileAPI.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

        169┆ final File tempFile = dotTempFile.file;
          ⋮┆----------------------------------------
        209┆ final File tempFile = dotTempFile.file;


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        318┆ @PUT
        319┆ @Path("/draft")
        320┆ @JSONP
        321┆ @NoCache
        322┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        323┆ public final Response saveDraft(@Context final HttpServletRequest  request,
        324┆                            @Context final HttpServletResponse response,
        325┆                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {
        326┆ 
        327┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 17 additional lines, adjust with --max-lines-per-finding] 
        422┆ @PUT
        423┆ @Path("/_savepublish")
        424┆ @JSONP
        425┆ @NoCache
        426┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        427┆ public final Response saveAndPublish(@Context final HttpServletRequest  request,
        428┆                            @Context final HttpServletResponse response,
        429┆                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {
        430┆ 
        431┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 20 additional lines, adjust with --max-lines-per-finding] 
        493┆ @PUT
        494┆ @Path("/_publish")
        495┆ @JSONP
        496┆ @NoCache
        497┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        498┆ public final Response publish(@Context final HttpServletRequest  request,
        499┆                            @Context final HttpServletResponse response,
        500┆                            final List<String> templatesToPublish){
        501┆ 
        502┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 34 additional lines, adjust with --max-lines-per-finding] 
        552┆ @PUT
        553┆ @Path("/_unpublish")
        554┆ @JSONP
        555┆ @NoCache
        556┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        557┆ public final Response unpublish(@Context final HttpServletRequest  request,
        558┆                               @Context final HttpServletResponse response,
        559┆                               final List<String> templatesToUnpublish) {
        560┆ 
        561┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 34 additional lines, adjust with --max-lines-per-finding] 
        606┆ @PUT
        607┆ @Path("/{templateId}/_copy")
        608┆ @JSONP
        609┆ @NoCache
        610┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        611┆ public final Response copy(@Context final HttpServletRequest  request,
        612┆                            @Context final HttpServletResponse response,
        613┆                            @PathParam("templateId") final String templateId) throws DotDataException, DotSecurityException {
        614┆ 
        615┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 16 additional lines, adjust with --max-lines-per-finding] 
        647┆ @PUT
        648┆ @Path("/_archive")
        649┆ @JSONP
        650┆ @NoCache
        651┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        652┆ public final Response archive(@Context final HttpServletRequest  request,
        653┆                              @Context final HttpServletResponse response,
        654┆                              final List<String> templatesToArchive) {
        655┆ 
        656┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 34 additional lines, adjust with --max-lines-per-finding] 
        706┆ @PUT
        707┆ @Path("/_unarchive")
        708┆ @JSONP
        709┆ @NoCache
        710┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        711┆ public final Response unarchive(@Context final HttpServletRequest  request,
        712┆         @Context final HttpServletResponse response,
        713┆         final List<String> templatesToUnarchive){
        714┆ 
        715┆     final InitDataObject initData = new WebResource.InitBuilder(webResource)
           [hid 34 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        193┆ @PUT
        194┆ @JSONP
        195┆ @Path("/current")
        196┆ @NoCache
        197┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        198┆ public final Response update(@Context final HttpServletRequest httpServletRequest, @Context final HttpServletResponse httpServletResponse,
        199┆ 							 final UpdateUserForm updateUserForm) throws Exception {
        200┆ 
        201┆ 	final User modUser = new WebResource.InitBuilder(webResource)
        202┆ 			.requiredBackendUser(true)
           [hid 63 additional lines, adjust with --max-lines-per-finding] 
        379┆ @POST
        380┆ @Path("/loginas")
        381┆ @JSONP
        382┆ @NoCache
        383┆ @Produces({ MediaType.APPLICATION_JSON, "application/javascript" })
        384┆ public final Response loginAs(@Context final HttpServletRequest request, @Context final HttpServletResponse httpResponse, final LoginAsForm loginAsForm) throws  ... [0m
        385┆ 	final String loginAsUserId = loginAsForm.getUserId();
        386┆ 	final String loginAsUserPwd = loginAsForm.getPassword();
        387┆ 
        388┆ 	final InitDataObject initData = new WebResource.InitBuilder(webResource)
          [shortened a long line from output, adjust with --max-chars-per-line]
           [hid 53 additional lines, adjust with --max-lines-per-finding] 
        534┆ @PUT
        535┆ @Path("/logoutas")
        536┆ @JSONP
        537┆ @NoCache
        538┆ @Produces({ MediaType.APPLICATION_JSON, "application/javascript" })
        539┆ public final Response logoutAs(@Context final HttpServletRequest httpServletRequest, @Context final HttpServletResponse httpServletResponse) {
        540┆ 
        541┆ 	new WebResource.InitBuilder(webResource)
        542┆ 			.requiredBackendUser(true)
        543┆ 			.requiredFrontendUser(false)
           [hid 34 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v1/workflow/WorkflowResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        518┆ @POST
        519┆ @Path("/contentlet/actions/bulk")
        520┆ @JSONP
        521┆ @NoCache
        522┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        523┆ public final Response getBulkActions(@Context final HttpServletRequest request,
        524┆                                      @Context final HttpServletResponse response,
        525┆                                      final BulkActionForm bulkActionForm) {
        526┆ 
        527┆     final InitDataObject initDataObject = this.webResource.init
           [hid 15 additional lines, adjust with --max-lines-per-finding] 
        544┆ @PUT
        545┆ @Path("/contentlet/actions/bulk/fire")
        546┆ @JSONP
        547┆ @NoCache
        548┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        549┆ public final void fireBulkActions(@Context final HttpServletRequest request,
        550┆                                   @Suspended final AsyncResponse asyncResponse,
        551┆                                   final FireBulkActionsForm fireBulkActionsForm) {
        552┆ 
        553┆     final InitDataObject initDataObject = this.webResource.init(null, request, new EmptyHttpResponse(), true, null);
           [hid 20 additional lines, adjust with --max-lines-per-finding] 
        575┆ @POST
        576┆ @Path("/contentlet/actions/_bulkfire")
        577┆ @JSONP
        578┆ @Produces(SseFeature.SERVER_SENT_EVENTS)
        579┆ public EventOutput fireBulkActions(@Context final HttpServletRequest request,
        580┆         final FireBulkActionsForm fireBulkActionsForm)
        581┆         throws DotDataException, DotSecurityException {
        582┆     final InitDataObject initDataObject = this.webResource
        583┆             .init(null, request, new EmptyHttpResponse(), true, null);
        584┆ 
           [hid 46 additional lines, adjust with --max-lines-per-finding] 
        794┆ @POST
        795┆ @Path("/schemes/actions/{systemAction}")
        796┆ @JSONP
        797┆ @NoCache
        798┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        799┆ public final Response findActionsBySchemesAndSystemAction(@Context final HttpServletRequest request,
        800┆                                                 @Context final HttpServletResponse response,
        801┆                                                 @PathParam("systemAction") final WorkflowAPI.SystemAction systemAction,
        802┆                                                 final WorkflowSchemesForm workflowSchemesForm) {
        803┆ 
           [hid 20 additional lines, adjust with --max-lines-per-finding] 
        931┆ @PUT
        932┆ @Path("/system/actions")
        933┆ @JSONP
        934┆ @NoCache
        935┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        936┆ public final Response saveSystemAction(@Context final HttpServletRequest request,
        937┆                                  @Context final HttpServletResponse response,
        938┆                                  final WorkflowSystemActionForm workflowSystemActionForm) {
        939┆ 
        940┆     final InitDataObject initDataObject = this.webResource.init
           [hid 22 additional lines, adjust with --max-lines-per-finding] 
        973┆ @DELETE
        974┆ @Path("/system/actions/{identifier}")
        975┆ @JSONP
        976┆ @NoCache
        977┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        978┆ public final Response deletesSystemAction(@Context final HttpServletRequest request,
        979┆                                           @Context final HttpServletResponse response,
        980┆                                           @PathParam("identifier") final String identifier) {
        981┆ 
        982┆     final InitDataObject initDataObject = this.webResource.init
           [hid 17 additional lines, adjust with --max-lines-per-finding] 
       1044┆ @PUT
       1045┆ @Path("/actions/{actionId}")
       1046┆ @JSONP
       1047┆ @NoCache
       1048┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1049┆ public final Response updateAction(@Context final HttpServletRequest request,
       1050┆                                    @Context final HttpServletResponse response,
       1051┆                                    @PathParam("actionId") final String actionId,
       1052┆                                    final WorkflowActionForm workflowActionForm) {
       1053┆ 
           [hid 14 additional lines, adjust with --max-lines-per-finding] 
       1075┆ @POST
       1076┆ @Path("/steps/{stepId}/actions")
       1077┆ @JSONP
       1078┆ @NoCache
       1079┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1080┆ public final Response saveActionToStep(@Context final HttpServletRequest request,
       1081┆                                        @Context final HttpServletResponse response,
       1082┆                                        @PathParam("stepId")   final String stepId,
       1083┆                                        final WorkflowActionStepForm workflowActionStepForm) {
       1084┆ 
           [hid 16 additional lines, adjust with --max-lines-per-finding] 
       1109┆ @POST
       1110┆ @Path("/actions/{actionId}/actionlets")
       1111┆ @JSONP
       1112┆ @NoCache
       1113┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1114┆ public final Response saveActionletToAction(@Context final HttpServletRequest request,
       1115┆                                             @PathParam("actionId")   final String actionId,
       1116┆                                             final WorkflowActionletActionForm workflowActionletActionForm) {
       1117┆ 
       1118┆     final InitDataObject initDataObject = this.webResource.init
           [hid 19 additional lines, adjust with --max-lines-per-finding] 
       1146┆ @DELETE
       1147┆ @Path("/steps/{stepId}")
       1148┆ @JSONP
       1149┆ @NoCache
       1150┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1151┆ public final void deleteStep(@Context final HttpServletRequest request,
       1152┆                              @Suspended final AsyncResponse asyncResponse,
       1153┆                              @PathParam("stepId") final String stepId) {
       1154┆ 
       1155┆     final InitDataObject initDataObject = this.webResource.init
           [hid 12 additional lines, adjust with --max-lines-per-finding] 
       1175┆ @DELETE
       1176┆ @Path("/steps/{stepId}/actions/{actionId}")
       1177┆ @JSONP
       1178┆ @NoCache
       1179┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1180┆ public final Response deleteAction(@Context final HttpServletRequest request,
       1181┆                                    @Context final HttpServletResponse response,
       1182┆                                    @PathParam("actionId") final String actionId,
       1183┆                                    @PathParam("stepId")   final String stepId) {
       1184┆ 
           [hid 16 additional lines, adjust with --max-lines-per-finding] 
       1208┆ @DELETE
       1209┆ @Path("/actions/{actionId}")
       1210┆ @JSONP
       1211┆ @NoCache
       1212┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1213┆ public final Response deleteAction(@Context final HttpServletRequest request,
       1214┆                                    @Context final HttpServletResponse response,
       1215┆                                    @PathParam("actionId") final String actionId) {
       1216┆ 
       1217┆     final InitDataObject initDataObject = this.webResource.init
           [hid 15 additional lines, adjust with --max-lines-per-finding] 
       1240┆ @DELETE
       1241┆ @Path("/actionlets/{actionletId}")
       1242┆ @JSONP
       1243┆ @NoCache
       1244┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1245┆ public final Response deleteActionlet(@Context final HttpServletRequest request,
       1246┆                                       @PathParam("actionletId") final String actionletId) {
       1247┆ 
       1248┆     final InitDataObject initDataObject = this.webResource.init
       1249┆             (null, true, request, true, null);
           [hid 25 additional lines, adjust with --max-lines-per-finding] 
       1283┆ @PUT
       1284┆ @Path("/reorder/step/{stepId}/order/{order}")
       1285┆ @JSONP
       1286┆ @NoCache
       1287┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1288┆ public final Response reorderStep(@Context final HttpServletRequest request,
       1289┆                                   @Context final HttpServletResponse response,
       1290┆                                     @PathParam("stepId")   final String stepId,
       1291┆                                   @PathParam("order")    final int order) {
       1292┆     final InitDataObject initDataObject = this.webResource.init
           [hid 14 additional lines, adjust with --max-lines-per-finding] 
       1316┆ @PUT
       1317┆ @Path("/steps/{stepId}")
       1318┆ @JSONP
       1319┆ @NoCache
       1320┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1321┆ public final Response updateStep(@Context final HttpServletRequest request,
       1322┆                                  @Context final HttpServletResponse response,
       1323┆                                  @NotNull @PathParam("stepId") final String stepId,
       1324┆                                  final WorkflowStepUpdateForm stepForm) {
       1325┆     final InitDataObject initDataObject = this.webResource.init(null, request, response, true, null);
           [hid 12 additional lines, adjust with --max-lines-per-finding] 
       1345┆ @POST
       1346┆ @Path("/steps")
       1347┆ @JSONP
       1348┆ @NoCache
       1349┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1350┆ public final Response addStep(@Context final HttpServletRequest request,
       1351┆                               @Context final HttpServletResponse response,
       1352┆                               final WorkflowStepAddForm newStepForm) {
       1353┆     String schemeId = null;
       1354┆     try {
           [hid 13 additional lines, adjust with --max-lines-per-finding] 
       1893┆ @PATCH()
       1894┆ @Path("/actions/default/fire/{systemAction}")
       1895┆ @JSONP
       1896┆ @NoCache
       1897┆ //@Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       1898┆ @Produces("application/octet-stream")
       1899┆ public final Response fireMergeActionDefault(@Context final HttpServletRequest request,
       1900┆                                         @Context final HttpServletResponse response,
       1901┆                                         @QueryParam("inode")            final String inode,
       1902┆                                         @QueryParam("identifier")       final String identifier,
           [hid 40 additional lines, adjust with --max-lines-per-finding] 
       2792┆ @PUT
       2793┆ @Path("/reorder/steps/{stepId}/actions/{actionId}")
       2794┆ @JSONP
       2795┆ @NoCache
       2796┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       2797┆ public final Response reorderAction(@Context final HttpServletRequest request,
       2798┆                                     @Context final HttpServletResponse response,
       2799┆                                     @PathParam("stepId")   final String stepId,
       2800┆                                     @PathParam("actionId") final String actionId,
       2801┆                                     final WorkflowReorderWorkflowActionStepForm workflowReorderActionStepForm) {
           [hid 20 additional lines, adjust with --max-lines-per-finding] 
       2830┆ @POST
       2831┆ @Path("/schemes/import")
       2832┆ @JSONP
       2833┆ @NoCache
       2834┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       2835┆ public final Response importScheme(@Context final HttpServletRequest  httpServletRequest,
       2836┆                                    @Context final HttpServletResponse httpServletResponse,
       2837┆                                    final WorkflowSchemeImportObjectForm workflowSchemeImportForm) {
       2838┆ 
       2839┆     final InitDataObject initDataObject = this.webResource.init
           [hid 32 additional lines, adjust with --max-lines-per-finding] 
       2925┆ @POST
       2926┆ @Path("/schemes/{schemeId}/copy")
       2927┆ @JSONP
       2928┆ @NoCache
       2929┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       2930┆ public final Response copyScheme(@Context final HttpServletRequest httpServletRequest,
       2931┆                                  @Context final HttpServletResponse httpServletResponse,
       2932┆                                  @PathParam("schemeId") final String schemeId,
       2933┆                                  @QueryParam("name") final String name,
       2934┆                                  final WorkflowCopyForm workflowCopyForm) {
           [hid 29 additional lines, adjust with --max-lines-per-finding] 
       3073┆ @POST
       3074┆ @Path("/schemes")
       3075┆ @JSONP
       3076┆ @NoCache
       3077┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       3078┆ public final Response saveScheme(@Context final HttpServletRequest request,
       3079┆                                  @Context final HttpServletResponse response,
       3080┆                            final WorkflowSchemeForm workflowSchemeForm) {
       3081┆     final InitDataObject initDataObject = this.webResource.init(null, request, response, true, null);
       3082┆     try {
           [hid 10 additional lines, adjust with --max-lines-per-finding] 
       3101┆ @PUT
       3102┆ @Path("/schemes/{schemeId}")
       3103┆ @JSONP
       3104┆ @NoCache
       3105┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       3106┆ public final Response updateScheme(@Context final HttpServletRequest request,
       3107┆                                    @Context final HttpServletResponse response,
       3108┆                              @PathParam("schemeId") final String schemeId,
       3109┆                                    final WorkflowSchemeForm workflowSchemeForm) {
       3110┆     final InitDataObject initDataObject = this.webResource.init(null, request, response, true, null);
           [hid 11 additional lines, adjust with --max-lines-per-finding] 
       3128┆ @DELETE
       3129┆ @Path("/schemes/{schemeId}")
       3130┆ @JSONP
       3131┆ @NoCache
       3132┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
       3133┆ public final void deleteScheme(@Context final HttpServletRequest request,
       3134┆                                @Suspended final AsyncResponse asyncResponse,
       3135┆                                @PathParam("schemeId") final String schemeId) {
       3136┆ 
       3137┆     final InitDataObject initDataObject = this.webResource.init(null, request,new EmptyHttpResponse(), true, null);
           [hid 10 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v2/contenttype/FieldResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        351┆ @DELETE
        352┆ @Path("/id/{fieldId}")
        353┆ @JSONP
        354┆ @NoCache
        355┆ @Produces({ MediaType.APPLICATION_JSON, "application/javascript" })
        356┆ public Response deleteContentTypeFieldById(
        357┆         @PathParam("fieldId") final String fieldId,
        358┆         @Context final HttpServletRequest httpServletRequest,
        359┆         @Context final HttpServletResponse httpServletResponse)
        360┆         throws DotDataException, DotSecurityException {
           [hid 19 additional lines, adjust with --max-lines-per-finding] 
        381┆ @DELETE
        382┆ @Path("/var/{fieldVar}")
        383┆ @JSONP
        384┆ @NoCache
        385┆ @Produces({ MediaType.APPLICATION_JSON, "application/javascript" })
        386┆ public Response deleteContentTypeFieldByVar(@PathParam("typeIdOrVarName") final String typeIdOrVarName,
        387┆         @PathParam("fieldVar") final String fieldVar,
        388┆         @Context final HttpServletRequest httpServletRequest,
        389┆         @Context final HttpServletResponse httpServletResponse)
        390┆         throws DotDataException, DotSecurityException {
           [hid 21 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/api/v2/languages/LanguagesResource.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        186┆ @POST
        187┆ @JSONP
        188┆ @NoCache
        189┆ @Path("/{languageTag}")
        190┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        191┆ public final Response saveFromLanguageTag(@Context final HttpServletRequest request,
        192┆         @Context final HttpServletResponse response,
        193┆         @PathParam("languageTag") final String languageTag
        194┆ ) throws AlreadyExistException {
        195┆     DotPreconditions.notNull(languageTag, "Expected languageTag Param path was empty.");
           [hid 15 additional lines, adjust with --max-lines-per-finding] 
        266┆ @PUT
        267┆ @Path("/{languageId}")
        268┆ @JSONP
        269┆ @NoCache
        270┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        271┆ public final Response updateLanguage(@Context final HttpServletRequest request,
        272┆         @Context final HttpServletResponse response,
        273┆         @PathParam("languageId") final String languageId,
        274┆         final LanguageForm languageForm) throws AlreadyExistException {
        275┆     this.webResource.init(null, request, response,
           [hid 7 additional lines, adjust with --max-lines-per-finding] 
        291┆ @DELETE
        292┆ @Path("/{languageId}")
        293┆ @JSONP
        294┆ @NoCache
        295┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        296┆ public final Response deleteLanguage(@Context final HttpServletRequest request,
        297┆         @Context final HttpServletResponse response,
        298┆         @PathParam("languageId") final String languageId) {
        299┆     this.webResource.init(null, request, response,
        300┆             true, PortletID.LANGUAGES.toString());
           [hid 6 additional lines, adjust with --max-lines-per-finding] 
        308┆ @POST
        309┆ @JSONP
        310┆ @NoCache
        311┆ @Path("/i18n")
        312┆ @InitRequestRequired
        313┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        314┆ public Response getMessages(@Context HttpServletRequest request,
        315┆                             final I18NForm i18NForm) {
        316┆     return oldLanguagesResource.getMessages(request, i18NForm);
        317┆ }
          ⋮┆----------------------------------------
        447┆ @PUT
        448┆ @Path("/{language}/_makedefault")
        449┆ @JSONP
        450┆ @NoCache
        451┆ @Produces({MediaType.APPLICATION_JSON, "application/javascript"})
        452┆ public Response makeDefault(@Context final HttpServletRequest httpServletRequest,
        453┆         @Context final HttpServletResponse httpServletResponse,
        454┆         @PathParam("language") final Long languageId,
        455┆         final MakeDefaultLangForm makeDefaultLangForm
        456┆ ) throws DotDataException, DotSecurityException {
           [hid 23 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/rest/elasticsearch/ESContentResourcePortlet.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.default-resteasy-provider-abuse
        When a Restful webservice endpoint isn't configured with a @Consumes  annotation, an
        attacker could abuse the SerializableProvider by sending a  HTTP Request with a Content-Type
        of application/x-java-serialized-object.  The body of that request would be processed by the
        SerializationProvider  and could contain a malicious payload, which may lead to arbitrary
        code  execution. Instead, add a @Consumes annotation to the function or class.

        166┆ 	@POST
        167┆ 	@Path("raw")
        168┆ 	@Produces(MediaType.APPLICATION_JSON)
        169┆ 	public Response searchRaw(@Context HttpServletRequest request) {
        170┆ 
        171┆         InitDataObject initData = webResource.init(null, true, request, false, null);
        172┆ 
        173┆ 		HttpSession session = request.getSession();
        174┆ 
        175┆         PageMode mode = PageMode.get(request);
           [hid 15 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.object-deserialization
        Found object deserialization using ObjectInputStream. Deserializing entire Java objects is
        dangerous because malicious actors can create Java object streams with unintended
        consequences. Ensure that the objects being deserialized are not user-controlled. If this
        must be done, consider using HMACs to sign the data stream to make sure it is not tampered
        with, or consider only transmitting object fields and populating a new object.

        336┆ return (AppsSecretsImportExport)new ObjectInputStream(inputStream).readObject();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotcms/util/ReflectionUtils.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

        174┆ statement.execute();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/business/ajax/HostAjax.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

        206┆ File hostThumbnail = contentAPI.getBinaryFile(host.getInode(), Host.HOST_THUMB_KEY, user);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/business/cache/provider/h22/H22Cache.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.jdbc-sqli
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

        295┆ stmt.execute("truncate table " + TABLE_PREFIX + table);
          ⋮┆----------------------------------------
        349┆ ResultSet rs = stmt.executeQuery("select DISTINCT(cache_group) from " + TABLE_PREFIX + table);
          ⋮┆----------------------------------------
        627┆ s.execute("CREATE CACHED TABLE IF NOT EXISTS `" + TABLE_PREFIX + table
        628┆ 		+ "` (cache_id bigint PRIMARY KEY,cache_group VARCHAR(255), CACHE_DATA BLOB)");
          ⋮┆----------------------------------------
        631┆ s.execute("CREATE INDEX IF NOT EXISTS `idx_" + TABLE_PREFIX + table + "_index_` on "
        632┆ 		+ TABLE_PREFIX + table + "(cache_group)");
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.object-deserialization
        Found object deserialization using ObjectInputStream. Deserializing entire Java objects is
        dangerous because malicious actors can create Java object streams with unintended
        consequences. Ensure that the objects being deserialized are not user-controlled. If this
        must be done, consider using HMACs to sign the data stream to make sure it is not tampered
        with, or consider only transmitting object fields and populating a new object.

        580┆ final ObjectInputStream input=new ObjectInputStream(bin);){


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/business/cache/provider/redis/RedisProvider.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.object-deserialization
        Found object deserialization using ObjectInputStream. Deserializing entire Java objects is
        dangerous because malicious actors can create Java object streams with unintended
        consequences. Ensure that the objects being deserialized are not user-controlled. If this
        must be done, consider using HMACs to sign the data stream to make sure it is not tampered
        with, or consider only transmitting object fields and populating a new object.

        224┆ input = new ObjectInputStream(bin);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/business/portal/PortletFactoryImpl.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.owasp.java.xxe.org.jdom2.input.SAXBuild
     er
        SAXBuilder being instantiated without calling the setFeature functions that are generally
        used for disabling entity processing

         77┆ SAXBuilder builder = new SAXBuilder();
          ⋮┆----------------------------------------
         77┆ SAXBuilder builder = new SAXBuilder();
         78┆ Document doc = builder.build(fileStream);
          ⋮┆----------------------------------------
         97┆ SAXBuilder builder = new SAXBuilder();
          ⋮┆----------------------------------------
         97┆ SAXBuilder builder = new SAXBuilder();
         98┆ Document doc = (Document) builder.build(stream);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/common/db/DotConnect.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

        256┆ boolean ret = stmt.execute(sql);
          ⋮┆----------------------------------------
        264┆ boolean ret = stmt.execute(sql);
          ⋮┆----------------------------------------
        256┆ boolean ret = stmt.execute(sql);
          ⋮┆----------------------------------------
        264┆ boolean ret = stmt.execute(sql);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/common/db/DotDatabaseMetaData.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

        494┆ try (final ResultSet resultSet = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)
        495┆         .executeQuery("select CONSTRAINT_NAME from INFORMATION_SCHEMA.KEY_COLUMN_USAGE where CONSTRAINT_SCHEMA = SCHEMA() and TABLE_NAME = '" +
        496┆                 tableName + "' and COLUMN_NAME = '" + columnName + "'")) {
          ⋮┆----------------------------------------
        505┆ try (final ResultSet resultSet = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)
        506┆         .executeQuery("SHOW INDEX FROM " + tableName + " where column_name = '" + columnName + "'")) {
          ⋮┆----------------------------------------
        531┆ try (final ResultSet resultSet = statement.executeQuery("SELECT default_constraints.name FROM sys.all_columns INNER JOIN sys.tables\n" +
        532┆         "        ON all_columns.object_id = tables.object_id\n" +
        533┆         "        INNER JOIN sys.schemas\n" +
        534┆         "        ON tables.schema_id = schemas.schema_id\n" +
        535┆         "        INNER JOIN sys.default_constraints\n" +
        536┆         "        ON all_columns.default_object_id = default_constraints.object_id\n" +
        537┆         "WHERE tables.name = '" + tableName + "' AND all_columns.name = '" + columnName + "'")) {


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/db/DbConnectionUtil.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.formatted-sql-string
        Detected a formatted string in a SQL statement. This could lead to SQL injection if
        variables in the SQL statement are not properly sanitized. Use a prepared statements
        (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using
        'connection.prepareStatement'.

         53┆ statement.execute( lock );


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/image/gif/GifDecoder.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.owasp.java.ssrf.java.net.url
        A parameter being passed directly into java.net.URL function most likely lead to SSRF.

        329┆ public int read(String name) {
        330┆   status = STATUS_OK;
        331┆   try {
        332┆     name = name.trim();
        333┆     if ((name.indexOf("file:") >= 0) ||
        334┆       (name.indexOf(":/") > 0)) {
        335┆       URL url = new URL(name);
        336┆       in = new BufferedInputStream(url.openStream());
        337┆     } else {
        338┆       in = new BufferedInputStream(new FileInputStream(name));
           [hid 8 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/portlets/browser/ajax/BrowserAjax.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

        806┆ java.io.File file = fileAsset.getFileAsset();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/portlets/calendar/ajax/CalendarAjax.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

        556┆ File binaryFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary()
        557┆ 		+ File.separator + user.getUserId() + File.separator + elementName
        558┆ 		+ File.separator + binaryFileValue);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/portlets/calendar/cms/struts/EventForm.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

        196┆ java.io.File image = uploadReq.getFile("image");


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/ajax/ContentletAjax.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

       1776┆ File binaryFile = null;
          ⋮┆----------------------------------------
       1787┆ binaryFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary()
       1788┆ 		+ File.separator + user.getUserId() + File.separator + "binary1"
       1789┆ 		+ File.separator + ((File)elementValue).getName());
          ⋮┆----------------------------------------
       1795┆ binaryFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary()
       1796┆ 		+ File.separator + user.getUserId() + File.separator + elementName
       1797┆ 		+ File.separator + binaryFileValue);
          ⋮┆----------------------------------------
       1803┆ File acopyFolder=new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary()
       1804┆         + File.separator + user.getUserId() + File.separator + elementName
       1805┆         + File.separator + UUIDGenerator.generateUuid());
          ⋮┆----------------------------------------
       1808┆ File acopy=new File(acopyFolder, binaryFileValue);
          ⋮┆----------------------------------------
       2005┆ File tmp=new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary()
       2006┆         +File.separator+user.getUserId()+File.separator+ff.getFieldContentlet());


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/ajax/FileAssetAjax.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

         48┆ java.io.File fileIO = fa.getFileAsset();
          ⋮┆----------------------------------------
         94┆ final File fileData = new File(tempDir.getAbsoluteFile() + File.separator + WebKeys.TEMP_FILE_PREFIX + incomingFileName);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/portlets/osgi/AJAX/OSGIAJAX.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

         64┆ File from = new File(loadPath + File.separator + jarName);
          ⋮┆----------------------------------------
         65┆ File to = new File(undeployedPath + File.separator + jarName);
          ⋮┆----------------------------------------
         91┆ File from = new File(undeployedPath + File.separator + jarName);
          ⋮┆----------------------------------------
         92┆ File to = new File(loadPath + File.separator + jarName);
          ⋮┆----------------------------------------
        179┆ File osgiJar = new File(felixDeployFolder + File.separator + fileName);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/VelocityScriptActionlet.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.script-engine-injection
        Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot
        enter '.eval()', otherwise, this is a code injection vulnerability.

         88┆ @Override
         89┆ public void executeAction(final WorkflowProcessor processor,
         90┆                           final Map<String, WorkflowActionClassParameter> params) throws WorkflowActionFailureException {
         91┆ 
         92┆     try {
         93┆         final User  currentUser          = processor.getUser();
         94┆         final HttpServletRequest request =
         95┆                 null == HttpServletRequestThreadLocal.INSTANCE.getRequest()?
         96┆                         this.mockRequest(currentUser): HttpServletRequestThreadLocal.INSTANCE.getRequest();
         97┆         final HttpServletResponse response =
           [hid 24 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/servlets/BinaryExporterServlet.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.httpservlet-path-traversal
        Detected a potential path traversal. A malicious actor could control the location of this
        file, to include going backwards in the directory with '../'. To address this, ensure that
        user-controlled variables in file paths are sanitized. You may also consider using a utility
        method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file
        name from the path.

        356┆ inputFile = contentAPI.getBinaryFile(content.getInode(), field.variable(), APILocator.getUserAPI().getSystemUser());
          ⋮┆----------------------------------------
        358┆ inputFile = contentAPI.getBinaryFile(content.getInode(), field.variable(), user);
          ⋮┆----------------------------------------
        382┆ inputFile = tempFileAPI.getTempFile(req, shorty.longId).get().file;


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/util/RuntimeUtils.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.command-injection-process-builder
        A formatted or concatenated string was detected as input to a ProcessBuilder call. This is
        dangerous if a variable is controlled by user input and could result in a command injection.
        Ensure your variables are not controlled by users or sufficiently sanitized.

        136┆ return new ProcessBuilder(commands).redirectErrorStream(true);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/dotmarketing/util/XMLUtils.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.documentbuilderfactory-disallow-
     doctype-decl-missing
        DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML
        external entity attacks. Disable this by setting the feature
        "http://apache.org/xml/features/disallow-doctype-decl" to true. Alternatively, allow DOCTYPE
        declarations and only prohibit external entities declarations. This can be done by setting
        the features "http://xml.org/sax/features/external-general-entities" and
        "http://xml.org/sax/features/external-parameter-entities" to false.

         ▶▶┆ Autofix ▶ factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
factory.newDocumentBuilder();
         88┆ final DocumentBuilder documentBuilder = factory.newDocumentBuilder();


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/liferay/portlet/PortletPreferencesSerializer.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.owasp.java.xxe.org.dom4j.io.SAXReader
        SAXReader being instantiated without calling the setFeature functions that are generally
        used for disabling entity processing

         73┆ SAXReader xmlReader = new SAXReader();
          ⋮┆----------------------------------------
         73┆ SAXReader xmlReader = new SAXReader();
         74┆ xmlReader.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
         75┆ 
         76┆ Document doc = xmlReader.read(new StringReader(xml));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/com/liferay/util/Base64.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.object-deserialization
        Found object deserialization using ObjectInputStream. Deserializing entire Java objects is
        dangerous because malicious actors can create Java object streams with unintended
        consequences. Ensure that the objects being deserialized are not user-controlled. If this
        must be done, consider using HMACs to sign the data stream to make sure it is not tampered
        with, or consider only transmitting object fields and populating a new object.

        186┆ ObjectInputStream is =
        187┆ 	new ObjectInputStream(new BufferedInputStream(baos));


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/org/apache/velocity/tools/view/ImportSupport.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.owasp.java.ssrf.java.net.url
        A parameter being passed directly into java.net.URL function most likely lead to SSRF.

        173┆ protected Reader acquireReader(final String url, final long timeout, Map<String, String> headers) throws IOException, Exception
        174┆ {
        175┆     if (!this.isAbsoluteUrl)
        176┆     {
        177┆         // for relative URLs, delegate to our peer
        178┆         return new StringReader(acquireString(url, timeout, headers));
        179┆     }
        180┆     else
        181┆     {
        182┆         // absolute URL
           [hid 79 additional lines, adjust with --max-lines-per-finding] 


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/org/apache/velocity/tools/view/XMLToolboxManager.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.owasp.java.xxe.org.apache.commons.diges
     ter3.Digester
        Digester being instantiated without calling the setFeature functions that are generally used
        for disabling entity processing

        204┆ Digester digester = new Digester();
        205┆ digester.setValidating(false);
        206┆ digester.setUseContextClassLoader(true);
        207┆ digester.push(this);
        208┆ digester.addRuleSet(getRuleSet());
        209┆ digester.parse(input);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/dotCMS/src/main/java/org/quartz/impl/jdbcjobstore/DotMSSQLDelegate.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.object-deserialization
        Found object deserialization using ObjectInputStream. Deserializing entire Java objects is
        dangerous because malicious actors can create Java object streams with unintended
        consequences. Ensure that the objects being deserialized are not user-controlled. If this
        must be done, consider using HMACs to sign the data stream to make sure it is not tampered
        with, or consider only transmitting object fields and populating a new object.

         30┆ in= new ObjectInputStream(binaryInput);


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/dotCMS.core/tools/dotcms-cli/.mvn/wrapper/MavenWrapperDownloader.java 
     home.rtz.github_vuln_research.my_semgrep_rules.java_semgrep_rules.owasp.java.ssrf.java.net.url
        A parameter being passed directly into java.net.URL function most likely lead to SSRF.

        117┆ private static void downloadFileFromURL( String urlString, File destination )
        118┆     throws Exception
        119┆ {
        120┆     if ( System.getenv( "MVNW_USERNAME" ) != null && System.getenv( "MVNW_PASSWORD" ) != null )
        121┆     {
        122┆         String username = System.getenv( "MVNW_USERNAME" );
        123┆         char[] password = System.getenv( "MVNW_PASSWORD" ).toCharArray();
        124┆         Authenticator.setDefault( new Authenticator()
        125┆         {
        126┆             @Override
           [hid 14 additional lines, adjust with --max-lines-per-finding] 
