
Findings:

  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/stefanprodan.podinfo/cmd/podcli/check.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.grpc-client-insecure-connection
        Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection
        without encryption to a gRPC server. A malicious attacker could tamper with the gRPC
        message, which could compromise the machine. Instead, establish a secure connection with an
        SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a
        create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix
        looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(<config>))'.

         ▶▶┆ Autofix ▶ s/(.*)WithInsecure\(.*?\)/\1WithTransportCredentials(credentials.NewTLS(<your_tls_config_here>))/g
        279┆ conn, err := grpc.Dial(address, grpc.WithInsecure())


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/stefanprodan.podinfo/cmd/podinfo/main.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.bad-tmp-file-creation
        File creation in shared tmp directory without using ioutil.Tempfile

        237┆ f, err := os.Create(path)
          ⋮┆----------------------------------------
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.grpc-server-insecure-connection
        Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This
        allows for a connection without encryption to this server. A malicious attacker could tamper
        with the gRPC message, which could compromise the machine. Include credentials derived from
        an SSL certificate in order to create a secure gRPC connection. You can create credentials
        using 'credentials.NewServerTLSFromFile("cert.pem", "cert.key")'.

        141┆ grpcSrv, _ := grpc.NewServer(&grpcCfg, logger)


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/stefanprodan.podinfo/pkg/api/echo.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.dynamic-httptrace-clienttrace
        Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a
        static definition for 'otelhttptrace.NewClientTrace(ctx)'. Dynamic ClientTraces are
        dangerous because they deserialize function code to run when certain Request events occur,
        which could lead to code being run without your knowledge. Ensure that your ClientTrace is
        statically defined.

         48┆ ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))


  /home/rtz/github_vuln_research/my_semgrep_rules/custom_repos/repos_dir/stefanprodan.podinfo/pkg/grpc/server.go 
     home.rtz.github_vuln_research.my_semgrep_rules.go_semgrep_rules.grpc-server-insecure-connection
        Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This
        allows for a connection without encryption to this server. A malicious attacker could tamper
        with the gRPC message, which could compromise the machine. Include credentials derived from
        an SSL certificate in order to create a secure gRPC connection. You can create credentials
        using 'credentials.NewServerTLSFromFile("cert.pem", "cert.key")'.

         39┆ srv := grpc.NewServer()
